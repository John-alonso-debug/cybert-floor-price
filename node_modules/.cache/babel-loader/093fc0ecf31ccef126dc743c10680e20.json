{"ast":null,"code":"/* global web3,  */\n// ignore those keywords when linting\n\n/*\n* Use of code from https://medium.com/edgefund/time-travelling-truffle-tests-f581c1964687\n* Utility functions to advance blocktime and mine blocks artificially for EVM\n*/\nadvanceTime = time => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_increaseTime',\n      params: [time],\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nadvanceBlock = () => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_mine',\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nadvanceBlockAndSetTime = time => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_mine',\n      params: [time],\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nadvanceTimeAndBlock = async time => {\n  //capture current time\n  let block = await web3.eth.getBlock('latest');\n  let forwardTime = block['timestamp'] + time;\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_mine',\n      params: [forwardTime],\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\ntakeSnapshot = () => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_snapshot',\n      id: new Date().getTime()\n    }, (err, snapshotId) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(snapshotId);\n    });\n  });\n};\n\nrevertToSnapshot = id => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_revert',\n      params: [id],\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nmodule.exports = {\n  advanceTime,\n  advanceBlock,\n  advanceBlockAndSetTime,\n  advanceTimeAndBlock,\n  takeSnapshot,\n  revertToSnapshot\n};","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/ganache-time-traveler/utils.js"],"names":["advanceTime","time","Promise","resolve","reject","web3","currentProvider","send","jsonrpc","method","params","id","Date","getTime","err","result","advanceBlock","advanceBlockAndSetTime","advanceTimeAndBlock","block","eth","getBlock","forwardTime","takeSnapshot","snapshotId","revertToSnapshot","module","exports"],"mappings":"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","sourcesContent":["/* global web3,  */ // ignore those keywords when linting\n/*\n* Use of code from https://medium.com/edgefund/time-travelling-truffle-tests-f581c1964687\n* Utility functions to advance blocktime and mine blocks artificially for EVM\n*/\nadvanceTime = (time) => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_increaseTime',\n      params: [time],\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) { return reject(err) }\n      return resolve(result)\n    })\n  })\n}\n\nadvanceBlock = () => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_mine',\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) { return reject(err) }\n      return resolve(result)\n    })\n  })\n}\n\nadvanceBlockAndSetTime = (time) => {\n    return new Promise((resolve, reject) => {\n        web3.currentProvider.send({\n            jsonrpc: '2.0',\n            method: 'evm_mine',\n            params: [time],\n            id: new Date().getTime()\n        }, (err, result) => {\n            if (err) { return reject(err) }\n            return resolve(result)\n        })\n    })\n}\n\nadvanceTimeAndBlock = async (time) => {\n    //capture current time\n    let block = await web3.eth.getBlock('latest')\n    let forwardTime = block['timestamp'] + time\n\n    return new Promise((resolve, reject) => {\n      web3.currentProvider.send({\n        jsonrpc: '2.0',\n        method: 'evm_mine',\n        params: [forwardTime],\n        id: new Date().getTime()\n    }, (err, result) => {\n        if (err) { return reject(err) }\n        return resolve(result)\n    })\n  })\n}\n\ntakeSnapshot = () => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_snapshot',\n      id: new Date().getTime()\n    }, (err, snapshotId) => {\n      if (err) { return reject(err) }\n      return resolve(snapshotId)\n    })\n  })\n}\n\nrevertToSnapshot = (id) => {\n  return new Promise((resolve, reject) => {\n    web3.currentProvider.send({\n      jsonrpc: '2.0',\n      method: 'evm_revert',\n      params: [id],\n      id: new Date().getTime()\n    }, (err, result) => {\n      if (err) { return reject(err) }\n      return resolve(result)\n    })\n  })\n}\n\nmodule.exports = {\n  advanceTime,\n  advanceBlock,\n  advanceBlockAndSetTime,\n  advanceTimeAndBlock,\n  takeSnapshot,\n  revertToSnapshot\n}\n"]},"metadata":{},"sourceType":"script"}