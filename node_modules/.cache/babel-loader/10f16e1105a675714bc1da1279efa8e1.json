{"ast":null,"code":"const TEMPLATE = `\n  <div class='bitski-dialog'>\n      <button class='bitski-close-button'>Close</button>\n      <div class='bitski-dialog-body'></div>\n  </div>\n`;\n/**\n * Basic modal dialog\n */\n\nexport class Dialog {\n  /**\n   * Creates and displays a new dialog\n   * @param content The content (HTMLElement, selector, or text) to embed in the dialog\n   * @param dynamicContent Set to true to show loading state\n   */\n  constructor(content, dynamicContent = false) {\n    // check for an element passed as content or a selector corresponding to an element\n    this.content = this.parseContent(content); // Find or create dialog container\n\n    this.container = this.createContainer(); // Inject dialog content\n\n    this.injectTemplate(this.container, this.content); // Show a spinner if content is dynamic\n\n    if (dynamicContent) {\n      this.setLoading(true);\n    } // Add close handlers\n\n\n    this.addCloseHandlers(); // A short delay is required before triggering animations\n\n    setTimeout(() => {\n      this.show();\n    }, 10);\n  }\n  /**\n   * Show the dialog\n   */\n\n\n  show() {\n    this.container.classList.add('bitski-visible', 'bitski-loaded');\n  }\n  /**\n   * Hides the dialog, but does not remove\n   */\n\n\n  hide() {\n    this.container.classList.remove('bitski-visible', 'bitski-loaded');\n  }\n  /**\n   * Dismisses the dialog without triggering the close handler.\n   */\n\n\n  dismiss() {\n    // Allow 500ms for the animations to finish before removing elements from DOM\n    setTimeout(() => {\n      this.container.remove();\n    }, 500);\n    this.hide();\n  }\n  /**\n   * Cancels the dialog by dismissing and triggering the close handler.\n   */\n\n\n  close() {\n    this.dismiss();\n\n    if (this.onClose) {\n      this.onClose();\n    }\n  }\n  /**\n   * Show or hide the loading indicator\n   * @param loading Whether or not to display the spinner\n   */\n\n\n  setLoading(loading) {\n    const body = document.querySelector('.bitski-dialog-body');\n\n    if (body) {\n      if (loading) {\n        body.classList.add('bitski-loading');\n      } else {\n        body.classList.remove('bitski-loading');\n      }\n    }\n  }\n  /**\n   * Determines what content to embed\n   * @param content Content to parse\n   */\n\n\n  parseContent(content) {\n    // check for an element passed as content\n    if (content instanceof HTMLElement) {\n      return content;\n    } // determine if content is a selector\n\n\n    if (document.querySelector(content)) {\n      return document.querySelector(content);\n    } // otherwise content is text to be appended to the dialog body\n\n\n    const div = document.createElement('div');\n    div.innerText = content;\n    return div;\n  }\n  /**\n   * Creates and injects the container element at the end of the body,\n   * responsible for housing all the dialog-related content.\n   */\n\n\n  createContainer() {\n    const existingContainer = document.querySelector('#bitski-dialog-container');\n\n    if (existingContainer) {\n      return existingContainer;\n    }\n\n    const container = document.createElement('div');\n    container.id = 'bitski-dialog-container';\n    document.body.appendChild(container);\n    return container;\n  }\n  /**\n   * Injects the provided content into the template provided\n   * @param container The container element\n   * @param content The content to inject in the template\n   */\n\n\n  injectTemplate(container, content) {\n    container.innerHTML = TEMPLATE;\n    const body = container.querySelector('.bitski-dialog-body');\n\n    if (body) {\n      body.appendChild(content);\n    }\n  }\n  /**\n   * Adds event listeners for events that should trigger closing the dialog\n   */\n\n\n  addCloseHandlers() {\n    // Close on click outside of the dialog\n    this.container.addEventListener('click', event => {\n      if (event.target === this.container) {\n        this.close();\n      }\n    }); // Close on escape press\n\n    document.addEventListener('keyup', e => {\n      if (e.key === 'Escape') {\n        this.close();\n      }\n    }); // Close on close button click\n\n    const closeButton = this.container.querySelector('.bitski-close-button');\n\n    if (closeButton) {\n      closeButton.addEventListener('click', this.close.bind(this));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/components/dialog.js"],"names":["TEMPLATE","Dialog","constructor","content","dynamicContent","parseContent","container","createContainer","injectTemplate","setLoading","addCloseHandlers","setTimeout","show","classList","add","hide","remove","dismiss","close","onClose","loading","body","document","querySelector","HTMLElement","div","createElement","innerText","existingContainer","id","appendChild","innerHTML","addEventListener","event","target","e","key","closeButton","bind"],"mappings":"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","sourcesContent":["const TEMPLATE = `\n  <div class='bitski-dialog'>\n      <button class='bitski-close-button'>Close</button>\n      <div class='bitski-dialog-body'></div>\n  </div>\n`;\n/**\n * Basic modal dialog\n */\nexport class Dialog {\n    /**\n     * Creates and displays a new dialog\n     * @param content The content (HTMLElement, selector, or text) to embed in the dialog\n     * @param dynamicContent Set to true to show loading state\n     */\n    constructor(content, dynamicContent = false) {\n        // check for an element passed as content or a selector corresponding to an element\n        this.content = this.parseContent(content);\n        // Find or create dialog container\n        this.container = this.createContainer();\n        // Inject dialog content\n        this.injectTemplate(this.container, this.content);\n        // Show a spinner if content is dynamic\n        if (dynamicContent) {\n            this.setLoading(true);\n        }\n        // Add close handlers\n        this.addCloseHandlers();\n        // A short delay is required before triggering animations\n        setTimeout(() => { this.show(); }, 10);\n    }\n    /**\n     * Show the dialog\n     */\n    show() {\n        this.container.classList.add('bitski-visible', 'bitski-loaded');\n    }\n    /**\n     * Hides the dialog, but does not remove\n     */\n    hide() {\n        this.container.classList.remove('bitski-visible', 'bitski-loaded');\n    }\n    /**\n     * Dismisses the dialog without triggering the close handler.\n     */\n    dismiss() {\n        // Allow 500ms for the animations to finish before removing elements from DOM\n        setTimeout(() => { this.container.remove(); }, 500);\n        this.hide();\n    }\n    /**\n     * Cancels the dialog by dismissing and triggering the close handler.\n     */\n    close() {\n        this.dismiss();\n        if (this.onClose) {\n            this.onClose();\n        }\n    }\n    /**\n     * Show or hide the loading indicator\n     * @param loading Whether or not to display the spinner\n     */\n    setLoading(loading) {\n        const body = document.querySelector('.bitski-dialog-body');\n        if (body) {\n            if (loading) {\n                body.classList.add('bitski-loading');\n            }\n            else {\n                body.classList.remove('bitski-loading');\n            }\n        }\n    }\n    /**\n     * Determines what content to embed\n     * @param content Content to parse\n     */\n    parseContent(content) {\n        // check for an element passed as content\n        if (content instanceof HTMLElement) {\n            return content;\n        }\n        // determine if content is a selector\n        if (document.querySelector(content)) {\n            return document.querySelector(content);\n        }\n        // otherwise content is text to be appended to the dialog body\n        const div = document.createElement('div');\n        div.innerText = content;\n        return div;\n    }\n    /**\n     * Creates and injects the container element at the end of the body,\n     * responsible for housing all the dialog-related content.\n     */\n    createContainer() {\n        const existingContainer = document.querySelector('#bitski-dialog-container');\n        if (existingContainer) {\n            return existingContainer;\n        }\n        const container = document.createElement('div');\n        container.id = 'bitski-dialog-container';\n        document.body.appendChild(container);\n        return container;\n    }\n    /**\n     * Injects the provided content into the template provided\n     * @param container The container element\n     * @param content The content to inject in the template\n     */\n    injectTemplate(container, content) {\n        container.innerHTML = TEMPLATE;\n        const body = container.querySelector('.bitski-dialog-body');\n        if (body) {\n            body.appendChild(content);\n        }\n    }\n    /**\n     * Adds event listeners for events that should trigger closing the dialog\n     */\n    addCloseHandlers() {\n        // Close on click outside of the dialog\n        this.container.addEventListener('click', (event) => {\n            if (event.target === this.container) {\n                this.close();\n            }\n        });\n        // Close on escape press\n        document.addEventListener('keyup', (e) => {\n            if (e.key === 'Escape') {\n                this.close();\n            }\n        });\n        // Close on close button click\n        const closeButton = this.container.querySelector('.bitski-close-button');\n        if (closeButton) {\n            closeButton.addEventListener('click', this.close.bind(this));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}