{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar ethjs_util_1 = __importDefault(require(\"ethjs-util\")); // Methods from ethereumjs-util\n\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports\n * `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\n\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (ethjs_util_1.default.isHexString(v)) {\n        v = Buffer.from(ethjs_util_1.default.padToEven(ethjs_util_1.default.stripHexPrefix(v)), 'hex');\n      } else {\n        throw new TypeError( // tslint:disable-next-line: max-line-length\n        \"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n      }\n    } else if (typeof v === 'number') {\n      v = ethjs_util_1.default.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (bn_js_1.default.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new TypeError(\"invalid type: \" + v);\n    }\n  }\n\n  return v;\n}\n\nexports.toBuffer = toBuffer;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\nfunction addHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return ethjs_util_1.default.isHexPrefixed(str) ? str : '0x' + str;\n}\n\nexports.addHexPrefix = addHexPrefix;\n\nfunction stripHexPrefix(str) {\n  return ethjs_util_1.default.stripHexPrefix(str);\n}\n\nexports.stripHexPrefix = stripHexPrefix;\n\nfunction intToHex(n) {\n  return ethjs_util_1.default.intToHex(n);\n}\n\nexports.intToHex = intToHex;\n\nfunction intToBuffer(n) {\n  return ethjs_util_1.default.intToBuffer(n);\n}\n\nexports.intToBuffer = intToBuffer;\n/**\n * Converts a `Buffer` into a hex `String`.\n * @param buf `Buffer` object to convert\n */\n\nfunction bufferToHex(buf) {\n  buf = toBuffer(buf);\n  return '0x' + buf.toString('hex');\n}\n\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\nfunction bufferToInt(buf) {\n  return new bn_js_1.default(toBuffer(buf)).toNumber();\n}\n\nexports.bufferToInt = bufferToInt;\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\nfunction unpad(a) {\n  a = ethjs_util_1.default.stripHexPrefix(a);\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n}\n\nexports.unpad = unpad;","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/@bitski/provider-engine/dist/util/eth-util.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","bn_js_1","require","ethjs_util_1","toBuffer","v","Buffer","isBuffer","Array","isArray","from","default","isHexString","padToEven","stripHexPrefix","TypeError","intToBuffer","undefined","allocUnsafe","isBN","toArrayLike","toArray","addHexPrefix","str","isHexPrefixed","intToHex","n","bufferToHex","buf","toString","bufferToInt","toNumber","unpad","a","first","length","slice"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar ethjs_util_1 = __importDefault(require(\"ethjs-util\"));\n// Methods from ethereumjs-util\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports\n * `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\nfunction toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (Array.isArray(v)) {\n            v = Buffer.from(v);\n        }\n        else if (typeof v === 'string') {\n            if (ethjs_util_1.default.isHexString(v)) {\n                v = Buffer.from(ethjs_util_1.default.padToEven(ethjs_util_1.default.stripHexPrefix(v)), 'hex');\n            }\n            else {\n                throw new TypeError(\n                // tslint:disable-next-line: max-line-length\n                \"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n            }\n        }\n        else if (typeof v === 'number') {\n            v = ethjs_util_1.default.intToBuffer(v);\n        }\n        else if (v === null || v === undefined) {\n            v = Buffer.allocUnsafe(0);\n        }\n        else if (bn_js_1.default.isBN(v)) {\n            v = v.toArrayLike(Buffer);\n        }\n        else if (v.toArray) {\n            // converts a BN to a Buffer\n            v = Buffer.from(v.toArray());\n        }\n        else {\n            throw new TypeError(\"invalid type: \" + v);\n        }\n    }\n    return v;\n}\nexports.toBuffer = toBuffer;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nfunction addHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjs_util_1.default.isHexPrefixed(str) ? str : '0x' + str;\n}\nexports.addHexPrefix = addHexPrefix;\nfunction stripHexPrefix(str) {\n    return ethjs_util_1.default.stripHexPrefix(str);\n}\nexports.stripHexPrefix = stripHexPrefix;\nfunction intToHex(n) {\n    return ethjs_util_1.default.intToHex(n);\n}\nexports.intToHex = intToHex;\nfunction intToBuffer(n) {\n    return ethjs_util_1.default.intToBuffer(n);\n}\nexports.intToBuffer = intToBuffer;\n/**\n * Converts a `Buffer` into a hex `String`.\n * @param buf `Buffer` object to convert\n */\nfunction bufferToHex(buf) {\n    buf = toBuffer(buf);\n    return '0x' + buf.toString('hex');\n}\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nfunction bufferToInt(buf) {\n    return new bn_js_1.default(toBuffer(buf)).toNumber();\n}\nexports.bufferToInt = bufferToInt;\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nfunction unpad(a) {\n    a = ethjs_util_1.default.stripHexPrefix(a);\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n}\nexports.unpad = unpad;\n"]},"metadata":{},"sourceType":"script"}