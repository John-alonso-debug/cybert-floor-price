{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.profile = exports.log = void 0;\n\nvar flags_1 = require(\"./flags\");\n\nfunction log(message) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  if (flags_1.IS_LOG) {\n    var length_1 = args ? args.length : 0;\n\n    if (length_1 > 0) {\n      console.log.apply(console, __spreadArrays([message], args));\n    } else {\n      console.log(message);\n    }\n  }\n}\n\nexports.log = log;\n; // check to see if native support for profiling is available.\n\nvar NATIVE_PROFILE_SUPPORT = typeof window !== 'undefined' && !!window.performance && !!console.profile;\n/**\n * A decorator that can profile a function.\n */\n\nfunction profile(target, propertyKey, descriptor) {\n  if (flags_1.IS_PROFILE) {\n    return performProfile(target, propertyKey, descriptor);\n  } else {\n    // return as-is\n    return descriptor;\n  }\n}\n\nexports.profile = profile;\n\nfunction performProfile(target, propertyKey, descriptor) {\n  var originalCallable = descriptor.value; // name must exist\n\n  var name = originalCallable.name;\n\n  if (!name) {\n    name = 'anonymous function';\n  }\n\n  if (NATIVE_PROFILE_SUPPORT) {\n    descriptor.value = function (args) {\n      console.profile(name);\n      var startTime = window.performance.now();\n      var result = originalCallable.call.apply(originalCallable, __spreadArrays([this || window], args));\n      var duration = window.performance.now() - startTime;\n      console.log(name + \" took \" + duration + \" ms\");\n      console.profileEnd();\n      return result;\n    };\n  } else {\n    descriptor.value = function (args) {\n      log(\"Profile start \" + name);\n      var start = Date.now();\n      var result = originalCallable.call.apply(originalCallable, __spreadArrays([this || window], args));\n      var duration = Date.now() - start;\n      log(\"Profile end \" + name + \" took \" + duration + \" ms.\");\n      return result;\n    };\n  }\n\n  return descriptor;\n}","map":{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IS_LOG, IS_PROFILE} from './flags';\n\nexport function log(message: string, ...args: any[]) {\n  if (IS_LOG) {\n    let length = args ? args.length : 0;\n    if (length > 0) {\n      console.log(message, ...args);\n    } else {\n      console.log(message);\n    }\n  }\n};\n\n// check to see if native support for profiling is available.\nconst NATIVE_PROFILE_SUPPORT =\n    typeof window !== 'undefined' && !!window.performance && !!console.profile;\n\n/**\n * A decorator that can profile a function.\n */\nexport function profile(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  if (IS_PROFILE) {\n    return performProfile(target, propertyKey, descriptor);\n  } else {\n    // return as-is\n    return descriptor;\n  }\n}\n\nfunction performProfile(\n    target: any, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n  let originalCallable = descriptor.value;\n  // name must exist\n  let name = originalCallable.name;\n  if (!name) {\n    name = 'anonymous function';\n  }\n  if (NATIVE_PROFILE_SUPPORT) {\n    descriptor.value = function(args: any[]) {\n      console.profile(name);\n      let startTime = window.performance.now();\n      let result = originalCallable.call(this || window, ...args);\n      let duration = window.performance.now() - startTime;\n      console.log(`${name} took ${duration} ms`);\n      console.profileEnd();\n      return result;\n    };\n  } else {\n    descriptor.value = function(args: any[]) {\n      log(`Profile start ${name}`);\n      let start = Date.now();\n      let result = originalCallable.call(this || window, ...args);\n      let duration = Date.now() - start;\n      log(`Profile end ${name} took ${duration} ms.`);\n      return result;\n    };\n  }\n  return descriptor;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}