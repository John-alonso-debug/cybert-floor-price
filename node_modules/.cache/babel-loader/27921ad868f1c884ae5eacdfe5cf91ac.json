{"ast":null,"code":"import { BlockCacheSubprovider, default as Web3ProviderEngine, DefaultFixtureSubprovider, InflightCacheSubprovider, SanitizerSubprovider, SubscriptionSubprovider } from '@bitski/provider-engine';\nimport { ProviderError } from './errors/provider-error';\nimport { NonceTrackerSubprovider } from './subproviders/nonce-tracker';\nimport { TransactionValidatorSubprovider } from './subproviders/transaction-validator';\nimport { TypedDataSanitizerSubprovider } from './subproviders/typed-data';\nexport class BitskiEngine extends Web3ProviderEngine {\n  constructor(options) {\n    super(options);\n    options = options || {}; // Handles static responses\n\n    this.addProvider(new DefaultFixtureSubprovider()); // Monitors requests to eth_getTransactionCount and eth_sendTransaction to track\n    // pending transactions\n\n    this.addProvider(new NonceTrackerSubprovider()); // Sanitizes transaction params, removing anything invalid\n\n    this.addProvider(new SanitizerSubprovider());\n    const enableValidator = !(options && options.disableValidation === true);\n\n    if (enableValidator) {\n      // Ensures that transactions are well formed (nonce, gas, gasPrice, from) before they are sent to Bitski\n      this.addProvider(new TransactionValidatorSubprovider(options.minGasPrice));\n      this.addProvider(new TypedDataSanitizerSubprovider());\n    }\n\n    const enableCache = !(options && options.disableCaching === true);\n\n    if (enableCache) {\n      // Block Cache - caches certain requests by their block number\n      this.addProvider(new BlockCacheSubprovider());\n    } // Handles subscriptions and filters\n\n\n    const filterAndSubsSubprovider = new SubscriptionSubprovider(); // Watch for updates from subscriptions\n\n    filterAndSubsSubprovider.on('data', (_, notification) => {\n      this.onMessage(notification);\n    });\n    this.addProvider(filterAndSubsSubprovider);\n\n    if (enableCache) {\n      // Debounces duplicate requests that occur at the same time\n      this.addProvider(new InflightCacheSubprovider());\n    }\n  }\n\n  supportsSubscriptions() {\n    return this._pollForBlocks;\n  }\n\n  subscribe(subscribeMethod = 'eth_subscribe', subscriptionMethod, parameters) {\n    if (!this._pollForBlocks) {\n      return Promise.reject(ProviderError.SubscriptionsUnavailable());\n    }\n\n    parameters.unshift(subscriptionMethod);\n    return this.send(subscribeMethod, parameters);\n  }\n\n  unsubscribe(subscriptionId, unsubscribeMethod = 'eth_unsubscribe') {\n    if (!this._pollForBlocks) {\n      return Promise.reject(ProviderError.SubscriptionsUnavailable());\n    }\n\n    return this.send(unsubscribeMethod, [subscriptionId]).then(response => {\n      if (response) {\n        this.removeAllListeners(subscriptionId);\n      }\n\n      return response;\n    });\n  }\n\n  onMessage(notification) {\n    // Re-emit (previous behavior ~ web3 1.0.0-beta.37)\n    this.emit('data', null, notification);\n\n    if (notification && notification.params && notification.params.subscription) {\n      // Current web3 behavior - emit subscription id\n      this.emit(notification.params.subscription, notification.params);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski-provider/dist/bitski-engine.js"],"names":["BlockCacheSubprovider","default","Web3ProviderEngine","DefaultFixtureSubprovider","InflightCacheSubprovider","SanitizerSubprovider","SubscriptionSubprovider","ProviderError","NonceTrackerSubprovider","TransactionValidatorSubprovider","TypedDataSanitizerSubprovider","BitskiEngine","constructor","options","addProvider","enableValidator","disableValidation","minGasPrice","enableCache","disableCaching","filterAndSubsSubprovider","on","_","notification","onMessage","supportsSubscriptions","_pollForBlocks","subscribe","subscribeMethod","subscriptionMethod","parameters","Promise","reject","SubscriptionsUnavailable","unshift","send","unsubscribe","subscriptionId","unsubscribeMethod","then","response","removeAllListeners","emit","params","subscription"],"mappings":"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","sourcesContent":["import { BlockCacheSubprovider, default as Web3ProviderEngine, DefaultFixtureSubprovider, InflightCacheSubprovider, SanitizerSubprovider, SubscriptionSubprovider, } from '@bitski/provider-engine';\nimport { ProviderError } from './errors/provider-error';\nimport { NonceTrackerSubprovider } from './subproviders/nonce-tracker';\nimport { TransactionValidatorSubprovider } from './subproviders/transaction-validator';\nimport { TypedDataSanitizerSubprovider } from './subproviders/typed-data';\nexport class BitskiEngine extends Web3ProviderEngine {\n    constructor(options) {\n        super(options);\n        options = options || {};\n        // Handles static responses\n        this.addProvider(new DefaultFixtureSubprovider());\n        // Monitors requests to eth_getTransactionCount and eth_sendTransaction to track\n        // pending transactions\n        this.addProvider(new NonceTrackerSubprovider());\n        // Sanitizes transaction params, removing anything invalid\n        this.addProvider(new SanitizerSubprovider());\n        const enableValidator = !(options && options.disableValidation === true);\n        if (enableValidator) {\n            // Ensures that transactions are well formed (nonce, gas, gasPrice, from) before they are sent to Bitski\n            this.addProvider(new TransactionValidatorSubprovider(options.minGasPrice));\n            this.addProvider(new TypedDataSanitizerSubprovider());\n        }\n        const enableCache = !(options && options.disableCaching === true);\n        if (enableCache) {\n            // Block Cache - caches certain requests by their block number\n            this.addProvider(new BlockCacheSubprovider());\n        }\n        // Handles subscriptions and filters\n        const filterAndSubsSubprovider = new SubscriptionSubprovider();\n        // Watch for updates from subscriptions\n        filterAndSubsSubprovider.on('data', (_, notification) => {\n            this.onMessage(notification);\n        });\n        this.addProvider(filterAndSubsSubprovider);\n        if (enableCache) {\n            // Debounces duplicate requests that occur at the same time\n            this.addProvider(new InflightCacheSubprovider());\n        }\n    }\n    supportsSubscriptions() {\n        return this._pollForBlocks;\n    }\n    subscribe(subscribeMethod = 'eth_subscribe', subscriptionMethod, parameters) {\n        if (!this._pollForBlocks) {\n            return Promise.reject(ProviderError.SubscriptionsUnavailable());\n        }\n        parameters.unshift(subscriptionMethod);\n        return this.send(subscribeMethod, parameters);\n    }\n    unsubscribe(subscriptionId, unsubscribeMethod = 'eth_unsubscribe') {\n        if (!this._pollForBlocks) {\n            return Promise.reject(ProviderError.SubscriptionsUnavailable());\n        }\n        return this.send(unsubscribeMethod, [subscriptionId]).then((response) => {\n            if (response) {\n                this.removeAllListeners(subscriptionId);\n            }\n            return response;\n        });\n    }\n    onMessage(notification) {\n        // Re-emit (previous behavior ~ web3 1.0.0-beta.37)\n        this.emit('data', null, notification);\n        if (notification && notification.params && notification.params.subscription) {\n            // Current web3 behavior - emit subscription id\n            this.emit(notification.params.subscription, notification.params);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}