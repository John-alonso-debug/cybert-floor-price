{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport function isNaN(value) {\n  return new BigNumber(`${value}`).isNaN();\n}\nexport function isNumber(value) {\n  const isNaNResult = isNaN(value);\n  return !isNaNResult;\n}\nexport function isInteger(value) {\n  return new BigNumber(`${value}`).isInteger();\n}\nexport function isPositive(value) {\n  return new BigNumber(`${value}`).isPositive();\n}\nexport function isNegative(value) {\n  return new BigNumber(`${value}`).isNegative();\n}\nexport function isZero(value) {\n  return new BigNumber(`${value}`).isZero();\n}\nexport function countDecimalPlaces(value) {\n  return new BigNumber(`${value}`).dp();\n}\nexport function convertNumberToString(value) {\n  return new BigNumber(`${value}`).toString();\n}\nexport function convertStringToNumber(value) {\n  return new BigNumber(`${value}`).toNumber();\n}\nexport function convertHexToString(hex) {\n  return new BigNumber(`${hex}`).toString();\n}\nexport function convertStringToHex(value) {\n  return new BigNumber(`${value}`).toString(16);\n}\nexport function greaterThan(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) === 1;\n}\nexport function greaterThanOrEqual(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) >= 0;\n}\nexport function smallerThan(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) === -1;\n}\nexport function smallerThanOrEqual(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) <= 0;\n}\nexport function multiply(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).times(new BigNumber(`${numberTwo}`)).toString();\n}\nexport function divide(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).dividedBy(new BigNumber(`${numberTwo}`)).toString();\n}\nexport function floorDivide(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).dividedToIntegerBy(new BigNumber(`${numberTwo}`)).toString();\n}\nexport function mod(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).mod(new BigNumber(`${numberTwo}`)).toString();\n}\nexport function add(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).plus(new BigNumber(`${numberTwo}`)).toString();\n}\nexport function subtract(numberOne, numberTwo) {\n  return new BigNumber(`${numberOne}`).minus(new BigNumber(`${numberTwo}`)).toString();\n}\nexport function convertAmountToRawNumber(value, decimals = 18) {\n  return new BigNumber(`${value}`).times(new BigNumber('10').pow(decimals)).toString();\n}\nexport function convertAmountFromRawNumber(value, decimals = 18) {\n  return new BigNumber(`${value}`).dividedBy(new BigNumber('10').pow(decimals)).toString();\n}\nexport function handleSignificantDecimals(value, decimals, buffer) {\n  if (!new BigNumber(`${decimals}`).isInteger() || buffer && !new BigNumber(`${buffer}`).isInteger()) {\n    return null;\n  }\n\n  buffer = buffer ? convertStringToNumber(buffer) : 3;\n  decimals = convertStringToNumber(decimals);\n  const absolute = new BigNumber(`${value}`).abs().toNumber();\n\n  if (smallerThan(absolute, 1)) {\n    decimals = value.slice(2).search(/[^0]/g) + buffer;\n    decimals = decimals < 8 ? decimals : 8;\n  } else {\n    decimals = decimals < buffer ? decimals : buffer;\n  }\n\n  let result = new BigNumber(`${value}`).toFixed(decimals);\n  result = new BigNumber(`${result}`).toString();\n  return new BigNumber(`${result}`).dp() <= 2 ? new BigNumber(`${result}`).toFormat(2) : new BigNumber(`${result}`).toFormat();\n}\nexport function formatFixedDecimals(value, decimals) {\n  const _value = convertNumberToString(value);\n\n  const _decimals = convertStringToNumber(decimals);\n\n  const result = new BigNumber(new BigNumber(_value).toFixed(_decimals)).toString();\n  return result;\n}\nexport function formatInputDecimals(inputOne, inputTwo) {\n  const _nativeAmountDecimalPlaces = countDecimalPlaces(inputTwo);\n\n  const decimals = _nativeAmountDecimalPlaces > 8 ? _nativeAmountDecimalPlaces : 8;\n  const result = new BigNumber(formatFixedDecimals(inputOne, decimals)).toFormat().replace(/,/g, '');\n  return result;\n}","map":{"version":3,"sources":["/Users/helen/cybert/floor-price-front/frontend/src/helpers/bignumber.ts"],"names":["BigNumber","isNaN","value","isNumber","isNaNResult","isInteger","isPositive","isNegative","isZero","countDecimalPlaces","dp","convertNumberToString","toString","convertStringToNumber","toNumber","convertHexToString","hex","convertStringToHex","greaterThan","numberOne","numberTwo","comparedTo","greaterThanOrEqual","smallerThan","smallerThanOrEqual","multiply","times","divide","dividedBy","floorDivide","dividedToIntegerBy","mod","add","plus","subtract","minus","convertAmountToRawNumber","decimals","pow","convertAmountFromRawNumber","handleSignificantDecimals","buffer","absolute","abs","slice","search","result","toFixed","toFormat","formatFixedDecimals","_value","_decimals","formatInputDecimals","inputOne","inputTwo","_nativeAmountDecimalPlaces","replace"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAgD;AACrD,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BD,KAA1B,EAAP;AACD;AAED,OAAO,SAASE,QAAT,CAAkBD,KAAlB,EAAmD;AACxD,QAAME,WAAW,GAAGH,KAAK,CAACC,KAAD,CAAzB;AACA,SAAO,CAACE,WAAR;AACD;AAED,OAAO,SAASC,SAAT,CAAmBH,KAAnB,EAAoD;AACzD,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BG,SAA1B,EAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBJ,KAApB,EAAqD;AAC1D,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BI,UAA1B,EAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBL,KAApB,EAAqD;AAC1D,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BK,UAA1B,EAAP;AACD;AAED,OAAO,SAASC,MAAT,CAAgBN,KAAhB,EAAiD;AACtD,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BM,MAA1B,EAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BP,KAA5B,EAA4D;AACjE,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BQ,EAA1B,EAAP;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BT,KAA/B,EAA+D;AACpE,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BU,QAA1B,EAAP;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BX,KAA/B,EAA+D;AACpE,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BY,QAA1B,EAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BC,GAA5B,EAAiD;AACtD,SAAO,IAAIhB,SAAJ,CAAe,GAAEgB,GAAI,EAArB,EAAwBJ,QAAxB,EAAP;AACD;AAED,OAAO,SAASK,kBAAT,CAA4Bf,KAA5B,EAA4D;AACjE,SAAO,IAAIF,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0BU,QAA1B,CAAmC,EAAnC,CAAP;AACD;AAED,OAAO,SAASM,WAAT,CACLC,SADK,EAELC,SAFK,EAGI;AACT,SACE,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EAA8BE,UAA9B,CAAyC,IAAIrB,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CAAzC,MACA,CAFF;AAID;AAED,OAAO,SAASE,kBAAT,CACLH,SADK,EAELC,SAFK,EAGI;AACT,SACE,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EAA8BE,UAA9B,CAAyC,IAAIrB,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CAAzC,KAA2E,CAD7E;AAGD;AAED,OAAO,SAASG,WAAT,CACLJ,SADK,EAELC,SAFK,EAGI;AACT,SACE,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EAA8BE,UAA9B,CAAyC,IAAIrB,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CAAzC,MACA,CAAC,CAFH;AAID;AAED,OAAO,SAASI,kBAAT,CACLL,SADK,EAELC,SAFK,EAGI;AACT,SACE,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EAA8BE,UAA9B,CAAyC,IAAIrB,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CAAzC,KAA2E,CAD7E;AAGD;AAED,OAAO,SAASK,QAAT,CACLN,SADK,EAELC,SAFK,EAGG;AACR,SAAO,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EACJO,KADI,CACE,IAAI1B,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CADF,EAEJR,QAFI,EAAP;AAGD;AAED,OAAO,SAASe,MAAT,CACLR,SADK,EAELC,SAFK,EAGG;AACR,SAAO,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EACJS,SADI,CACM,IAAI5B,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CADN,EAEJR,QAFI,EAAP;AAGD;AAED,OAAO,SAASiB,WAAT,CACLV,SADK,EAELC,SAFK,EAGG;AACR,SAAO,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EACJW,kBADI,CACe,IAAI9B,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CADf,EAEJR,QAFI,EAAP;AAGD;AAED,OAAO,SAASmB,GAAT,CACLZ,SADK,EAELC,SAFK,EAGG;AACR,SAAO,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EACJY,GADI,CACA,IAAI/B,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CADA,EAEJR,QAFI,EAAP;AAGD;AAED,OAAO,SAASoB,GAAT,CACLb,SADK,EAELC,SAFK,EAGG;AACR,SAAO,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EACJc,IADI,CACC,IAAIjC,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CADD,EAEJR,QAFI,EAAP;AAGD;AAED,OAAO,SAASsB,QAAT,CACLf,SADK,EAELC,SAFK,EAGG;AACR,SAAO,IAAIpB,SAAJ,CAAe,GAAEmB,SAAU,EAA3B,EACJgB,KADI,CACE,IAAInC,SAAJ,CAAe,GAAEoB,SAAU,EAA3B,CADF,EAEJR,QAFI,EAAP;AAGD;AAED,OAAO,SAASwB,wBAAT,CACLlC,KADK,EAELmC,QAAgB,GAAG,EAFd,EAGG;AACR,SAAO,IAAIrC,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EACJwB,KADI,CACE,IAAI1B,SAAJ,CAAc,IAAd,EAAoBsC,GAApB,CAAwBD,QAAxB,CADF,EAEJzB,QAFI,EAAP;AAGD;AAED,OAAO,SAAS2B,0BAAT,CACLrC,KADK,EAELmC,QAAgB,GAAG,EAFd,EAGG;AACR,SAAO,IAAIrC,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EACJ0B,SADI,CACM,IAAI5B,SAAJ,CAAc,IAAd,EAAoBsC,GAApB,CAAwBD,QAAxB,CADN,EAEJzB,QAFI,EAAP;AAGD;AAED,OAAO,SAAS4B,yBAAT,CACLtC,KADK,EAELmC,QAFK,EAGLI,MAHK,EAIU;AACf,MACE,CAAC,IAAIzC,SAAJ,CAAe,GAAEqC,QAAS,EAA1B,EAA6BhC,SAA7B,EAAD,IACCoC,MAAM,IAAI,CAAC,IAAIzC,SAAJ,CAAe,GAAEyC,MAAO,EAAxB,EAA2BpC,SAA3B,EAFd,EAGE;AACA,WAAO,IAAP;AACD;;AACDoC,EAAAA,MAAM,GAAGA,MAAM,GAAG5B,qBAAqB,CAAC4B,MAAD,CAAxB,GAAmC,CAAlD;AACAJ,EAAAA,QAAQ,GAAGxB,qBAAqB,CAACwB,QAAD,CAAhC;AACA,QAAMK,QAAQ,GAAG,IAAI1C,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0ByC,GAA1B,GAAgC7B,QAAhC,EAAjB;;AACA,MAAIS,WAAW,CAACmB,QAAD,EAAW,CAAX,CAAf,EAA8B;AAC5BL,IAAAA,QAAQ,GAAGnC,KAAK,CAAC0C,KAAN,CAAY,CAAZ,EAAeC,MAAf,CAAsB,OAAtB,IAAiCJ,MAA5C;AACAJ,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAX,GAAeA,QAAf,GAA0B,CAArC;AACD,GAHD,MAGO;AACLA,IAAAA,QAAQ,GAAGA,QAAQ,GAAGI,MAAX,GAAoBJ,QAApB,GAA+BI,MAA1C;AACD;;AACD,MAAIK,MAAM,GAAG,IAAI9C,SAAJ,CAAe,GAAEE,KAAM,EAAvB,EAA0B6C,OAA1B,CAAkCV,QAAlC,CAAb;AACAS,EAAAA,MAAM,GAAG,IAAI9C,SAAJ,CAAe,GAAE8C,MAAO,EAAxB,EAA2BlC,QAA3B,EAAT;AACA,SAAO,IAAIZ,SAAJ,CAAe,GAAE8C,MAAO,EAAxB,EAA2BpC,EAA3B,MAAmC,CAAnC,GACH,IAAIV,SAAJ,CAAe,GAAE8C,MAAO,EAAxB,EAA2BE,QAA3B,CAAoC,CAApC,CADG,GAEH,IAAIhD,SAAJ,CAAe,GAAE8C,MAAO,EAAxB,EAA2BE,QAA3B,EAFJ;AAGD;AAED,OAAO,SAASC,mBAAT,CAA6B/C,KAA7B,EAA4CmC,QAA5C,EAAsE;AAC3E,QAAMa,MAAM,GAAGvC,qBAAqB,CAACT,KAAD,CAApC;;AACA,QAAMiD,SAAS,GAAGtC,qBAAqB,CAACwB,QAAD,CAAvC;;AACA,QAAMS,MAAM,GAAG,IAAI9C,SAAJ,CACb,IAAIA,SAAJ,CAAckD,MAAd,EAAsBH,OAAtB,CAA8BI,SAA9B,CADa,EAEbvC,QAFa,EAAf;AAGA,SAAOkC,MAAP;AACD;AAED,OAAO,SAASM,mBAAT,CACLC,QADK,EAELC,QAFK,EAGG;AACR,QAAMC,0BAA0B,GAAG9C,kBAAkB,CAAC6C,QAAD,CAArD;;AACA,QAAMjB,QAAQ,GACZkB,0BAA0B,GAAG,CAA7B,GAAiCA,0BAAjC,GAA8D,CADhE;AAEA,QAAMT,MAAM,GAAG,IAAI9C,SAAJ,CAAciD,mBAAmB,CAACI,QAAD,EAAWhB,QAAX,CAAjC,EACZW,QADY,GAEZQ,OAFY,CAEJ,IAFI,EAEE,EAFF,CAAf;AAGA,SAAOV,MAAP;AACD","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport function isNaN(value: string | number): boolean {\n  return new BigNumber(`${value}`).isNaN()\n}\n\nexport function isNumber(value: string | number): boolean {\n  const isNaNResult = isNaN(value)\n  return !isNaNResult\n}\n\nexport function isInteger(value: string | number): boolean {\n  return new BigNumber(`${value}`).isInteger()\n}\n\nexport function isPositive(value: string | number): boolean {\n  return new BigNumber(`${value}`).isPositive()\n}\n\nexport function isNegative(value: string | number): boolean {\n  return new BigNumber(`${value}`).isNegative()\n}\n\nexport function isZero(value: string | number): boolean {\n  return new BigNumber(`${value}`).isZero()\n}\n\nexport function countDecimalPlaces(value: string | number): number {\n  return new BigNumber(`${value}`).dp()\n}\n\nexport function convertNumberToString(value: string | number): string {\n  return new BigNumber(`${value}`).toString()\n}\n\nexport function convertStringToNumber(value: string | number): number {\n  return new BigNumber(`${value}`).toNumber()\n}\n\nexport function convertHexToString(hex: string): string {\n  return new BigNumber(`${hex}`).toString()\n}\n\nexport function convertStringToHex(value: string | number): string {\n  return new BigNumber(`${value}`).toString(16)\n}\n\nexport function greaterThan(\n  numberOne: number | string,\n  numberTwo: number | string\n): boolean {\n  return (\n    new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) ===\n    1\n  )\n}\n\nexport function greaterThanOrEqual(\n  numberOne: number,\n  numberTwo: number\n): boolean {\n  return (\n    new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) >= 0\n  )\n}\n\nexport function smallerThan(\n  numberOne: number | string,\n  numberTwo: number | string\n): boolean {\n  return (\n    new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) ===\n    -1\n  )\n}\n\nexport function smallerThanOrEqual(\n  numberOne: number,\n  numberTwo: number\n): boolean {\n  return (\n    new BigNumber(`${numberOne}`).comparedTo(new BigNumber(`${numberTwo}`)) <= 0\n  )\n}\n\nexport function multiply(\n  numberOne: number | string,\n  numberTwo: number | string\n): string {\n  return new BigNumber(`${numberOne}`)\n    .times(new BigNumber(`${numberTwo}`))\n    .toString()\n}\n\nexport function divide(\n  numberOne: number | string,\n  numberTwo: number | string\n): string {\n  return new BigNumber(`${numberOne}`)\n    .dividedBy(new BigNumber(`${numberTwo}`))\n    .toString()\n}\n\nexport function floorDivide(\n  numberOne: number | string,\n  numberTwo: number | string\n): string {\n  return new BigNumber(`${numberOne}`)\n    .dividedToIntegerBy(new BigNumber(`${numberTwo}`))\n    .toString()\n}\n\nexport function mod(\n  numberOne: number | string,\n  numberTwo: number | string\n): string {\n  return new BigNumber(`${numberOne}`)\n    .mod(new BigNumber(`${numberTwo}`))\n    .toString()\n}\n\nexport function add(\n  numberOne: number | string,\n  numberTwo: number | string\n): string {\n  return new BigNumber(`${numberOne}`)\n    .plus(new BigNumber(`${numberTwo}`))\n    .toString()\n}\n\nexport function subtract(\n  numberOne: number | string,\n  numberTwo: number | string\n): string {\n  return new BigNumber(`${numberOne}`)\n    .minus(new BigNumber(`${numberTwo}`))\n    .toString()\n}\n\nexport function convertAmountToRawNumber(\n  value: string | number,\n  decimals: number = 18\n): string {\n  return new BigNumber(`${value}`)\n    .times(new BigNumber('10').pow(decimals))\n    .toString()\n}\n\nexport function convertAmountFromRawNumber(\n  value: string | number,\n  decimals: number = 18\n): string {\n  return new BigNumber(`${value}`)\n    .dividedBy(new BigNumber('10').pow(decimals))\n    .toString()\n}\n\nexport function handleSignificantDecimals(\n  value: string,\n  decimals: number,\n  buffer?: number\n): string | null {\n  if (\n    !new BigNumber(`${decimals}`).isInteger() ||\n    (buffer && !new BigNumber(`${buffer}`).isInteger())\n  ) {\n    return null\n  }\n  buffer = buffer ? convertStringToNumber(buffer) : 3\n  decimals = convertStringToNumber(decimals)\n  const absolute = new BigNumber(`${value}`).abs().toNumber()\n  if (smallerThan(absolute, 1)) {\n    decimals = value.slice(2).search(/[^0]/g) + buffer\n    decimals = decimals < 8 ? decimals : 8\n  } else {\n    decimals = decimals < buffer ? decimals : buffer\n  }\n  let result = new BigNumber(`${value}`).toFixed(decimals)\n  result = new BigNumber(`${result}`).toString()\n  return new BigNumber(`${result}`).dp() <= 2\n    ? new BigNumber(`${result}`).toFormat(2)\n    : new BigNumber(`${result}`).toFormat()\n}\n\nexport function formatFixedDecimals(value: string, decimals: number): string {\n  const _value = convertNumberToString(value)\n  const _decimals = convertStringToNumber(decimals)\n  const result = new BigNumber(\n    new BigNumber(_value).toFixed(_decimals)\n  ).toString()\n  return result\n}\n\nexport function formatInputDecimals(\n  inputOne: string,\n  inputTwo: string\n): string {\n  const _nativeAmountDecimalPlaces = countDecimalPlaces(inputTwo)\n  const decimals =\n    _nativeAmountDecimalPlaces > 8 ? _nativeAmountDecimalPlaces : 8\n  const result = new BigNumber(formatFixedDecimals(inputOne, decimals))\n    .toFormat()\n    .replace(/,/g, '')\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}