{"ast":null,"code":"import { ACCESS_TOKEN_KEY, REFRESH_TOKEN_KEY } from '../constants';\nimport { LocalStorageStore } from '../utils/localstorage-store';\nimport { AccessToken } from './access-token';\nexport class TokenStore {\n  constructor(clientId, store) {\n    this.clientId = clientId;\n    this.store = store || new LocalStorageStore();\n    const accessTokenString = this.store.getItem(this.accessTokenKey);\n\n    if (accessTokenString) {\n      let parsedToken;\n\n      try {\n        parsedToken = AccessToken.fromString(accessTokenString);\n      } finally {\n        this.accessToken = parsedToken;\n      }\n    }\n  }\n\n  get currentToken() {\n    if (this.accessToken && !this.accessToken.expired) {\n      return this.accessToken.token;\n    }\n  }\n\n  get refreshToken() {\n    const token = this.store.getItem(this.refreshTokenKey);\n\n    if (token) {\n      return token;\n    }\n  }\n\n  get accessTokenKey() {\n    return `${ACCESS_TOKEN_KEY}.${this.clientId}`;\n  }\n\n  get refreshTokenKey() {\n    return `${REFRESH_TOKEN_KEY}.${this.clientId}`;\n  }\n\n  persistTokenResponse(response) {\n    if (response.refreshToken) {\n      this.store.setItem(this.refreshTokenKey, response.refreshToken);\n    }\n\n    const parsedToken = AccessToken.fromTokenResponse(response);\n    this.store.setItem(this.accessTokenKey, parsedToken.toStorageString());\n    this.accessToken = parsedToken;\n  }\n\n  invalidateCurrentToken() {\n    this.accessToken = undefined;\n    this.store.clearItem(this.accessTokenKey);\n  }\n\n  clear() {\n    this.accessToken = undefined;\n    this.store.clearItem(this.refreshTokenKey);\n    this.store.clearItem(this.accessTokenKey);\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/auth/token-store.js"],"names":["ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","LocalStorageStore","AccessToken","TokenStore","constructor","clientId","store","accessTokenString","getItem","accessTokenKey","parsedToken","fromString","accessToken","currentToken","expired","token","refreshToken","refreshTokenKey","persistTokenResponse","response","setItem","fromTokenResponse","toStorageString","invalidateCurrentToken","undefined","clearItem","clear"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,iBAA3B,QAAoD,cAApD;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACzB,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,KAAL,GAAaA,KAAK,IAAI,IAAIL,iBAAJ,EAAtB;AACA,UAAMM,iBAAiB,GAAG,KAAKD,KAAL,CAAWE,OAAX,CAAmB,KAAKC,cAAxB,CAA1B;;AACA,QAAIF,iBAAJ,EAAuB;AACnB,UAAIG,WAAJ;;AACA,UAAI;AACAA,QAAAA,WAAW,GAAGR,WAAW,CAACS,UAAZ,CAAuBJ,iBAAvB,CAAd;AACH,OAFD,SAGQ;AACJ,aAAKK,WAAL,GAAmBF,WAAnB;AACH;AACJ;AACJ;;AACe,MAAZG,YAAY,GAAG;AACf,QAAI,KAAKD,WAAL,IAAoB,CAAC,KAAKA,WAAL,CAAiBE,OAA1C,EAAmD;AAC/C,aAAO,KAAKF,WAAL,CAAiBG,KAAxB;AACH;AACJ;;AACe,MAAZC,YAAY,GAAG;AACf,UAAMD,KAAK,GAAG,KAAKT,KAAL,CAAWE,OAAX,CAAmB,KAAKS,eAAxB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH;AACJ;;AACiB,MAAdN,cAAc,GAAG;AACjB,WAAQ,GAAEV,gBAAiB,IAAG,KAAKM,QAAS,EAA5C;AACH;;AACkB,MAAfY,eAAe,GAAG;AAClB,WAAQ,GAAEjB,iBAAkB,IAAG,KAAKK,QAAS,EAA7C;AACH;;AACDa,EAAAA,oBAAoB,CAACC,QAAD,EAAW;AAC3B,QAAIA,QAAQ,CAACH,YAAb,EAA2B;AACvB,WAAKV,KAAL,CAAWc,OAAX,CAAmB,KAAKH,eAAxB,EAAyCE,QAAQ,CAACH,YAAlD;AACH;;AACD,UAAMN,WAAW,GAAGR,WAAW,CAACmB,iBAAZ,CAA8BF,QAA9B,CAApB;AACA,SAAKb,KAAL,CAAWc,OAAX,CAAmB,KAAKX,cAAxB,EAAwCC,WAAW,CAACY,eAAZ,EAAxC;AACA,SAAKV,WAAL,GAAmBF,WAAnB;AACH;;AACDa,EAAAA,sBAAsB,GAAG;AACrB,SAAKX,WAAL,GAAmBY,SAAnB;AACA,SAAKlB,KAAL,CAAWmB,SAAX,CAAqB,KAAKhB,cAA1B;AACH;;AACDiB,EAAAA,KAAK,GAAG;AACJ,SAAKd,WAAL,GAAmBY,SAAnB;AACA,SAAKlB,KAAL,CAAWmB,SAAX,CAAqB,KAAKR,eAA1B;AACA,SAAKX,KAAL,CAAWmB,SAAX,CAAqB,KAAKhB,cAA1B;AACH;;AAhDmB","sourcesContent":["import { ACCESS_TOKEN_KEY, REFRESH_TOKEN_KEY } from '../constants';\nimport { LocalStorageStore } from '../utils/localstorage-store';\nimport { AccessToken } from './access-token';\nexport class TokenStore {\n    constructor(clientId, store) {\n        this.clientId = clientId;\n        this.store = store || new LocalStorageStore();\n        const accessTokenString = this.store.getItem(this.accessTokenKey);\n        if (accessTokenString) {\n            let parsedToken;\n            try {\n                parsedToken = AccessToken.fromString(accessTokenString);\n            }\n            finally {\n                this.accessToken = parsedToken;\n            }\n        }\n    }\n    get currentToken() {\n        if (this.accessToken && !this.accessToken.expired) {\n            return this.accessToken.token;\n        }\n    }\n    get refreshToken() {\n        const token = this.store.getItem(this.refreshTokenKey);\n        if (token) {\n            return token;\n        }\n    }\n    get accessTokenKey() {\n        return `${ACCESS_TOKEN_KEY}.${this.clientId}`;\n    }\n    get refreshTokenKey() {\n        return `${REFRESH_TOKEN_KEY}.${this.clientId}`;\n    }\n    persistTokenResponse(response) {\n        if (response.refreshToken) {\n            this.store.setItem(this.refreshTokenKey, response.refreshToken);\n        }\n        const parsedToken = AccessToken.fromTokenResponse(response);\n        this.store.setItem(this.accessTokenKey, parsedToken.toStorageString());\n        this.accessToken = parsedToken;\n    }\n    invalidateCurrentToken() {\n        this.accessToken = undefined;\n        this.store.clearItem(this.accessTokenKey);\n    }\n    clear() {\n        this.accessToken = undefined;\n        this.store.clearItem(this.refreshTokenKey);\n        this.store.clearItem(this.accessTokenKey);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}