{"ast":null,"code":"var _jsxFileName = \"/Users/white/Documents/GitHub/cybert-floor-price/src/App_opensea.tsx\";\n\n/*\n * @Author: your name\n * @Date: 2021-05-22 00:27:06\n * @LastEditTime: 2021-12-13 11:28:44\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /frontend/src/App_sign.tsx\n */\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { OpenSeaPort, Network } from 'opensea-js';\nimport Button from \"./components/Button\";\nimport Column from \"./components/Column\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Loader from \"./components/Loader\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport { getChainData } from \"./helpers/utilities\";\nimport { fonts } from \"./styles\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n  font-family:vt323;\n  font-size:30px;\n`;\n_c = SLayout;\nconst SContent = styled(Wrapper)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n_c2 = SContent;\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n_c3 = SContainer;\nconst SLanding = styled(Column)`\n  height: 600px;\n`; // @ts-ignore\n\n_c4 = SLanding;\nconst SBalances = styled(SLanding)`\n  height: 100%;\n  & h3 {\n    padding-top: 10px;\n  }\n`;\n_c5 = SBalances;\nconst STestButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n_c6 = STestButtonContainer;\nconst STestButton = styled(Button)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  max-width: 175px;\n  margin: 12px;\n  font-family:vt323;\n`;\n_c7 = STestButton;\nconst STestInput = styled.textarea`\n    background-color: #f9f9f9;\n    border: 0;\n    border-radius: 4px;\n    height: 200px;\n    padding: 13px 15px;\n    resize: none;\n    width: 100%;\n`;\n_c8 = STestInput;\nconst INITIAL_STATE = {\n  fetching: false,\n  address: \"\",\n  web3: null,\n  provider: null,\n  connected: false,\n  chainId: 1,\n  networkId: 1,\n  assets: [],\n  assets2: [],\n  showModal: false,\n  pendingRequest: false,\n  result: null,\n  tokenAddress: \"\",\n  tokenIds: \"\",\n  one_day_average_price: 0,\n  average_price: 0,\n  floor_price: 0,\n  total_volume: 0,\n  price: 0\n};\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n  web3.eth.extend({\n    methods: [{\n      name: \"chainId\",\n      call: \"eth_chainId\",\n      outputFormatter: web3.utils.hexToNumber\n    }]\n  });\n  return web3;\n}\n\nclass App extends React.Component {\n  // @ts-ignore\n  constructor(props) {\n    super(props);\n    this.web3Modal = void 0;\n    this.state = void 0;\n\n    this.onConnect = async () => {\n      const provider = await this.web3Modal.connect();\n      await this.subscribeProvider(provider);\n      const web3 = initWeb3(provider);\n      const accounts = await web3.eth.getAccounts();\n      const address = accounts[0];\n      const networkId = await web3.eth.net.getId();\n      const chainId = await web3.eth.chainId();\n      console.log(`chainId is ${chainId}  networkId ${networkId}`);\n      await this.setState({\n        web3,\n        provider,\n        connected: true,\n        address,\n        chainId,\n        networkId\n      });\n    };\n\n    this.subscribeProvider = async provider => {\n      if (!provider.on) {\n        return;\n      }\n\n      provider.on(\"close\", () => this.resetApp());\n      provider.on(\"accountsChanged\", async accounts => {\n        await this.setState({\n          address: accounts[0]\n        });\n      });\n      provider.on(\"chainChanged\", async chainId => {\n        const {\n          web3\n        } = this.state;\n        const networkId = await web3.eth.net.getId();\n        await this.setState({\n          chainId,\n          networkId\n        });\n      });\n      provider.on(\"networkChanged\", async networkId => {\n        const {\n          web3\n        } = this.state;\n        const chainId = await web3.eth.chainId();\n        await this.setState({\n          chainId,\n          networkId\n        });\n      });\n    };\n\n    this.getNetwork = () => getChainData(this.state.chainId).network;\n\n    this.resetApp = async () => {\n      const {\n        web3\n      } = this.state;\n\n      if (web3 && web3.currentProvider && web3.currentProvider.close) {\n        await web3.currentProvider.close();\n      }\n\n      await this.web3Modal.clearCachedProvider();\n      this.setState({ ...INITIAL_STATE\n      });\n    };\n\n    this.settokenAddress = value => {\n      this.setState({\n        tokenAddress: value.target.value\n      });\n    };\n\n    this.settokenIds = value => {\n      this.setState({\n        tokenIds: value.target.value\n      });\n    };\n\n    this.setprice = value => {\n      this.setState({\n        price: value.target.value\n      });\n    };\n\n    this.buy = async () => {\n      // const provider = await this.web3Modal.connect();\n      // const prov = new ethers.providers.Web3Provider(provider);\n      // open modal\n      const tokenIds = this.state.tokenIds;\n\n      if (tokenIds === \"\") {\n        alert('input token ID!');\n        return;\n      }\n\n      const tokenAddress = this.state.tokenAddress;\n\n      if (tokenAddress === \"\") {\n        alert('input token contract address！');\n        return;\n      }\n\n      const price = this.state.price;\n\n      if (price === 0) {\n        alert('input price > 0！');\n        return;\n      }\n\n      const ids = tokenIds.split(',');\n      const seaport = new OpenSeaPort(window.web3.currentProvider, {\n        networkName: Network.Rinkeby // apiKey: YOUR_API_KEY\n\n      }); // Token ID and smart contract address for a non-fungible token:\n      // The offerer's wallet address:\n\n      let web3 = new Web3(Web3.givenProvider);\n      const accountAddress = await web3.eth.getAccounts();\n\n      try {\n        // createBuyOrder  buy one nft\n        ids.forEach(async element => {\n          const offer = await seaport.createBuyOrder({\n            asset: {\n              tokenId: element,\n              tokenAddress\n            },\n            accountAddress: accountAddress[0],\n            // Value of the offer, in units of the payment token (or wrapped ETH if none is specified):\n            startAmount: 0.13\n          });\n          console.log(offer);\n        }); // let assets: { tokenId: string; tokenAddress: string; }[] = []\n        // ids.forEach(element => {\n        //     assets.push({tokenId:element, tokenAddress:tokenAddress})\n        // });\n        // const offer = await seaport.createBundleBuyOrder({\n        //     assets,\n        //     accountAddress: accountAddress[0],\n        //     startAmount: price,\n        //     // Optional expiration time for the order, in Unix time (seconds):\n        //     // expirationTime: Math.round(Date.now() / 1000 + 60 * 60 * 24) // One day from now\n        // })\n        // console.log(offer)\n        // alert('成功')\n      } catch (error) {\n        console.log(error);\n        alert('失败');\n      }\n    };\n\n    this.getData = async () => {\n      const tokenAddress = this.state.tokenAddress;\n\n      if (tokenAddress === \"\") {\n        alert('请输入tokenAddress！'); //0x256d31fb5439119026f1301d40ae748a8838c979\n\n        return;\n      }\n\n      const seaport = new OpenSeaPort(window.web3.currentProvider, {\n        networkName: Network.Rinkeby //todo\n\n      });\n      const asset = await seaport.api.getAsset({\n        tokenAddress: tokenAddress,\n        tokenId: null\n      });\n      const status = asset.collection.stats;\n      console.log(asset.collection.stats);\n      this.setState({\n        average_price: status['average_price'],\n        floor_price: status['floor_price'],\n        total_volume: status['total_volume'],\n        one_day_average_price: status['one_day_average_price']\n      });\n    };\n\n    this.render = () => {\n      const {\n        address,\n        connected,\n        chainId,\n        fetching,\n        average_price,\n        floor_price,\n        total_volume,\n        one_day_average_price\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(SLayout, {\n        children: /*#__PURE__*/_jsxDEV(Column, {\n          maxWidth: 1000,\n          spanHeight: true,\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            connected: connected,\n            address: address,\n            chainId: chainId,\n            killSession: this.resetApp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(SContent, {\n            children: fetching ? /*#__PURE__*/_jsxDEV(Column, {\n              center: true,\n              children: /*#__PURE__*/_jsxDEV(SContainer, {\n                children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 29\n            }, this) : this.state.address ? /*#__PURE__*/_jsxDEV(SBalances, {\n              children: /*#__PURE__*/_jsxDEV(Column, {\n                center: true,\n                children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Project Detail\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 43\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Floor Price\\uFF1A\", floor_price]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Average\\uFF1A\", average_price]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Total Volume\\uFF1A\", total_volume]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Average(Day)\\uFF1A\", one_day_average_price]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(STestButtonContainer, {\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"NFT Contract Address\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 377,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(STestInput, {\n                    style: {\n                      height: '40px'\n                    },\n                    value: this.state.tokenAddress,\n                    onChange: this.settokenAddress\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"TokenID(separate by ,)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(STestInput, {\n                    style: {\n                      height: '40px'\n                    },\n                    value: this.state.tokenIds,\n                    onChange: this.settokenIds\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"Listed Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(STestInput, {\n                    style: {\n                      height: '40px'\n                    },\n                    value: this.state.price,\n                    onChange: this.setprice\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.getData(),\n                    children: \"Query\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 384,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.buy(),\n                    children: \"Buy\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(SLanding, {\n              center: true,\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                children: `Test Web3Modal`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n                onClick: this.onConnect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = { ...INITIAL_STATE\n    };\n    this.web3Modal = new Web3Modal({\n      network: this.getNetwork(),\n      cacheProvider: true\n    });\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"SLayout\");\n$RefreshReg$(_c2, \"SContent\");\n$RefreshReg$(_c3, \"SContainer\");\n$RefreshReg$(_c4, \"SLanding\");\n$RefreshReg$(_c5, \"SBalances\");\n$RefreshReg$(_c6, \"STestButtonContainer\");\n$RefreshReg$(_c7, \"STestButton\");\n$RefreshReg$(_c8, \"STestInput\");","map":{"version":3,"sources":["/Users/white/Documents/GitHub/cybert-floor-price/src/App_opensea.tsx"],"names":["React","styled","Web3","Web3Modal","OpenSeaPort","Network","Button","Column","Wrapper","Header","Loader","ConnectButton","getChainData","fonts","SLayout","div","SContent","SContainer","SLanding","SBalances","STestButtonContainer","STestButton","size","medium","STestInput","textarea","INITIAL_STATE","fetching","address","web3","provider","connected","chainId","networkId","assets","assets2","showModal","pendingRequest","result","tokenAddress","tokenIds","one_day_average_price","average_price","floor_price","total_volume","price","initWeb3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","App","Component","constructor","props","web3Modal","state","onConnect","connect","subscribeProvider","accounts","getAccounts","net","getId","console","log","setState","on","resetApp","getNetwork","network","currentProvider","close","clearCachedProvider","settokenAddress","value","target","settokenIds","setprice","buy","alert","ids","split","seaport","window","networkName","Rinkeby","givenProvider","accountAddress","forEach","element","offer","createBuyOrder","asset","tokenId","startAmount","error","getData","api","getAsset","status","collection","stats","render","height","cacheProvider","componentDidMount","cachedProvider"],"mappings":"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","sourcesContent":["/*\n * @Author: your name\n * @Date: 2021-05-22 00:27:06\n * @LastEditTime: 2021-12-13 11:28:44\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /frontend/src/App_sign.tsx\n */\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\n\nimport Web3Modal from \"web3modal\";\nimport { OpenSeaPort, Network } from 'opensea-js';\nimport Button from \"./components/Button\";\nimport Column from \"./components/Column\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Loader from \"./components/Loader\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport {getChainData} from \"./helpers/utilities\";\nimport {IAssetData} from \"./helpers/types\";\nimport {fonts} from \"./styles\";\nimport \"./style.css\";\n\n\nconst SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n  font-family:vt323;\n  font-size:30px;\n`;\n\nconst SContent = styled(Wrapper)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n\nconst SLanding = styled(Column)`\n  height: 600px;\n`;\n\n\n// @ts-ignore\nconst SBalances = styled(SLanding)`\n  height: 100%;\n  & h3 {\n    padding-top: 10px;\n  }\n`;\n\nconst STestButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst STestButton = styled(Button)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  max-width: 175px;\n  margin: 12px;\n  font-family:vt323;\n`;\n\nconst STestInput = styled.textarea`\n    background-color: #f9f9f9;\n    border: 0;\n    border-radius: 4px;\n    height: 200px;\n    padding: 13px 15px;\n    resize: none;\n    width: 100%;\n`;\n\ninterface IAppState {\n    fetching: boolean;\n    address: string;\n    web3: any;\n    provider: any;\n    connected: boolean;\n    chainId: number;\n    networkId: number;\n    assets: IAssetData[];\n    assets2: IAssetData[];\n    showModal: boolean;\n    pendingRequest: boolean;\n    result: any | null;\n    tokenAddress: string;\n    tokenIds: string;\n    average_price:number;\n    floor_price:number;\n    total_volume:number;\n    one_day_average_price:number;\n    price:number;\n}\n\nconst INITIAL_STATE: IAppState = {\n    fetching: false,\n    address: \"\",\n    web3: null,\n    provider: null,\n    connected: false,\n    chainId: 1,\n    networkId: 1,\n    assets: [],\n    assets2: [],\n    showModal: false,\n    pendingRequest: false,\n    result: null,\n    tokenAddress: \"\",\n    tokenIds:\"\",\n    one_day_average_price:0,\n    average_price:0,\n    floor_price:0,\n    total_volume:0,\n    price:0\n};\n\nfunction initWeb3(provider: any) {\n    const web3: any = new Web3(provider);\n\n    web3.eth.extend({\n        methods: [\n            {\n                name: \"chainId\",\n                call: \"eth_chainId\",\n                outputFormatter: web3.utils.hexToNumber\n            }\n        ]\n    });\n\n    return web3;\n}\n\nclass App extends React.Component<any, any> {\n    // @ts-ignore\n    public web3Modal: Web3Modal;\n    public state: IAppState;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            ...INITIAL_STATE\n        };\n\n        this.web3Modal = new Web3Modal({\n            network: this.getNetwork(),\n            cacheProvider: true,\n        });\n    }\n\n    public componentDidMount() {\n        if (this.web3Modal.cachedProvider) {\n            this.onConnect();\n        }\n    }\n\n    public onConnect = async () => {\n        const provider = await this.web3Modal.connect();\n\n        await this.subscribeProvider(provider);\n\n        const web3: any = initWeb3(provider);\n\n        const accounts = await web3.eth.getAccounts();\n\n        const address = accounts[0];\n\n        const networkId = await web3.eth.net.getId();\n\n        const chainId = await web3.eth.chainId();\n\n        console.log(`chainId is ${chainId}  networkId ${networkId}`)\n\n        await this.setState({\n            web3,\n            provider,\n            connected: true,\n            address,\n            chainId,\n            networkId\n        });\n\n\n    };\n\n    public subscribeProvider = async (provider: any) => {\n        if (!provider.on) {\n            return;\n        }\n        provider.on(\"close\", () => this.resetApp());\n        provider.on(\"accountsChanged\", async (accounts: string[]) => {\n            await this.setState({address: accounts[0]});\n\n        });\n        provider.on(\"chainChanged\", async (chainId: number) => {\n            const {web3} = this.state;\n            const networkId = await web3.eth.net.getId();\n            await this.setState({chainId, networkId});\n\n        });\n\n        provider.on(\"networkChanged\", async (networkId: number) => {\n            const {web3} = this.state;\n            const chainId = await web3.eth.chainId();\n            await this.setState({chainId, networkId});\n\n        });\n    };\n\n    public getNetwork = () => getChainData(this.state.chainId).network;\n\n    public resetApp = async () => {\n        const {web3} = this.state;\n        if (web3 && web3.currentProvider && web3.currentProvider.close) {\n            await web3.currentProvider.close();\n        }\n        await this.web3Modal.clearCachedProvider();\n        this.setState({...INITIAL_STATE});\n    };\n\n    public settokenAddress = (value: any) => {\n        this.setState({tokenAddress: value.target.value})\n    }\n\n    public settokenIds = (value: any) => {\n        this.setState({tokenIds: value.target.value})\n    }\n\n    public setprice = (value: any) => {\n        this.setState({price: value.target.value})\n    }\n\n    public buy = async () => {\n        // const provider = await this.web3Modal.connect();\n        // const prov = new ethers.providers.Web3Provider(provider);\n        // open modal\n        const tokenIds = this.state.tokenIds;\n        if(tokenIds === \"\"){\n            alert('input token ID!')\n            return\n        }\n        const tokenAddress = this.state.tokenAddress;\n        if(tokenAddress === \"\"){\n            alert('input token contract address！')\n            return\n        }\n        const price = this.state.price;\n        if(price === 0){\n            alert('input price > 0！')\n            return\n        }\n        const ids = tokenIds.split(',')\n\n        const seaport = new OpenSeaPort(window.web3.currentProvider, {\n            networkName: Network.Rinkeby,\n            // apiKey: YOUR_API_KEY\n        })\n        // Token ID and smart contract address for a non-fungible token:\n        // The offerer's wallet address:\n        let web3 = new Web3(Web3.givenProvider);\n        const accountAddress = await web3.eth.getAccounts();\n\n\n        try {\n            // createBuyOrder  buy one nft\n            ids.forEach(async element => {\n                const offer = await seaport.createBuyOrder({\n                    asset: {\n                        tokenId:element,\n                        tokenAddress,\n                    },\n                    accountAddress: accountAddress[0],\n                    // Value of the offer, in units of the payment token (or wrapped ETH if none is specified):\n                    startAmount: 0.13,\n                })\n                console.log(offer)\n            });\n\n            // let assets: { tokenId: string; tokenAddress: string; }[] = []\n            // ids.forEach(element => {\n            //     assets.push({tokenId:element, tokenAddress:tokenAddress})\n            // });\n            // const offer = await seaport.createBundleBuyOrder({\n            //     assets,\n            //     accountAddress: accountAddress[0],\n            //     startAmount: price,\n            //     // Optional expiration time for the order, in Unix time (seconds):\n            //     // expirationTime: Math.round(Date.now() / 1000 + 60 * 60 * 24) // One day from now\n            // })\n            // console.log(offer)\n            // alert('成功')\n        } catch (error) {\n\n            console.log(error)\n            alert('失败')\n        }\n\n    }\n\n    public getData = async() => {\n        const tokenAddress = this.state.tokenAddress;\n        if(tokenAddress === \"\"){\n            alert('请输入tokenAddress！') //0x256d31fb5439119026f1301d40ae748a8838c979\n            return\n        }\n\n        const seaport = new OpenSeaPort(window.web3.currentProvider, {\n            networkName: Network.Rinkeby, //todo\n        })\n        const asset = await seaport.api.getAsset({\n            tokenAddress: tokenAddress,\n            tokenId:null\n        })\n        const status = asset.collection.stats as any\n        console.log(asset.collection.stats)\n\n        this.setState({average_price: status['average_price'],floor_price: status['floor_price'],total_volume:status['total_volume'],one_day_average_price:status['one_day_average_price']})\n    }\n\n    public render = () => {\n        const {\n            address,\n            connected,\n            chainId,\n            fetching,\n            average_price,\n            floor_price,\n            total_volume,\n            one_day_average_price\n        } = this.state;\n        return (\n            <SLayout>\n                <Column maxWidth={1000} spanHeight>\n                    <Header\n                        connected={connected}\n                        address={address}\n                        chainId={chainId}\n                        killSession={this.resetApp}\n                    />\n                    <SContent>\n                        {fetching ? (\n                            <Column center>\n                                <SContainer>\n                                    <Loader/>\n                                </SContainer>\n                            </Column>\n                        ) : this.state.address ? (\n                            <SBalances>\n                                <Column center>\n                                    {/* <h6>当前时间:{this.state.curTime}</h6> */}\n                                    <br /><h4>Project Detail</h4>\n                                        <p>Floor Price：{floor_price}</p>\n                                        <p>Average：{average_price}</p>\n                                        <p>Total Volume：{total_volume}</p>\n                                        <p>Average(Day)：{one_day_average_price}</p>\n                                        <br />\n                                    <STestButtonContainer>\n                                        <h4>NFT Contract Address</h4>\n                                        <STestInput style={{height:'40px'}} value={this.state.tokenAddress} onChange={this.settokenAddress}></STestInput>\n                                        <h4>TokenID(separate by ,)</h4>\n                                        <STestInput style={{height:'40px'}} value={this.state.tokenIds} onChange={this.settokenIds}></STestInput>\n                                        <h4>Listed Price</h4>\n                                        <STestInput style={{height:'40px'}} value={this.state.price} onChange={this.setprice}></STestInput>\n\n                                        <STestButton left onClick={() => this.getData()}>\n                                            Query\n                                        </STestButton>\n                                        <STestButton left onClick={() => this.buy()}>\n                                            Buy\n                                        </STestButton>\n\n                                    </STestButtonContainer>\n                                </Column>\n\n                            </SBalances>\n                        ) : (\n                            <SLanding center>\n                                <h6>{`Test Web3Modal`}</h6>\n                                <ConnectButton onClick={this.onConnect}/>\n                            </SLanding>\n                        )}\n                    </SContent>\n                </Column>\n            </SLayout>\n        );\n    };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}