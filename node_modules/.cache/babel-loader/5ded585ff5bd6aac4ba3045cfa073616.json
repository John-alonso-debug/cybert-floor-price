{"ast":null,"code":"import { AuthenticatedFetchSubprovider, BitskiEngine } from 'bitski-provider';\nimport { BITSKI_RPC_BASE_URL, BITSKI_TRANSACTION_API_BASE_URL, BITSKI_WEB_BASE_URL } from '../constants';\nimport { BitskiTransactionSigner } from '../signing/transaction-signer';\nimport { AuthenticatedCacheSubprovider } from '../subproviders/authenticated-cache';\nimport { RemoteAccountSubprovider } from '../subproviders/remote-accounts';\nimport { RestFetchSubprovider } from '../subproviders/rest-fetch';\nimport { SignatureSubprovider } from '../subproviders/signature'; // Predicate to determine if the token provider is an AuthProvider\n\nfunction isAuthProvider(object) {\n  return object.getUser !== undefined;\n}\n\nexport class BitskiBrowserEngine extends BitskiEngine {\n  constructor(clientId, tokenProvider, sdkVersion, network, options = {}) {\n    super(options);\n    options = options || {};\n    this.network = network;\n    this.clientId = clientId;\n    this.sdkVersion = sdkVersion;\n    this.apiBaseUrl = options.apiBaseUrl || BITSKI_TRANSACTION_API_BASE_URL;\n    this.webBaseUrl = options.webBaseUrl || BITSKI_WEB_BASE_URL;\n    this.tokenProvider = tokenProvider;\n    const defaultBitskiHeaders = {\n      'X-API-KEY': this.clientId,\n      'X-CLIENT-ID': this.clientId,\n      'X-CLIENT-VERSION': this.sdkVersion\n    };\n    this.headers = defaultBitskiHeaders;\n    this.rpcHeaders = {};\n\n    if (options && options.additionalHeaders) {\n      this.headers = Object.assign({}, options.additionalHeaders, this.headers);\n      this.rpcHeaders = options.additionalHeaders;\n    }\n\n    if (this.network && this.network.rpcUrl.includes('bitski.com')) {\n      this.rpcHeaders = Object.assign({}, this.rpcHeaders, defaultBitskiHeaders);\n    }\n\n    this.signer = new BitskiTransactionSigner(this.webBaseUrl, this.apiBaseUrl, this.headers, options.callbackURL);\n    this.addSubproviders();\n  }\n\n  addSubproviders() {\n    // Used for eth_accounts calls\n    const accountsProvider = new RemoteAccountSubprovider(`${BITSKI_RPC_BASE_URL}/mainnet`, false, this.tokenProvider, this.headers); // Used for all other calls\n\n    const fetchSubprovider = new AuthenticatedFetchSubprovider(this.network.rpcUrl, false, this.tokenProvider, this.rpcHeaders); // Respond to some requests via userinfo object if available\n\n    if (isAuthProvider(this.tokenProvider)) {\n      const cacheSubprovider = new AuthenticatedCacheSubprovider(this.tokenProvider, this);\n      this.addProvider(cacheSubprovider);\n    } // Ensure that whenever accounts are requested, they go through Bitski\n\n\n    this.addProvider(accountsProvider); // Respond to requests that need signed with an iframe\n\n    const signatureSubprovider = new SignatureSubprovider(this.network, this.signer, this.tokenProvider);\n    this.addProvider(signatureSubprovider); // Respond to block request via REST is using Bitski RPC endpoint\n\n    if (this.network.rpcUrl.startsWith('https://api.bitski.com')) {\n      const blockProvider = new RestFetchSubprovider({\n        rpcUrl: this.network.rpcUrl,\n        defaultHeaders: this.headers\n      });\n      this.addProvider(blockProvider);\n    } // Finally, add our basic HTTP provider\n\n\n    this.addProvider(fetchSubprovider);\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/providers/bitski-browser-engine.js"],"names":["AuthenticatedFetchSubprovider","BitskiEngine","BITSKI_RPC_BASE_URL","BITSKI_TRANSACTION_API_BASE_URL","BITSKI_WEB_BASE_URL","BitskiTransactionSigner","AuthenticatedCacheSubprovider","RemoteAccountSubprovider","RestFetchSubprovider","SignatureSubprovider","isAuthProvider","object","getUser","undefined","BitskiBrowserEngine","constructor","clientId","tokenProvider","sdkVersion","network","options","apiBaseUrl","webBaseUrl","defaultBitskiHeaders","headers","rpcHeaders","additionalHeaders","Object","assign","rpcUrl","includes","signer","callbackURL","addSubproviders","accountsProvider","fetchSubprovider","cacheSubprovider","addProvider","signatureSubprovider","startsWith","blockProvider","defaultHeaders"],"mappings":"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","sourcesContent":["import { AuthenticatedFetchSubprovider, BitskiEngine } from 'bitski-provider';\nimport { BITSKI_RPC_BASE_URL, BITSKI_TRANSACTION_API_BASE_URL, BITSKI_WEB_BASE_URL } from '../constants';\nimport { BitskiTransactionSigner } from '../signing/transaction-signer';\nimport { AuthenticatedCacheSubprovider } from '../subproviders/authenticated-cache';\nimport { RemoteAccountSubprovider } from '../subproviders/remote-accounts';\nimport { RestFetchSubprovider } from '../subproviders/rest-fetch';\nimport { SignatureSubprovider } from '../subproviders/signature';\n// Predicate to determine if the token provider is an AuthProvider\nfunction isAuthProvider(object) {\n    return object.getUser !== undefined;\n}\nexport class BitskiBrowserEngine extends BitskiEngine {\n    constructor(clientId, tokenProvider, sdkVersion, network, options = {}) {\n        super(options);\n        options = options || {};\n        this.network = network;\n        this.clientId = clientId;\n        this.sdkVersion = sdkVersion;\n        this.apiBaseUrl = options.apiBaseUrl || BITSKI_TRANSACTION_API_BASE_URL;\n        this.webBaseUrl = options.webBaseUrl || BITSKI_WEB_BASE_URL;\n        this.tokenProvider = tokenProvider;\n        const defaultBitskiHeaders = {\n            'X-API-KEY': this.clientId,\n            'X-CLIENT-ID': this.clientId,\n            'X-CLIENT-VERSION': this.sdkVersion,\n        };\n        this.headers = defaultBitskiHeaders;\n        this.rpcHeaders = {};\n        if (options && options.additionalHeaders) {\n            this.headers = Object.assign({}, options.additionalHeaders, this.headers);\n            this.rpcHeaders = options.additionalHeaders;\n        }\n        if (this.network && this.network.rpcUrl.includes('bitski.com')) {\n            this.rpcHeaders = Object.assign({}, this.rpcHeaders, defaultBitskiHeaders);\n        }\n        this.signer = new BitskiTransactionSigner(this.webBaseUrl, this.apiBaseUrl, this.headers, options.callbackURL);\n        this.addSubproviders();\n    }\n    addSubproviders() {\n        // Used for eth_accounts calls\n        const accountsProvider = new RemoteAccountSubprovider(`${BITSKI_RPC_BASE_URL}/mainnet`, false, this.tokenProvider, this.headers);\n        // Used for all other calls\n        const fetchSubprovider = new AuthenticatedFetchSubprovider(this.network.rpcUrl, false, this.tokenProvider, this.rpcHeaders);\n        // Respond to some requests via userinfo object if available\n        if (isAuthProvider(this.tokenProvider)) {\n            const cacheSubprovider = new AuthenticatedCacheSubprovider(this.tokenProvider, this);\n            this.addProvider(cacheSubprovider);\n        }\n        // Ensure that whenever accounts are requested, they go through Bitski\n        this.addProvider(accountsProvider);\n        // Respond to requests that need signed with an iframe\n        const signatureSubprovider = new SignatureSubprovider(this.network, this.signer, this.tokenProvider);\n        this.addProvider(signatureSubprovider);\n        // Respond to block request via REST is using Bitski RPC endpoint\n        if (this.network.rpcUrl.startsWith('https://api.bitski.com')) {\n            const blockProvider = new RestFetchSubprovider({ rpcUrl: this.network.rpcUrl, defaultHeaders: this.headers });\n            this.addProvider(blockProvider);\n        }\n        // Finally, add our basic HTTP provider\n        this.addProvider(fetchSubprovider);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}