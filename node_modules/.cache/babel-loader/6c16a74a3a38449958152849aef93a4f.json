{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocalStorageBackend = exports.StorageBackend = void 0;\n/**\n * Asynchronous storage APIs. All methods return a `Promise`.\n * All methods take the `DOMString`\n * IDL type (as it is the lowest common denominator).\n */\n\nvar StorageBackend =\n/** @class */\nfunction () {\n  function StorageBackend() {}\n\n  return StorageBackend;\n}();\n\nexports.StorageBackend = StorageBackend;\n/**\n * A `StorageBackend` backed by `localstorage`.\n */\n\nvar LocalStorageBackend =\n/** @class */\nfunction (_super) {\n  __extends(LocalStorageBackend, _super);\n\n  function LocalStorageBackend(storage) {\n    var _this = _super.call(this) || this;\n\n    _this.storage = storage || window.localStorage;\n    return _this;\n  }\n\n  LocalStorageBackend.prototype.getItem = function (name) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var value = _this.storage.getItem(name);\n\n      if (value) {\n        resolve(value);\n      } else {\n        resolve(null);\n      }\n    });\n  };\n\n  LocalStorageBackend.prototype.removeItem = function (name) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.storage.removeItem(name);\n\n      resolve();\n    });\n  };\n\n  LocalStorageBackend.prototype.clear = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.storage.clear();\n\n      resolve();\n    });\n  };\n\n  LocalStorageBackend.prototype.setItem = function (name, value) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.storage.setItem(name, value);\n\n      resolve();\n    });\n  };\n\n  return LocalStorageBackend;\n}(StorageBackend);\n\nexports.LocalStorageBackend = LocalStorageBackend;","map":{"version":3,"sources":["../src/storage.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;AAYG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBH;;;;AAIG;;AACH,IAAA,cAAA;AAAA;AAAA,YAAA;AAAA,WAAA,cAAA,GAAA,CAsBC;;AAAD,SAAA,cAAA;AAAC,CAtBD,EAAA;;AAAsB,OAAA,CAAA,cAAA,GAAA,cAAA;AAwBtB;;AAEG;;AACH,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;AAEvC,WAAA,mBAAA,CAAY,OAAZ,EAAuC;AAAvC,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAEE,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,IAAI,MAAM,CAAC,YAAjC;;AACD;;AAEM,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAA2B;AAA3B,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,OAAJ,CAAyB,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC9C,UAAM,KAAK,GAAG,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,IAArB,CAAd;;AACA,UAAI,KAAJ,EAAW;AACT,QAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KAPM,CAAP;AAQD,GATM;;AAWA,EAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA8B;AAA9B,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACvC,MAAA,KAAI,CAAC,OAAL,CAAa,UAAb,CAAwB,IAAxB;;AACA,MAAA,OAAO;AACR,KAHM,CAAP;AAID,GALM;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACvC,MAAA,KAAI,CAAC,OAAL,CAAa,KAAb;;AACA,MAAA,OAAO;AACR,KAHM,CAAP;AAID,GALM;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAA6B,KAA7B,EAA0C;AAA1C,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACvC,MAAA,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,IAArB,EAA2B,KAA3B;;AACA,MAAA,OAAO;AACR,KAHM,CAAP;AAID,GALM;;AAMT,SAAA,mBAAA;AAAC,CAtCD,CAAyC,cAAzC,CAAA;;AAAa,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A subset of the `Storage` interface which we need for the backends to work.\n *\n * Essentially removes the indexable properties and readonly properties from\n * `Storage` in lib.dom.d.ts. This is so that a custom type can extend it for\n * testing.\n */\nexport interface UnderlyingStorage {\n  readonly length: number;\n  clear(): void;\n  getItem(key: string): string|null;\n  removeItem(key: string): void;\n  setItem(key: string, data: string): void;\n}\n\n/**\n * Asynchronous storage APIs. All methods return a `Promise`.\n * All methods take the `DOMString`\n * IDL type (as it is the lowest common denominator).\n */\nexport abstract class StorageBackend {\n  /**\n   * When passed a key `name`, will return that key's value.\n   */\n  public abstract getItem(name: string): Promise<string|null>;\n\n  /**\n   * When passed a key `name`, will remove that key from the storage.\n   */\n  public abstract removeItem(name: string): Promise<void>;\n\n  /**\n   * When invoked, will empty all keys out of the storage.\n   */\n  public abstract clear(): Promise<void>;\n\n  /**\n   * The setItem() method of the `StorageBackend` interface,\n   * when passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   */\n  public abstract setItem(name: string, value: string): Promise<void>;\n}\n\n/**\n * A `StorageBackend` backed by `localstorage`.\n */\nexport class LocalStorageBackend extends StorageBackend {\n  private storage: UnderlyingStorage;\n  constructor(storage?: UnderlyingStorage) {\n    super();\n    this.storage = storage || window.localStorage;\n  }\n\n  public getItem(name: string): Promise<string|null> {\n    return new Promise<string|null>((resolve, reject) => {\n      const value = this.storage.getItem(name);\n      if (value) {\n        resolve(value);\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  public removeItem(name: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.storage.removeItem(name);\n      resolve();\n    });\n  }\n\n  public clear(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.storage.clear();\n      resolve();\n    });\n  }\n\n  public setItem(name: string, value: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.storage.setItem(name, value);\n      resolve();\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}