{"ast":null,"code":"import { logMsg } from './dev';\nconst SPACE_ID = 'TEST_WEB3_APP';\nconst Box = typeof window !== 'undefined' && typeof window.Box !== 'undefined' ? window.Box : null;\nlet box = null;\nexport async function getProfile(address) {\n  if (!Box) {\n    throw new Error('Box library is not available in window');\n  }\n\n  const profile = await Box.getProfile(address);\n  return profile;\n}\nexport async function openBox(address, provider, syncCallback) {\n  if (!Box) {\n    throw new Error('Box library is not available in window');\n  }\n\n  box = await Box.openBox(address, provider);\n  box.onSyncDone(() => {\n    logMsg('SYNC DONE');\n    syncCallback();\n  });\n}\nexport async function setPublic(key, value) {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n\n  await box.public.set(key, value);\n}\nexport async function getPublic(key) {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  let result = await box.public.get(key);\n\n  try {\n    result = JSON.parse(result);\n  } catch (error) {// ignore error\n  }\n\n  return result;\n}\nexport async function removePublic(key) {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  await box.public.remove(key);\n}\nexport async function setPrivate(key, value) {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n\n  await box.private.set(key, value);\n}\nexport async function getPrivate(key) {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  let result = await box.private.get(key);\n\n  try {\n    result = JSON.parse(result);\n  } catch (error) {// ignore error\n  }\n\n  return result;\n}\nexport async function removePrivate(key) {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  await box.private.remove(key);\n}\nlet space = null;\nexport async function openSpace() {\n  if (!box) {\n    throw new Error('Box is not open yet');\n  }\n\n  space = await box.openSpace(SPACE_ID);\n}\nexport async function setSpacePrivate(key, value) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n\n  await space.private.set(key, value);\n}\nexport async function getSpacePrivate(key) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  let result = await space.private.get(key);\n\n  try {\n    result = JSON.parse(result);\n  } catch (error) {// ignore error\n  }\n\n  return result;\n}\nexport async function removeSpacePrivate(key) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  await space.private.remove(key);\n}\nexport async function setSpacePublic(key, value) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n\n  await space.public.set(key, value);\n}\nexport async function getSpacePublic(key) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  let result = await space.public.get(key);\n\n  try {\n    result = JSON.parse(result);\n  } catch (error) {// ignore error\n  }\n\n  return result;\n}\nexport async function removeSpacePublic(key) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  await space.public.remove(key);\n}\nlet thread = null;\nexport async function joinThread(threadName) {\n  if (!space) {\n    throw new Error('Space is not open yet');\n  }\n\n  thread = await space.joinThread(threadName);\n}\nexport async function getThreadPosts() {\n  if (!thread) {\n    throw new Error('Thread is not open yet');\n  }\n\n  const posts = await thread.getPosts();\n  return posts;\n}\nexport async function postToThread(message) {\n  if (!thread) {\n    throw new Error('Thread is not open yet');\n  }\n\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  await thread.post(message);\n}\nexport async function subscribeToThread(callback) {\n  if (!thread) {\n    throw new Error('Thread is not open yet');\n  }\n\n  thread.onUpdate(() => {\n    logMsg('THREAD UPDATE');\n    callback();\n  });\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/src/helpers/box.ts"],"names":["logMsg","SPACE_ID","Box","window","box","getProfile","address","Error","profile","openBox","provider","syncCallback","onSyncDone","setPublic","key","value","JSON","stringify","public","set","getPublic","result","get","parse","error","removePublic","remove","setPrivate","private","getPrivate","removePrivate","space","openSpace","setSpacePrivate","getSpacePrivate","removeSpacePrivate","setSpacePublic","getSpacePublic","removeSpacePublic","thread","joinThread","threadName","getThreadPosts","posts","getPosts","postToThread","message","post","subscribeToThread","callback","onUpdate"],"mappings":"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","sourcesContent":["import { logMsg } from './dev'\nimport { IBoxProfile } from './types'\n\nconst SPACE_ID = 'TEST_WEB3_APP'\n\nconst Box =\n  typeof window !== 'undefined' && typeof window.Box !== 'undefined'\n    ? window.Box\n    : null\n\nlet box: any | null = null\n\nexport async function getProfile(address: string): Promise<IBoxProfile> {\n  if (!Box) {\n    throw new Error('Box library is not available in window')\n  }\n  const profile = await Box.getProfile(address)\n  return profile\n}\n\nexport async function openBox(\n  address: string,\n  provider: any,\n  syncCallback: any\n): Promise<any> {\n  if (!Box) {\n    throw new Error('Box library is not available in window')\n  }\n  box = await Box.openBox(address, provider)\n  box.onSyncDone(() => {\n    logMsg('SYNC DONE')\n    syncCallback()\n  })\n}\n\nexport async function setPublic(key: string, value: any) {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value)\n  }\n  await box.public.set(key, value)\n}\n\nexport async function getPublic(key: string) {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  let result = await box.public.get(key)\n  try {\n    result = JSON.parse(result)\n  } catch (error) {\n    // ignore error\n  }\n  return result\n}\n\nexport async function removePublic(key: string) {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  await box.public.remove(key)\n}\n\nexport async function setPrivate(key: string, value: any) {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value)\n  }\n  await box.private.set(key, value)\n}\n\nexport async function getPrivate(key: string) {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  let result = await box.private.get(key)\n  try {\n    result = JSON.parse(result)\n  } catch (error) {\n    // ignore error\n  }\n  return result\n}\n\nexport async function removePrivate(key: string) {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  await box.private.remove(key)\n}\n\nlet space: any = null\n\nexport async function openSpace() {\n  if (!box) {\n    throw new Error('Box is not open yet')\n  }\n  space = await box.openSpace(SPACE_ID)\n}\n\nexport async function setSpacePrivate(key: string, value: any) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value)\n  }\n  await space.private.set(key, value)\n}\n\nexport async function getSpacePrivate(key: string) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  let result = await space.private.get(key)\n  try {\n    result = JSON.parse(result)\n  } catch (error) {\n    // ignore error\n  }\n  return result\n}\n\nexport async function removeSpacePrivate(key: string) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  await space.private.remove(key)\n}\n\nexport async function setSpacePublic(key: string, value: any) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value)\n  }\n  await space.public.set(key, value)\n}\n\nexport async function getSpacePublic(key: string) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  let result = await space.public.get(key)\n  try {\n    result = JSON.parse(result)\n  } catch (error) {\n    // ignore error\n  }\n  return result\n}\n\nexport async function removeSpacePublic(key: string) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  await space.public.remove(key)\n}\n\nlet thread: any = null\n\nexport async function joinThread(threadName: string) {\n  if (!space) {\n    throw new Error('Space is not open yet')\n  }\n  thread = await space.joinThread(threadName)\n}\n\nexport async function getThreadPosts() {\n  if (!thread) {\n    throw new Error('Thread is not open yet')\n  }\n  const posts = await thread.getPosts()\n  return posts\n}\n\nexport async function postToThread(message: any) {\n  if (!thread) {\n    throw new Error('Thread is not open yet')\n  }\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message)\n  }\n  await thread.post(message)\n}\n\nexport async function subscribeToThread(callback: any) {\n  if (!thread) {\n    throw new Error('Thread is not open yet')\n  }\n  thread.onUpdate(() => {\n    logMsg('THREAD UPDATE')\n    callback()\n  })\n}\n"]},"metadata":{},"sourceType":"module"}