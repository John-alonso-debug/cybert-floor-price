{"ast":null,"code":"import { OAuthSignInMethod } from '../bitski';\nimport { AuthenticationError, AuthenticationErrorCode } from '../errors/authentication-error';\n/**\n * Sizing options for the Bitski connect button.\n */\n\nexport var ConnectButtonSize;\n\n(function (ConnectButtonSize) {\n  ConnectButtonSize[\"Small\"] = \"SMALL\";\n  ConnectButtonSize[\"Medium\"] = \"MEDIUM\";\n  ConnectButtonSize[\"Large\"] = \"LARGE\";\n})(ConnectButtonSize || (ConnectButtonSize = {}));\n/**\n * A button used to connect to Bitski.\n */\n\n\nexport class ConnectButton {\n  /**\n   * @param authProvider An instance of an AuthProvider to process sign in requests.\n   * @param options Optional ConnectButtonOptions to configure your button.\n   * @param callback Optional callback to be called after successful or failed log in attempt.\n   * You can also set this directly later with the `callback` property.\n   */\n  constructor(authProvider, options, callback) {\n    // Set options to object if undefined\n    options = options || {}; // Configure instance\n\n    this.authProvider = authProvider;\n    this.size = options.size || ConnectButtonSize.Medium;\n    this.authIntegrationType = options.authMethod || OAuthSignInMethod.Popup;\n    this.callback = callback;\n    this.signInOptions = options.signInOptions || {}; // Create the element\n\n    this.element = document.createElement('button');\n    this.configureElement();\n    this.element.addEventListener('click', this.signin.bind(this)); // Embed if needed\n\n    if (options.container) {\n      options.container.appendChild(this.element);\n    }\n  }\n  /**\n   * Removes the button from the page\n   */\n\n\n  remove() {\n    if (this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n  }\n\n  signin() {\n    this.authProvider.signInOrConnect(this.authIntegrationType, this.signInOptions).then(user => {\n      if (this.callback) {\n        this.callback(undefined, user);\n      }\n    }).catch(error => {\n      // Check for cancellation\n      if (error instanceof AuthenticationError && error.code === AuthenticationErrorCode.UserCancelled) {\n        // Not a real error, the user just cancelled. Trigger cancellation callback.\n        if (this.onCancel) {\n          this.onCancel();\n        }\n      } else if (this.callback) {\n        // Real error. Forward to main callback.\n        this.callback(error, undefined);\n      }\n    });\n  }\n\n  configureElement() {\n    this.element.title = 'Continue with Bitski';\n    this.element.innerText = 'Continue with Bitski';\n    this.element.className = 'bitski-connect-button';\n    let sizeClass = '';\n\n    switch (this.size) {\n      case ConnectButtonSize.Small:\n        sizeClass = 'size-small';\n        break;\n\n      case ConnectButtonSize.Medium:\n        sizeClass = 'size-medium';\n        break;\n\n      case ConnectButtonSize.Large:\n        sizeClass = 'size-large';\n        break;\n    }\n\n    this.element.classList.add(sizeClass);\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/components/connect-button.js"],"names":["OAuthSignInMethod","AuthenticationError","AuthenticationErrorCode","ConnectButtonSize","ConnectButton","constructor","authProvider","options","callback","size","Medium","authIntegrationType","authMethod","Popup","signInOptions","element","document","createElement","configureElement","addEventListener","signin","bind","container","appendChild","remove","parentNode","removeChild","signInOrConnect","then","user","undefined","catch","error","code","UserCancelled","onCancel","title","innerText","className","sizeClass","Small","Large","classList","add"],"mappings":"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","sourcesContent":["import { OAuthSignInMethod } from '../bitski';\nimport { AuthenticationError, AuthenticationErrorCode } from '../errors/authentication-error';\n/**\n * Sizing options for the Bitski connect button.\n */\nexport var ConnectButtonSize;\n(function (ConnectButtonSize) {\n    ConnectButtonSize[\"Small\"] = \"SMALL\";\n    ConnectButtonSize[\"Medium\"] = \"MEDIUM\";\n    ConnectButtonSize[\"Large\"] = \"LARGE\";\n})(ConnectButtonSize || (ConnectButtonSize = {}));\n/**\n * A button used to connect to Bitski.\n */\nexport class ConnectButton {\n    /**\n     * @param authProvider An instance of an AuthProvider to process sign in requests.\n     * @param options Optional ConnectButtonOptions to configure your button.\n     * @param callback Optional callback to be called after successful or failed log in attempt.\n     * You can also set this directly later with the `callback` property.\n     */\n    constructor(authProvider, options, callback) {\n        // Set options to object if undefined\n        options = options || {};\n        // Configure instance\n        this.authProvider = authProvider;\n        this.size = options.size || ConnectButtonSize.Medium;\n        this.authIntegrationType = options.authMethod || OAuthSignInMethod.Popup;\n        this.callback = callback;\n        this.signInOptions = options.signInOptions || {};\n        // Create the element\n        this.element = document.createElement('button');\n        this.configureElement();\n        this.element.addEventListener('click', this.signin.bind(this));\n        // Embed if needed\n        if (options.container) {\n            options.container.appendChild(this.element);\n        }\n    }\n    /**\n     * Removes the button from the page\n     */\n    remove() {\n        if (this.element.parentNode) {\n            this.element.parentNode.removeChild(this.element);\n        }\n    }\n    signin() {\n        this.authProvider.signInOrConnect(this.authIntegrationType, this.signInOptions).then((user) => {\n            if (this.callback) {\n                this.callback(undefined, user);\n            }\n        }).catch((error) => {\n            // Check for cancellation\n            if (error instanceof AuthenticationError && error.code === AuthenticationErrorCode.UserCancelled) {\n                // Not a real error, the user just cancelled. Trigger cancellation callback.\n                if (this.onCancel) {\n                    this.onCancel();\n                }\n            }\n            else if (this.callback) {\n                // Real error. Forward to main callback.\n                this.callback(error, undefined);\n            }\n        });\n    }\n    configureElement() {\n        this.element.title = 'Continue with Bitski';\n        this.element.innerText = 'Continue with Bitski';\n        this.element.className = 'bitski-connect-button';\n        let sizeClass = '';\n        switch (this.size) {\n            case ConnectButtonSize.Small:\n                sizeClass = 'size-small';\n                break;\n            case ConnectButtonSize.Medium:\n                sizeClass = 'size-medium';\n                break;\n            case ConnectButtonSize.Large:\n                sizeClass = 'size-large';\n                break;\n        }\n        this.element.classList.add(sizeClass);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}