{"ast":null,"code":"import { Dialog } from '../components/dialog';\nimport { IFRAME_MESSAGE_ORIGIN_INCLUDES } from '../constants';\nimport { SignerError } from '../errors/signer-error';\nimport { parseResponse } from '../utils/request-utils';\n/**\n * This class is responsible for signing transactions. It only knows about Bitski's proprietary transaction objects.\n * It is also the only class that knows about the iframe signing implementation.\n */\n\nexport class BitskiTransactionSigner {\n  constructor(webBaseUrl, apiBaseUrl, defaultHeaders, callbackURL) {\n    this.webBaseUrl = webBaseUrl;\n    this.apiBaseUrl = apiBaseUrl;\n    this.defaultHeaders = defaultHeaders;\n    this.callbackURL = callbackURL; // Watch for new messages on the window.\n\n    window.addEventListener('message', this.receiveMessage.bind(this), false);\n  }\n\n  async sign(transaction, accessToken) {\n    // If we have a callback URL, use the redirect flow\n    if (this.callbackURL) {\n      const persisted = await this.submitTransaction(transaction, accessToken);\n      return this.redirectToCallbackURL(persisted.transaction);\n    }\n\n    this.submitTransaction(transaction, accessToken).catch(error => {\n      return this.handleCallback({\n        error\n      });\n    }); // Show the modal (await response)\n\n    return this.showAuthorizationModal(transaction);\n  }\n  /**\n   * Event listener for callbacks from the iframe\n   * @param event MessageEvent received from the browser\n   */\n\n\n  receiveMessage(event) {\n    // Ignore messages from the current window, and from frames that aren't on Bitski.com\n    if (event.source === window || !event.origin.includes(IFRAME_MESSAGE_ORIGIN_INCLUDES)) {\n      return;\n    }\n\n    const data = event.data; // Ignore message events that don't actually have data\n\n    if (data === undefined || data === null) {\n      return;\n    }\n\n    this.handleCallback(data);\n  }\n\n  handleCallback(callback) {\n    // Ignore messages when we don't have a current request in flight\n    if (this.currentRequest === undefined) {\n      return;\n    }\n\n    const [fulfill, reject] = this.currentRequest; // Dismiss current dialog\n\n    if (this.currentRequestDialog) {\n      this.currentRequestDialog.dismiss();\n    } // Call the callback to complete the request\n\n\n    if (callback.error) {\n      reject(callback.error);\n    } else {\n      fulfill(callback.result);\n    } // Clear state\n\n\n    this.currentRequest = undefined;\n    this.currentRequestDialog = undefined;\n  }\n  /**\n   * Responsible for submitting the Transaction object to the API\n   * @param transaction The Transaction object to submit\n   * @param accessToken The current user's access token\n   */\n\n\n  async submitTransaction(transaction, accessToken) {\n    const requestBody = {\n      transaction\n    };\n    const headers = Object.assign({}, this.defaultHeaders, {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json'\n    });\n    const response = await fetch(`${this.apiBaseUrl}/transactions`, {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers\n    });\n    return parseResponse(response);\n  }\n  /**\n   * Displays the authorization form in a modal window\n   * @param transaction The transaction that has been submitted\n   */\n\n\n  showAuthorizationModal(transaction) {\n    return new Promise((fulfill, reject) => {\n      const url = `${this.webBaseUrl}/transactions/${transaction.id}`;\n      const iframe = document.createElement('iframe');\n      iframe.style.position = 'absolute';\n      iframe.style.top = '0';\n      iframe.style.left = '0';\n      iframe.style.width = '100%';\n      iframe.style.height = '100%';\n      iframe.frameBorder = '0';\n      iframe.src = url; // Dismiss any existing dialogs to prevent UI glitches.\n\n      if (this.currentRequestDialog) {\n        this.currentRequestDialog.close();\n      }\n\n      this.currentRequest = [fulfill, reject];\n      this.currentRequestDialog = new Dialog(iframe, true);\n\n      this.currentRequestDialog.onClose = () => {\n        // Capture reject callback\n        reject(SignerError.UserCancelled());\n      };\n    });\n  }\n\n  redirectToCallbackURL(transaction) {\n    const url = `${this.webBaseUrl}/transactions/${transaction.id}?redirectURI=${this.callbackURL}`;\n    window.location.href = url;\n    return Promise.resolve('');\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/signing/transaction-signer.js"],"names":["Dialog","IFRAME_MESSAGE_ORIGIN_INCLUDES","SignerError","parseResponse","BitskiTransactionSigner","constructor","webBaseUrl","apiBaseUrl","defaultHeaders","callbackURL","window","addEventListener","receiveMessage","bind","sign","transaction","accessToken","persisted","submitTransaction","redirectToCallbackURL","catch","error","handleCallback","showAuthorizationModal","event","source","origin","includes","data","undefined","callback","currentRequest","fulfill","reject","currentRequestDialog","dismiss","result","requestBody","headers","Object","assign","response","fetch","method","body","JSON","stringify","Promise","url","id","iframe","document","createElement","style","position","top","left","width","height","frameBorder","src","close","onClose","UserCancelled","location","href","resolve"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sBAAvB;AACA,SAASC,8BAAT,QAA+C,cAA/C;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAN,CAA8B;AACjCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,UAAb,EAAyBC,cAAzB,EAAyCC,WAAzC,EAAsD;AAC7D,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,WAAL,GAAmBA,WAAnB,CAJ6D,CAK7D;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAnC,EAAmE,KAAnE;AACH;;AACS,QAAJC,IAAI,CAACC,WAAD,EAAcC,WAAd,EAA2B;AACjC;AACA,QAAI,KAAKP,WAAT,EAAsB;AAClB,YAAMQ,SAAS,GAAG,MAAM,KAAKC,iBAAL,CAAuBH,WAAvB,EAAoCC,WAApC,CAAxB;AACA,aAAO,KAAKG,qBAAL,CAA2BF,SAAS,CAACF,WAArC,CAAP;AACH;;AACD,SAAKG,iBAAL,CAAuBH,WAAvB,EAAoCC,WAApC,EAAiDI,KAAjD,CAAwDC,KAAD,IAAW;AAC9D,aAAO,KAAKC,cAAL,CAAoB;AAAED,QAAAA;AAAF,OAApB,CAAP;AACH,KAFD,EANiC,CASjC;;AACA,WAAO,KAAKE,sBAAL,CAA4BR,WAA5B,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIH,EAAAA,cAAc,CAACY,KAAD,EAAQ;AAClB;AACA,QAAIA,KAAK,CAACC,MAAN,KAAiBf,MAAjB,IAA2B,CAACc,KAAK,CAACE,MAAN,CAAaC,QAAb,CAAsB1B,8BAAtB,CAAhC,EAAuF;AACnF;AACH;;AACD,UAAM2B,IAAI,GAAGJ,KAAK,CAACI,IAAnB,CALkB,CAMlB;;AACA,QAAIA,IAAI,KAAKC,SAAT,IAAsBD,IAAI,KAAK,IAAnC,EAAyC;AACrC;AACH;;AACD,SAAKN,cAAL,CAAoBM,IAApB;AACH;;AACDN,EAAAA,cAAc,CAACQ,QAAD,EAAW;AACrB;AACA,QAAI,KAAKC,cAAL,KAAwBF,SAA5B,EAAuC;AACnC;AACH;;AACD,UAAM,CAACG,OAAD,EAAUC,MAAV,IAAoB,KAAKF,cAA/B,CALqB,CAMrB;;AACA,QAAI,KAAKG,oBAAT,EAA+B;AAC3B,WAAKA,oBAAL,CAA0BC,OAA1B;AACH,KAToB,CAUrB;;;AACA,QAAIL,QAAQ,CAACT,KAAb,EAAoB;AAChBY,MAAAA,MAAM,CAACH,QAAQ,CAACT,KAAV,CAAN;AACH,KAFD,MAGK;AACDW,MAAAA,OAAO,CAACF,QAAQ,CAACM,MAAV,CAAP;AACH,KAhBoB,CAiBrB;;;AACA,SAAKL,cAAL,GAAsBF,SAAtB;AACA,SAAKK,oBAAL,GAA4BL,SAA5B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AAC2B,QAAjBX,iBAAiB,CAACH,WAAD,EAAcC,WAAd,EAA2B;AAC9C,UAAMqB,WAAW,GAAG;AAAEtB,MAAAA;AAAF,KAApB;AACA,UAAMuB,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKhC,cAAvB,EAAuC;AACnD,uBAAkB,UAASQ,WAAY,EADY;AAEnD,sBAAgB;AAFmC,KAAvC,CAAhB;AAIA,UAAMyB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKnC,UAAW,eAApB,EAAoC;AAC5DoC,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,WAAf,CAFsD;AAG5DC,MAAAA;AAH4D,KAApC,CAA5B;AAKA,WAAOnC,aAAa,CAACsC,QAAD,CAApB;AACH;AACD;AACJ;AACA;AACA;;;AACIlB,EAAAA,sBAAsB,CAACR,WAAD,EAAc;AAChC,WAAO,IAAIgC,OAAJ,CAAY,CAACf,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMe,GAAG,GAAI,GAAE,KAAK1C,UAAW,iBAAgBS,WAAW,CAACkC,EAAG,EAA9D;AACA,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACG,KAAP,CAAaC,QAAb,GAAwB,UAAxB;AACAJ,MAAAA,MAAM,CAACG,KAAP,CAAaE,GAAb,GAAmB,GAAnB;AACAL,MAAAA,MAAM,CAACG,KAAP,CAAaG,IAAb,GAAoB,GAApB;AACAN,MAAAA,MAAM,CAACG,KAAP,CAAaI,KAAb,GAAqB,MAArB;AACAP,MAAAA,MAAM,CAACG,KAAP,CAAaK,MAAb,GAAsB,MAAtB;AACAR,MAAAA,MAAM,CAACS,WAAP,GAAqB,GAArB;AACAT,MAAAA,MAAM,CAACU,GAAP,GAAaZ,GAAb,CAToC,CAUpC;;AACA,UAAI,KAAKd,oBAAT,EAA+B;AAC3B,aAAKA,oBAAL,CAA0B2B,KAA1B;AACH;;AACD,WAAK9B,cAAL,GAAsB,CAACC,OAAD,EAAUC,MAAV,CAAtB;AACA,WAAKC,oBAAL,GAA4B,IAAIlC,MAAJ,CAAWkD,MAAX,EAAmB,IAAnB,CAA5B;;AACA,WAAKhB,oBAAL,CAA0B4B,OAA1B,GAAoC,MAAM;AACtC;AACA7B,QAAAA,MAAM,CAAC/B,WAAW,CAAC6D,aAAZ,EAAD,CAAN;AACH,OAHD;AAIH,KApBM,CAAP;AAqBH;;AACD5C,EAAAA,qBAAqB,CAACJ,WAAD,EAAc;AAC/B,UAAMiC,GAAG,GAAI,GAAE,KAAK1C,UAAW,iBAAgBS,WAAW,CAACkC,EAAG,gBAAe,KAAKxC,WAAY,EAA9F;AACAC,IAAAA,MAAM,CAACsD,QAAP,CAAgBC,IAAhB,GAAuBjB,GAAvB;AACA,WAAOD,OAAO,CAACmB,OAAR,CAAgB,EAAhB,CAAP;AACH;;AA3GgC","sourcesContent":["import { Dialog } from '../components/dialog';\nimport { IFRAME_MESSAGE_ORIGIN_INCLUDES } from '../constants';\nimport { SignerError } from '../errors/signer-error';\nimport { parseResponse } from '../utils/request-utils';\n/**\n * This class is responsible for signing transactions. It only knows about Bitski's proprietary transaction objects.\n * It is also the only class that knows about the iframe signing implementation.\n */\nexport class BitskiTransactionSigner {\n    constructor(webBaseUrl, apiBaseUrl, defaultHeaders, callbackURL) {\n        this.webBaseUrl = webBaseUrl;\n        this.apiBaseUrl = apiBaseUrl;\n        this.defaultHeaders = defaultHeaders;\n        this.callbackURL = callbackURL;\n        // Watch for new messages on the window.\n        window.addEventListener('message', this.receiveMessage.bind(this), false);\n    }\n    async sign(transaction, accessToken) {\n        // If we have a callback URL, use the redirect flow\n        if (this.callbackURL) {\n            const persisted = await this.submitTransaction(transaction, accessToken);\n            return this.redirectToCallbackURL(persisted.transaction);\n        }\n        this.submitTransaction(transaction, accessToken).catch((error) => {\n            return this.handleCallback({ error });\n        });\n        // Show the modal (await response)\n        return this.showAuthorizationModal(transaction);\n    }\n    /**\n     * Event listener for callbacks from the iframe\n     * @param event MessageEvent received from the browser\n     */\n    receiveMessage(event) {\n        // Ignore messages from the current window, and from frames that aren't on Bitski.com\n        if (event.source === window || !event.origin.includes(IFRAME_MESSAGE_ORIGIN_INCLUDES)) {\n            return;\n        }\n        const data = event.data;\n        // Ignore message events that don't actually have data\n        if (data === undefined || data === null) {\n            return;\n        }\n        this.handleCallback(data);\n    }\n    handleCallback(callback) {\n        // Ignore messages when we don't have a current request in flight\n        if (this.currentRequest === undefined) {\n            return;\n        }\n        const [fulfill, reject] = this.currentRequest;\n        // Dismiss current dialog\n        if (this.currentRequestDialog) {\n            this.currentRequestDialog.dismiss();\n        }\n        // Call the callback to complete the request\n        if (callback.error) {\n            reject(callback.error);\n        }\n        else {\n            fulfill(callback.result);\n        }\n        // Clear state\n        this.currentRequest = undefined;\n        this.currentRequestDialog = undefined;\n    }\n    /**\n     * Responsible for submitting the Transaction object to the API\n     * @param transaction The Transaction object to submit\n     * @param accessToken The current user's access token\n     */\n    async submitTransaction(transaction, accessToken) {\n        const requestBody = { transaction };\n        const headers = Object.assign({}, this.defaultHeaders, {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        });\n        const response = await fetch(`${this.apiBaseUrl}/transactions`, {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers,\n        });\n        return parseResponse(response);\n    }\n    /**\n     * Displays the authorization form in a modal window\n     * @param transaction The transaction that has been submitted\n     */\n    showAuthorizationModal(transaction) {\n        return new Promise((fulfill, reject) => {\n            const url = `${this.webBaseUrl}/transactions/${transaction.id}`;\n            const iframe = document.createElement('iframe');\n            iframe.style.position = 'absolute';\n            iframe.style.top = '0';\n            iframe.style.left = '0';\n            iframe.style.width = '100%';\n            iframe.style.height = '100%';\n            iframe.frameBorder = '0';\n            iframe.src = url;\n            // Dismiss any existing dialogs to prevent UI glitches.\n            if (this.currentRequestDialog) {\n                this.currentRequestDialog.close();\n            }\n            this.currentRequest = [fulfill, reject];\n            this.currentRequestDialog = new Dialog(iframe, true);\n            this.currentRequestDialog.onClose = () => {\n                // Capture reject callback\n                reject(SignerError.UserCancelled());\n            };\n        });\n    }\n    redirectToCallbackURL(transaction) {\n        const url = `${this.webBaseUrl}/transactions/${transaction.id}?redirectURI=${this.callbackURL}`;\n        window.location.href = url;\n        return Promise.resolve('');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}