{"ast":null,"code":"var _jsxFileName = \"/Users/helen/fi/protocol-demo/frontend/src/App.tsx\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\nimport { convertUtf8ToHex } from \"@walletconnect/utils\";\nimport Web3Modal from \"web3modal\"; // @ts-ignore\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // @ts-ignore\n\nimport Fortmatic from \"fortmatic\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Authereum from \"authereum\";\nimport { Bitski } from \"bitski\";\nimport Button from \"./components/Button\";\nimport Column from \"./components/Column\";\nimport Wrapper from \"./components/Wrapper\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/Header\";\nimport Loader from \"./components/Loader\";\nimport ModalResult from \"./components/ModalResult\";\nimport AccountAssets from \"./components/AccountAssets\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport { hashPersonalMessage, recoverPublicKey, recoverPersonalSignature, formatTestTransaction, getChainData } from \"./helpers/utilities\";\nimport { fonts } from \"./styles\";\nimport { openBox, getProfile } from \"./helpers/box\";\nimport { ETH_SEND_TRANSACTION, ETH_SIGN, PERSONAL_SIGN, BOX_GET_PROFILE, DAI_BALANCE_OF, DAI_TRANSFER } from \"./constants\";\nimport { callBalanceOf, callTransfer } from \"./helpers/web3\";\nimport { ethers, utils } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n`;\n_c = SLayout;\nconst SContent = styled(Wrapper)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n_c2 = SContent;\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n_c3 = SContainer;\nconst SLanding = styled(Column)`\n  height: 600px;\n`;\n_c4 = SLanding;\nconst SModalContainer = styled.div`\n  width: 100%;\n  position: relative;\n  word-wrap: break-word;\n`;\n_c5 = SModalContainer;\nconst SModalTitle = styled.div`\n  margin: 1em 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\n_c6 = SModalTitle;\nconst SModalParagraph = styled.p`\n  margin-top: 30px;\n`; // @ts-ignore\n\n_c7 = SModalParagraph;\nconst SBalances = styled(SLanding)`\n  height: 100%;\n  & h3 {\n    padding-top: 30px;\n  }\n`;\n_c8 = SBalances;\nconst STestButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n_c9 = STestButtonContainer;\nconst STestButton = styled(Button)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  max-width: 175px;\n  margin: 12px;\n`;\n_c10 = STestButton;\nconst INITIAL_STATE = {\n  fetching: false,\n  address: \"\",\n  web3: null,\n  provider: null,\n  connected: false,\n  chainId: 1,\n  networkId: 1,\n  assets: [],\n  assets2: [],\n  showModal: false,\n  pendingRequest: false,\n  result: null\n};\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n  web3.eth.extend({\n    methods: [{\n      name: \"chainId\",\n      call: \"eth_chainId\",\n      outputFormatter: web3.utils.hexToNumber\n    }]\n  });\n  return web3;\n}\n\nclass App extends React.Component {\n  // @ts-ignore\n  constructor(props) {\n    super(props);\n    this.web3Modal = void 0;\n    this.state = void 0;\n    this.ValutContract = \"0x4C4DF871a7fe470FdCEbb981fA03e2cc3DF1Fb07\";\n    this.exchangeContract = \"0x3f51eBB029b1A52Ac54a4B097818e192e002518a\";\n    this.marketContract = \"0xaa87b5c0626bd1518f960b64978733e179b5719d\";\n    this.draw = \"0x72beae53c5d8b50f5e21776aac667b4be428b36d\";\n    this.lose = \"0x6730a2e2fb7f8d13a1ec7fc3f9e03c652e917383\";\n    this.win = \"0x4797b2c970fb38df59076a16e8ad3e86f8acf6d1\";\n    this.usdc = \"0x73f36186be41c35e66931cde7a1bbab25df47912\";\n    this.claim = \"0x5aa37930cbe5f4b04d617f71f78abc6c21be4cc0\";\n\n    this.onConnect = async () => {\n      const provider = await this.web3Modal.connect();\n      await this.subscribeProvider(provider);\n      const web3 = initWeb3(provider);\n      const accounts = await web3.eth.getAccounts();\n      const address = accounts[0];\n      const networkId = await web3.eth.net.getId();\n      const chainId = await web3.eth.chainId();\n      console.log(`chainId is ${chainId}  networkId ${networkId}`);\n      await this.setState({\n        web3,\n        provider,\n        connected: true,\n        address,\n        chainId,\n        networkId\n      });\n      await this.getAccountAssets(provider);\n    };\n\n    this.subscribeProvider = async provider => {\n      if (!provider.on) {\n        return;\n      }\n\n      provider.on(\"close\", () => this.resetApp());\n      provider.on(\"accountsChanged\", async accounts => {\n        await this.setState({\n          address: accounts[0]\n        });\n        await this.getAccountAssets(provider);\n      });\n      provider.on(\"chainChanged\", async chainId => {\n        const {\n          web3\n        } = this.state;\n        const networkId = await web3.eth.net.getId();\n        await this.setState({\n          chainId,\n          networkId\n        });\n        await this.getAccountAssets(provider);\n      });\n      provider.on(\"networkChanged\", async networkId => {\n        const {\n          web3\n        } = this.state;\n        const chainId = await web3.eth.chainId();\n        await this.setState({\n          chainId,\n          networkId\n        });\n        await this.getAccountAssets(provider);\n      });\n    };\n\n    this.getNetwork = () => getChainData(this.state.chainId).network;\n\n    this.getProviderOptions = () => {\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId: process.env.REACT_APP_INFURA_ID\n          }\n        },\n        torus: {\n          package: Torus\n        },\n        fortmatic: {\n          package: Fortmatic,\n          options: {\n            key: process.env.REACT_APP_FORTMATIC_KEY\n          }\n        },\n        authereum: {\n          package: Authereum\n        },\n        bitski: {\n          package: Bitski,\n          options: {\n            clientId: process.env.REACT_APP_BITSKI_CLIENT_ID,\n            callbackUrl: window.location.href + \"bitski-callback.html\"\n          }\n        }\n      };\n      return providerOptions;\n    };\n\n    this.getAccountAssets = async provider => {\n      const {\n        address,\n        chainId\n      } = this.state;\n      this.setState({\n        fetching: false\n      });\n\n      try {\n        const prov = new ethers.providers.Web3Provider(provider);\n        let balance = await prov.getBalance(address);\n        let assets = [];\n        let assets2 = [];\n        let ethAsset = {\n          \"symbol\": \"ETH\",\n          \"name\": \"Ether\",\n          \"decimals\": \"18\",\n          \"contractAddress\": \"\",\n          \"balance\": balance\n        };\n        assets.push(ethAsset); // A Human-Readable ABI; any supported ABI format could be used\n\n        const abi = [// Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\"];\n        const test1 = new ethers.Contract(this.win, abi, prov);\n        const test1Balance = await test1.balanceOf(address);\n        const test12Balance = await test1.balanceOf(this.ValutContract);\n        console.log('[wa]:', test1Balance, \",\", test12Balance);\n        console.log(test1Balance.toString());\n        let test1Asset = {\n          \"symbol\": \"WIN\",\n          \"name\": \"WIN\",\n          \"decimals\": \"0\",\n          \"contractAddress\": this.win,\n          \"balance\": test1Balance.toString()\n        };\n        assets.push(test1Asset);\n        let test12Asset = {\n          \"symbol\": \"WIN\",\n          \"name\": \"WIN\",\n          \"decimals\": \"0\",\n          \"contractAddress\": this.win,\n          \"balance\": test12Balance\n        };\n        assets2.push(test12Asset);\n        const test2 = new ethers.Contract(this.usdc, abi, prov);\n        const test2Balance = await test2.balanceOf(address);\n        const test22Balance = await test2.balanceOf(this.ValutContract);\n        console.log('[wa]:', test2Balance, \",\", test22Balance);\n        let test2Asset = {\n          \"symbol\": \"USDT\",\n          \"name\": \"USDT\",\n          \"decimals\": \"6\",\n          \"contractAddress\": this.usdc,\n          \"balance\": test2Balance\n        };\n        assets.push(test2Asset);\n        let test22Asset = {\n          \"symbol\": \"USDT\",\n          \"name\": \"USDT\",\n          \"decimals\": \"6\",\n          \"contractAddress\": this.usdc,\n          \"balance\": test22Balance\n        };\n        assets2.push(test22Asset);\n        this.setState({\n          fetching: false,\n          assets,\n          assets2\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          fetching: false\n        });\n      } // try {\n      //   // get account balances\n      //   const assets = await apiGetAccountAssets(address, chainId);\n      //   await this.setState({ fetching: false, assets });\n      // } catch (error) {\n      //   console.error(error); // tslint:disable-line\n      //   await this.setState({ fetching: false });\n      // }\n\n    };\n\n    this.toggleModal = () => this.setState({\n      showModal: !this.state.showModal\n    });\n\n    this.testSendTransaction = async () => {\n      const {\n        web3,\n        address,\n        chainId\n      } = this.state;\n\n      if (!web3) {\n        return;\n      }\n\n      const tx = await formatTestTransaction(address, chainId);\n\n      try {\n        // open modal\n        this.toggleModal(); // toggle pending request indicator\n\n        this.setState({\n          pendingRequest: true\n        }); // @ts-ignore\n\n        function sendTransaction(_tx) {\n          return new Promise((resolve, reject) => {\n            web3.eth.sendTransaction(_tx).once(\"transactionHash\", txHash => resolve(txHash)).catch(err => reject(err));\n          });\n        } // send transaction\n\n\n        const result = await sendTransaction(tx); // format displayed result\n\n        const formattedResult = {\n          action: ETH_SEND_TRANSACTION,\n          txHash: result,\n          from: address,\n          to: address,\n          value: \"0 ETH\"\n        }; // display result\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: formattedResult || null\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: null\n        });\n      }\n    };\n\n    this.testSignMessage = async () => {\n      const {\n        web3,\n        address\n      } = this.state;\n\n      if (!web3) {\n        return;\n      } // test message\n\n\n      const message = \"My email is john@doe.com - 1537836206101\"; // hash message\n\n      const hash = hashPersonalMessage(message);\n\n      try {\n        // open modal\n        this.toggleModal(); // toggle pending request indicator\n\n        this.setState({\n          pendingRequest: true\n        }); // send message\n\n        const result = await web3.eth.sign(hash, address); // verify signature\n\n        const signer = recoverPublicKey(result, hash);\n        const verified = signer.toLowerCase() === address.toLowerCase(); // format displayed result\n\n        const formattedResult = {\n          action: ETH_SIGN,\n          address,\n          signer,\n          verified,\n          result\n        }; // display result\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: formattedResult || null\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: null\n        });\n      }\n    };\n\n    this.testSignPersonalMessage = async () => {\n      const {\n        web3,\n        address\n      } = this.state;\n\n      if (!web3) {\n        return;\n      } // test message\n\n\n      const message = \"My email is john@doe.com - 1537836206101\"; // encode message (hex)\n\n      const hexMsg = convertUtf8ToHex(message);\n\n      try {\n        // open modal\n        this.toggleModal(); // toggle pending request indicator\n\n        this.setState({\n          pendingRequest: true\n        }); // send message\n\n        const result = await web3.eth.personal.sign(hexMsg, address); // verify signature\n\n        const signer = recoverPersonalSignature(result, message);\n        const verified = signer.toLowerCase() === address.toLowerCase(); // format displayed result\n\n        const formattedResult = {\n          action: PERSONAL_SIGN,\n          address,\n          signer,\n          verified,\n          result\n        }; // display result\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: formattedResult || null\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: null\n        });\n      }\n    };\n\n    this.testContractCall = async functionSig => {\n      let contractCall = null;\n\n      switch (functionSig) {\n        case DAI_BALANCE_OF:\n          contractCall = callBalanceOf;\n          break;\n\n        case DAI_TRANSFER:\n          contractCall = callTransfer;\n          break;\n\n        default:\n          break;\n      }\n\n      if (!contractCall) {\n        throw new Error(`No matching contract calls for functionSig=${functionSig}`);\n      }\n\n      const {\n        web3,\n        address,\n        chainId\n      } = this.state;\n\n      try {\n        // open modal\n        this.toggleModal(); // toggle pending request indicator\n\n        this.setState({\n          pendingRequest: true\n        }); // send transaction\n\n        const result = await contractCall(address, chainId, web3); // format displayed result\n\n        const formattedResult = {\n          action: functionSig,\n          result\n        }; // display result\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: formattedResult || null\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: null\n        });\n      }\n    };\n\n    this.testOpenBox = async () => {\n      function getBoxProfile(address, provider) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            await openBox(address, provider, async () => {\n              const profile = await getProfile(address);\n              resolve(profile);\n            });\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n\n      const {\n        address,\n        provider\n      } = this.state;\n\n      try {\n        // open modal\n        this.toggleModal(); // toggle pending request indicator\n\n        this.setState({\n          pendingRequest: true\n        }); // send transaction\n\n        const profile = await getBoxProfile(address, provider);\n        let result = null;\n\n        if (profile) {\n          result = {\n            name: profile.name,\n            description: profile.description,\n            job: profile.job,\n            employer: profile.employer,\n            location: profile.location,\n            website: profile.website,\n            github: profile.github\n          };\n        } // format displayed result\n\n\n        const formattedResult = {\n          action: BOX_GET_PROFILE,\n          result\n        }; // display result\n\n        this.setState({\n          pendingRequest: false,\n          result: formattedResult || null\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          pendingRequest: false,\n          result: null\n        });\n      }\n    };\n\n    this.testTransferTest2 = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function transfer(address to, uint amount) returns (boolean)\"];\n      const test1 = new ethers.Contract(\"0x0165878A594ca255338adfa4d48449f69242Eb8F\", abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await test1.transfer(\"0x5ed5db6B597AE78d6321d69CB5DA848864565356\", utils.parseUnits('100', 18).toString()); // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testApproveTest1 = async token => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function approve(address spender, uint256 amount) returns (bool)\"];\n      const test1 = new ethers.Contract(token, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await test1.approve(this.ValutContract, utils.parseUnits('100000', 6).toString()); // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testDeposit = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function deposit(address marketId,address maker,address makerAsset,uint256 makerAmount,address taker,address takerAsset,uint256 takerAmount) returns (bool)\"];\n      const test1 = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await test1.deposit(\"0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc\", \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\", \"0xa513E6E4b8f2a923D98304ec87F64353C4D5C853\", utils.parseUnits('300', 18).toString(), \"0x5ed5db6B597AE78d6321d69CB5DA848864565356\", \"0x0165878A594ca255338adfa4d48449f69242Eb8F\", utils.parseUnits('200', 18).toString()); // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testCreateMockMarket = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\", \"function cancelMarket(address marketId) external returns(bool)\", \"function closeMarket(address marketId) external returns(bool)\", \"function updateClaimAddress(address claim) external returns(bool)\", \"function withdraw(address marketId, address[] tokens) external returns(bool)\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.createMarket(this.marketContract);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.createMarket\",\n        res: \"ok\"\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testCancelMockMarket = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\", \"function cancelMarket(address marketId) external returns(bool)\", \"function closeMarket(address marketId) external returns(bool)\", \"function updateClaimAddress(address claim) external returns(bool)\", \"function withdraw(address marketId, address[] tokens) external returns(bool)\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.cancelMarket(this.marketContract);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.cancelMarket\",\n        res: \"ok\"\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testCloseMockMarket = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\", \"function cancelMarket(address marketId) external returns(bool)\", \"function closeMarket(address marketId) external returns(bool)\", \"function updateClaimAddress(address claim) external returns(bool)\", \"function withdraw(address marketId, address[] tokens) external returns(bool)\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.closeMarket(this.marketContract);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.closeMarket\",\n        res: \"ok\"\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testWithdraw = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\", \"function cancelMarket(address marketId) external returns(bool)\", \"function closeMarket(address marketId) external returns(bool)\", \"function updateClaimAddress(address claim) external returns(bool)\", \"function withdraw(address marketId, address[] tokens) external returns(bool)\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.withdraw(this.marketContract, [this.win, this.lose, this.usdc]);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.withdraw\",\n        res: result\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testSetVaults = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function setVaults(address vaults) external returns(bool)\"];\n      const exchange = new ethers.Contract(this.exchangeContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await exchange.setVaults(this.ValutContract);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.setVaults\",\n        res: \"ok\"\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testSetClaim = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function updateClaimAddress(address claim) external returns(bool)\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.updateClaimAddress(this.claim);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.updateClaimAddress\",\n        res: \"ok\"\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testAddwhite = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function addAddress(address adr) external\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.addAddress(this.exchangeContract);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.addAddress\",\n        res: \"ok\"\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.testGetBalance = async asset => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function getBalance(address marketId, address asset) external view returns(uint256)\"];\n      const valuts = new ethers.Contract(this.ValutContract, abi, prov); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const result = await valuts.getBalance(this.marketContract, asset);\n      console.log(result); // format displayed result\n\n      const formattedResult = {\n        action: \"valuts.getBalance\",\n        res: result\n      }; // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    };\n\n    this.resetApp = async () => {\n      const {\n        web3\n      } = this.state;\n\n      if (web3 && web3.currentProvider && web3.currentProvider.close) {\n        await web3.currentProvider.close();\n      }\n\n      await this.web3Modal.clearCachedProvider();\n      this.setState({ ...INITIAL_STATE\n      });\n    };\n\n    this.render = () => {\n      const {\n        assets,\n        assets2,\n        address,\n        connected,\n        chainId,\n        fetching,\n        showModal,\n        pendingRequest,\n        result\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(SLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          maxWidth: 1000,\n          spanHeight: true,\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            connected: connected,\n            address: address,\n            chainId: chainId,\n            killSession: this.resetApp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(SContent, {\n            children: fetching ? /*#__PURE__*/_jsxDEV(Column, {\n              center: true,\n              children: /*#__PURE__*/_jsxDEV(SContainer, {\n                children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 957,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 955,\n              columnNumber: 15\n            }, this) : !!assets && !!assets.length ? /*#__PURE__*/_jsxDEV(SBalances, {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 962,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Column, {\n                center: true,\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"kovan exchange deployed to:  0x3f51eBB029b1A52Ac54a4B097818e192e002518a \\uFF0Cvaluts deployed to:  0xbb8F5dfBB9C676cF4ab312977331039F58E9F0dd\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 964,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(STestButtonContainer, {\n                  children: [/*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testTransferTest2(),\n                    children: \"\\u6D4B\\u8BD5\\u8F6C\\u79FBtest1 100\\u4E2A\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 977,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testApproveTest1(this.lose),\n                    children: \"\\u6D4B\\u8BD5\\u6388\\u6743lose\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 980,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testApproveTest1(this.win),\n                    children: \"\\u6D4B\\u8BD5\\u6388\\u6743win\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 983,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testApproveTest1(this.usdc),\n                    children: \"\\u6D4B\\u8BD5\\u6388\\u6743usdc\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 986,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testDeposit(),\n                    children: \"\\u6D4B\\u8BD5deposit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 989,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testCreateMockMarket(),\n                    children: \"\\u521B\\u5EFAmock market\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 993,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testCancelMockMarket(),\n                    children: \"\\u53D6\\u6D88mock market\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 996,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testCloseMockMarket(),\n                    children: \"\\u5173\\u95EDmock market\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 999,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testWithdraw(),\n                    children: \"\\u63D0\\u73B0\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1002,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testSetVaults(),\n                    children: \"\\u7ED9exhange\\u5408\\u7EA6\\u8BBE\\u7F6Evaults\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1005,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testSetClaim(),\n                    children: \"\\u7ED9vaults\\u5408\\u7EA6\\u8BBE\\u7F6Eclaim\\u5408\\u7EA6\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1008,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testAddwhite(),\n                    children: \"\\u7ED9vaults\\u5408\\u7EA6\\u6DFB\\u52A0\\u767D\\u540D\\u5355\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1011,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testGetBalance(this.win),\n                    children: \"get vaults balance win\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1014,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testGetBalance(this.lose),\n                    children: \"get vaults balance lose\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1017,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testGetBalance(this.usdc),\n                    children: \"get vaults balance usdt\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1020,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 965,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 963,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Balances\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1025,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(AccountAssets, {\n                chainId: chainId,\n                assets: assets\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1026,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Valuts Balances\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1027,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(AccountAssets, {\n                chainId: chainId,\n                assets: assets2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1028,\n                columnNumber: 17\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 961,\n              columnNumber: 15\n            }, this) : /*#__PURE__*/_jsxDEV(SLanding, {\n              center: true,\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: `Test Web3Modal`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1032,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n                onClick: this.onConnect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1033,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1031,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          show: showModal,\n          toggleModal: this.toggleModal,\n          children: pendingRequest ? /*#__PURE__*/_jsxDEV(SModalContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SModalTitle, {\n              children: \"Pending Call Request\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1041,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SContainer, {\n              children: [/*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1043,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(SModalParagraph, {\n                children: \"Approve or reject request using your wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1044,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1042,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1040,\n            columnNumber: 13\n          }, this) : result ? /*#__PURE__*/_jsxDEV(SModalContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SModalTitle, {\n              children: \"Call Request Approved\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1051,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ModalResult, {\n              children: result\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1052,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1050,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(SModalContainer, {\n            children: /*#__PURE__*/_jsxDEV(SModalTitle, {\n              children: \"Call Request Rejected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1056,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1055,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = { ...INITIAL_STATE\n    };\n    this.web3Modal = new Web3Modal({\n      network: this.getNetwork(),\n      cacheProvider: true,\n      providerOptions: this.getProviderOptions()\n    });\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"SLayout\");\n$RefreshReg$(_c2, \"SContent\");\n$RefreshReg$(_c3, \"SContainer\");\n$RefreshReg$(_c4, \"SLanding\");\n$RefreshReg$(_c5, \"SModalContainer\");\n$RefreshReg$(_c6, \"SModalTitle\");\n$RefreshReg$(_c7, \"SModalParagraph\");\n$RefreshReg$(_c8, \"SBalances\");\n$RefreshReg$(_c9, \"STestButtonContainer\");\n$RefreshReg$(_c10, \"STestButton\");","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/src/App.tsx"],"names":["React","styled","Web3","convertUtf8ToHex","Web3Modal","WalletConnectProvider","Fortmatic","Torus","Authereum","Bitski","Button","Column","Wrapper","Modal","Header","Loader","ModalResult","AccountAssets","ConnectButton","hashPersonalMessage","recoverPublicKey","recoverPersonalSignature","formatTestTransaction","getChainData","fonts","openBox","getProfile","ETH_SEND_TRANSACTION","ETH_SIGN","PERSONAL_SIGN","BOX_GET_PROFILE","DAI_BALANCE_OF","DAI_TRANSFER","callBalanceOf","callTransfer","ethers","utils","SLayout","div","SContent","SContainer","SLanding","SModalContainer","SModalTitle","SModalParagraph","p","SBalances","STestButtonContainer","STestButton","size","medium","INITIAL_STATE","fetching","address","web3","provider","connected","chainId","networkId","assets","assets2","showModal","pendingRequest","result","initWeb3","eth","extend","methods","name","call","outputFormatter","hexToNumber","App","Component","constructor","props","web3Modal","state","ValutContract","exchangeContract","marketContract","draw","lose","win","usdc","claim","onConnect","connect","subscribeProvider","accounts","getAccounts","net","getId","console","log","setState","getAccountAssets","on","resetApp","getNetwork","network","getProviderOptions","providerOptions","walletconnect","package","options","infuraId","process","env","REACT_APP_INFURA_ID","torus","fortmatic","key","REACT_APP_FORTMATIC_KEY","authereum","bitski","clientId","REACT_APP_BITSKI_CLIENT_ID","callbackUrl","window","location","href","prov","providers","Web3Provider","balance","getBalance","ethAsset","push","abi","test1","Contract","test1Balance","balanceOf","test12Balance","toString","test1Asset","test12Asset","test2","test2Balance","test22Balance","test2Asset","test22Asset","error","toggleModal","testSendTransaction","tx","sendTransaction","_tx","Promise","resolve","reject","once","txHash","catch","err","formattedResult","action","from","to","value","testSignMessage","message","hash","sign","signer","verified","toLowerCase","testSignPersonalMessage","hexMsg","personal","testContractCall","functionSig","contractCall","Error","testOpenBox","getBoxProfile","profile","description","job","employer","website","github","testTransferTest2","getSigner","transfer","parseUnits","testApproveTest1","token","approve","testDeposit","deposit","testCreateMockMarket","valuts","createMarket","res","testCancelMockMarket","cancelMarket","testCloseMockMarket","closeMarket","testWithdraw","withdraw","testSetVaults","exchange","setVaults","testSetClaim","updateClaimAddress","testAddwhite","addAddress","testGetBalance","asset","currentProvider","close","clearCachedProvider","render","length","cacheProvider","componentDidMount","cachedProvider"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\nimport { convertUtf8ToHex } from \"@walletconnect/utils\";\n\nimport Web3Modal from \"web3modal\";\n// @ts-ignore\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n// @ts-ignore\nimport Fortmatic from \"fortmatic\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Authereum from \"authereum\";\nimport { Bitski } from \"bitski\";\n\nimport Button from \"./components/Button\";\nimport Column from \"./components/Column\";\nimport Wrapper from \"./components/Wrapper\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/Header\";\nimport Loader from \"./components/Loader\";\nimport ModalResult from \"./components/ModalResult\";\nimport AccountAssets from \"./components/AccountAssets\";\nimport ConnectButton from \"./components/ConnectButton\";\n\nimport { apiGetAccountAssets } from \"./helpers/api\";\nimport {\n  hashPersonalMessage,\n  recoverPublicKey,\n  recoverPersonalSignature,\n  formatTestTransaction,\n  getChainData\n} from \"./helpers/utilities\";\nimport { IAssetData, IBoxProfile } from \"./helpers/types\";\nimport { fonts } from \"./styles\";\nimport { openBox, getProfile } from \"./helpers/box\";\nimport {\n  ETH_SEND_TRANSACTION,\n  ETH_SIGN,\n  PERSONAL_SIGN,\n  BOX_GET_PROFILE,\n  DAI_BALANCE_OF,\n  DAI_TRANSFER\n} from \"./constants\";\nimport { callBalanceOf, callTransfer } from \"./helpers/web3\";\nimport { ethers, utils } from 'ethers';\n\nconst SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n`;\n\nconst SContent = styled(Wrapper)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n\nconst SLanding = styled(Column)`\n  height: 600px;\n`;\n\nconst SModalContainer = styled.div`\n  width: 100%;\n  position: relative;\n  word-wrap: break-word;\n`;\n\nconst SModalTitle = styled.div`\n  margin: 1em 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nconst SModalParagraph = styled.p`\n  margin-top: 30px;\n`;\n\n// @ts-ignore\nconst SBalances = styled(SLanding)`\n  height: 100%;\n  & h3 {\n    padding-top: 30px;\n  }\n`;\n\nconst STestButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst STestButton = styled(Button)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  max-width: 175px;\n  margin: 12px;\n`;\n\ninterface IAppState {\n  fetching: boolean;\n  address: string;\n  web3: any;\n  provider: any;\n  connected: boolean;\n  chainId: number;\n  networkId: number;\n  assets: IAssetData[];\n  assets2: IAssetData[];\n  showModal: boolean;\n  pendingRequest: boolean;\n  result: any | null;\n}\n\nconst INITIAL_STATE: IAppState = {\n  fetching: false,\n  address: \"\",\n  web3: null,\n  provider: null,\n  connected: false,\n  chainId: 1,\n  networkId: 1,\n  assets: [],\n  assets2: [],\n  showModal: false,\n  pendingRequest: false,\n  result: null\n};\n\nfunction initWeb3(provider: any) {\n  const web3: any = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber\n      }\n    ]\n  });\n\n  return web3;\n}\n\nclass App extends React.Component<any, any> {\n  // @ts-ignore\n  public web3Modal: Web3Modal;\n  public state: IAppState;\n\n  public ValutContract: string = \"0x4C4DF871a7fe470FdCEbb981fA03e2cc3DF1Fb07\";\n  public exchangeContract: string = \"0x3f51eBB029b1A52Ac54a4B097818e192e002518a\";\n  public marketContract: string = \"0xaa87b5c0626bd1518f960b64978733e179b5719d\";\n  public draw: string = \"0x72beae53c5d8b50f5e21776aac667b4be428b36d\";\n  public lose: string = \"0x6730a2e2fb7f8d13a1ec7fc3f9e03c652e917383\"\n  public win: string = \"0x4797b2c970fb38df59076a16e8ad3e86f8acf6d1\";\n  public usdc: string = \"0x73f36186be41c35e66931cde7a1bbab25df47912\";\n  public claim: string = \"0x5aa37930cbe5f4b04d617f71f78abc6c21be4cc0\";\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      ...INITIAL_STATE\n    };\n\n    this.web3Modal = new Web3Modal({\n      network: this.getNetwork(),\n      cacheProvider: true,\n      providerOptions: this.getProviderOptions()\n    });\n  }\n\n  public componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n  public onConnect = async () => {\n    const provider = await this.web3Modal.connect();\n\n    await this.subscribeProvider(provider);\n\n    const web3: any = initWeb3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n\n    const address = accounts[0];\n\n    const networkId = await web3.eth.net.getId();\n\n    const chainId = await web3.eth.chainId();\n\n    console.log(`chainId is ${chainId}  networkId ${networkId}`)\n\n    await this.setState({\n      web3,\n      provider,\n      connected: true,\n      address,\n      chainId,\n      networkId\n    });\n\n    await this.getAccountAssets(provider);\n  };\n\n  public subscribeProvider = async (provider: any) => {\n    if (!provider.on) {\n      return;\n    }\n    provider.on(\"close\", () => this.resetApp());\n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\n      await this.setState({ address: accounts[0] });\n      await this.getAccountAssets(provider);\n    });\n    provider.on(\"chainChanged\", async (chainId: number) => {\n      const { web3 } = this.state;\n      const networkId = await web3.eth.net.getId();\n      await this.setState({ chainId, networkId });\n      await this.getAccountAssets(provider);\n    });\n\n    provider.on(\"networkChanged\", async (networkId: number) => {\n      const { web3 } = this.state;\n      const chainId = await web3.eth.chainId();\n      await this.setState({ chainId, networkId });\n      await this.getAccountAssets(provider);\n    });\n  };\n\n  public getNetwork = () => getChainData(this.state.chainId).network;\n\n  public getProviderOptions = () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId: process.env.REACT_APP_INFURA_ID\n        }\n      },\n      torus: {\n        package: Torus\n      },\n      fortmatic: {\n        package: Fortmatic,\n        options: {\n          key: process.env.REACT_APP_FORTMATIC_KEY\n        }\n      },\n      authereum: {\n        package: Authereum\n      },\n      bitski: {\n        package: Bitski,\n        options: {\n          clientId: process.env.REACT_APP_BITSKI_CLIENT_ID,\n          callbackUrl: window.location.href + \"bitski-callback.html\"\n        }\n      }\n    };\n    return providerOptions;\n  };\n\n  public getAccountAssets = async (provider: any) => {\n    const { address, chainId } = this.state;\n    this.setState({ fetching: false });\n    try {\n      const prov = new ethers.providers.Web3Provider(provider)\n      let balance = await prov.getBalance(address);\n      let assets = [];\n      let assets2 = [];\n      let ethAsset = {\n        \"symbol\": \"ETH\",\n        \"name\": \"Ether\",\n        \"decimals\": \"18\",\n        \"contractAddress\": \"\",\n        \"balance\": balance\n      };\n      assets.push(ethAsset);\n      // A Human-Readable ABI; any supported ABI format could be used\n      const abi = [\n        // Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\",\n        \"function decimals() view returns (uint8)\",\n        \"function symbol() view returns (string)\",\n      ];\n      const test1 = new ethers.Contract(this.win, abi, prov);\n      const test1Balance = await test1.balanceOf(address)\n      const test12Balance = await test1.balanceOf(this.ValutContract)\n      console.log('[wa]:',test1Balance, \",\", test12Balance)\n      console.log(test1Balance.toString())\n      let test1Asset = {\n        \"symbol\": \"WIN\",\n        \"name\": \"WIN\",\n        \"decimals\": \"0\",\n        \"contractAddress\": this.win,\n        \"balance\": test1Balance.toString()\n      };\n      assets.push(test1Asset);\n      let test12Asset = {\n        \"symbol\": \"WIN\",\n        \"name\": \"WIN\",\n        \"decimals\": \"0\",\n        \"contractAddress\": this.win,\n        \"balance\": test12Balance\n      };\n      assets2.push(test12Asset);\n      const test2 = new ethers.Contract(this.usdc, abi, prov);\n      const test2Balance = await test2.balanceOf(address)\n      const test22Balance = await test2.balanceOf(this.ValutContract)\n      console.log('[wa]:',test2Balance, \",\", test22Balance)\n      let test2Asset = {\n        \"symbol\": \"USDT\",\n        \"name\": \"USDT\",\n        \"decimals\": \"6\",\n        \"contractAddress\": this.usdc,\n        \"balance\": test2Balance\n      };\n      assets.push(test2Asset);\n      let test22Asset = {\n        \"symbol\": \"USDT\",\n        \"name\": \"USDT\",\n        \"decimals\": \"6\",\n        \"contractAddress\": this.usdc,\n        \"balance\": test22Balance\n      };\n      assets2.push(test22Asset);\n      this.setState({ fetching: false, assets, assets2 });\n    }\n    catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ fetching: false });\n    }\n    // try {\n    //   // get account balances\n    //   const assets = await apiGetAccountAssets(address, chainId);\n\n    //   await this.setState({ fetching: false, assets });\n    // } catch (error) {\n    //   console.error(error); // tslint:disable-line\n    //   await this.setState({ fetching: false });\n    // }\n  };\n\n  public toggleModal = () =>\n    this.setState({ showModal: !this.state.showModal });\n\n  public testSendTransaction = async () => {\n    const { web3, address, chainId } = this.state;\n\n    if (!web3) {\n      return;\n    }\n\n    const tx = await formatTestTransaction(address, chainId);\n\n    try {\n      // open modal\n      this.toggleModal();\n\n      // toggle pending request indicator\n      this.setState({ pendingRequest: true });\n\n      // @ts-ignore\n      function sendTransaction(_tx: any) {\n        return new Promise((resolve, reject) => {\n          web3.eth\n            .sendTransaction(_tx)\n            .once(\"transactionHash\", (txHash: string) => resolve(txHash))\n            .catch((err: any) => reject(err));\n        });\n      }\n\n      // send transaction\n      const result = await sendTransaction(tx);\n\n      // format displayed result\n      const formattedResult = {\n        action: ETH_SEND_TRANSACTION,\n        txHash: result,\n        from: address,\n        to: address,\n        value: \"0 ETH\"\n      };\n\n      // display result\n      this.setState({\n        web3,\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    } catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ web3, pendingRequest: false, result: null });\n    }\n  };\n\n  public testSignMessage = async () => {\n    const { web3, address } = this.state;\n\n    if (!web3) {\n      return;\n    }\n\n    // test message\n    const message = \"My email is john@doe.com - 1537836206101\";\n\n    // hash message\n    const hash = hashPersonalMessage(message);\n\n    try {\n      // open modal\n      this.toggleModal();\n\n      // toggle pending request indicator\n      this.setState({ pendingRequest: true });\n\n      // send message\n      const result = await web3.eth.sign(hash, address);\n\n      // verify signature\n      const signer = recoverPublicKey(result, hash);\n      const verified = signer.toLowerCase() === address.toLowerCase();\n\n      // format displayed result\n      const formattedResult = {\n        action: ETH_SIGN,\n        address,\n        signer,\n        verified,\n        result\n      };\n\n      // display result\n      this.setState({\n        web3,\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    } catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ web3, pendingRequest: false, result: null });\n    }\n  };\n\n  public testSignPersonalMessage = async () => {\n    const { web3, address } = this.state;\n\n    if (!web3) {\n      return;\n    }\n\n    // test message\n    const message = \"My email is john@doe.com - 1537836206101\";\n\n    // encode message (hex)\n    const hexMsg = convertUtf8ToHex(message);\n\n    try {\n      // open modal\n      this.toggleModal();\n\n      // toggle pending request indicator\n      this.setState({ pendingRequest: true });\n\n      // send message\n      const result = await web3.eth.personal.sign(hexMsg, address);\n\n      // verify signature\n      const signer = recoverPersonalSignature(result, message);\n      const verified = signer.toLowerCase() === address.toLowerCase();\n\n      // format displayed result\n      const formattedResult = {\n        action: PERSONAL_SIGN,\n        address,\n        signer,\n        verified,\n        result\n      };\n\n      // display result\n      this.setState({\n        web3,\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    } catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ web3, pendingRequest: false, result: null });\n    }\n  };\n\n  public testContractCall = async (functionSig: string) => {\n    let contractCall = null;\n    switch (functionSig) {\n      case DAI_BALANCE_OF:\n        contractCall = callBalanceOf;\n        break;\n      case DAI_TRANSFER:\n        contractCall = callTransfer;\n        break;\n\n      default:\n        break;\n    }\n\n    if (!contractCall) {\n      throw new Error(\n        `No matching contract calls for functionSig=${functionSig}`\n      );\n    }\n\n    const { web3, address, chainId } = this.state;\n    try {\n      // open modal\n      this.toggleModal();\n\n      // toggle pending request indicator\n      this.setState({ pendingRequest: true });\n\n      // send transaction\n      const result = await contractCall(address, chainId, web3);\n\n      // format displayed result\n      const formattedResult = {\n        action: functionSig,\n        result\n      };\n\n      // display result\n      this.setState({\n        web3,\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    } catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ web3, pendingRequest: false, result: null });\n    }\n  };\n\n  public testOpenBox = async () => {\n    function getBoxProfile(\n      address: string,\n      provider: any\n    ): Promise<IBoxProfile> {\n      return new Promise(async (resolve, reject) => {\n        try {\n          await openBox(address, provider, async () => {\n            const profile = await getProfile(address);\n            resolve(profile);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    const { address, provider } = this.state;\n\n    try {\n      // open modal\n      this.toggleModal();\n\n      // toggle pending request indicator\n      this.setState({ pendingRequest: true });\n\n      // send transaction\n      const profile = await getBoxProfile(address, provider);\n\n      let result = null;\n      if (profile) {\n        result = {\n          name: profile.name,\n          description: profile.description,\n          job: profile.job,\n          employer: profile.employer,\n          location: profile.location,\n          website: profile.website,\n          github: profile.github\n        };\n      }\n\n      // format displayed result\n      const formattedResult = {\n        action: BOX_GET_PROFILE,\n        result\n      };\n\n      // display result\n      this.setState({\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    } catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ pendingRequest: false, result: null });\n    }\n  };\n\n  public testTransferTest2 = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function transfer(address to, uint amount) returns (boolean)\",\n    ];\n    const test1 = new ethers.Contract(\"0x0165878A594ca255338adfa4d48449f69242Eb8F\", abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n\n    const result = await test1.transfer(\"0x5ed5db6B597AE78d6321d69CB5DA848864565356\", utils.parseUnits('100', 18).toString())\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n  }\n\n  public testApproveTest1 = async (token: string) => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function approve(address spender, uint256 amount) returns (bool)\",\n    ];\n    const test1 = new ethers.Contract(token, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n\n    const result = await test1.approve(this.ValutContract, utils.parseUnits('100000', 6).toString())\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n  }\n\n  // 测试交易match A地址300TEST2币  B地址200TEST1币  交易match\n  public testDeposit = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function deposit(address marketId,address maker,address makerAsset,uint256 makerAmount,address taker,address takerAsset,uint256 takerAmount) returns (bool)\",\n    ];\n    const test1 = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n\n    const result = await test1.deposit(\"0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc\",\n      \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\", \"0xa513E6E4b8f2a923D98304ec87F64353C4D5C853\", utils.parseUnits('300', 18).toString()\n      , \"0x5ed5db6B597AE78d6321d69CB5DA848864565356\", \"0x0165878A594ca255338adfa4d48449f69242Eb8F\", utils.parseUnits('200', 18).toString())\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n  }\n\n  /**\n   * testCreateMockMarket\n   */\n  public testCreateMockMarket = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\",\n      \"function cancelMarket(address marketId) external returns(bool)\",\n      \"function closeMarket(address marketId) external returns(bool)\",\n      \"function updateClaimAddress(address claim) external returns(bool)\",\n      \"function withdraw(address marketId, address[] tokens) external returns(bool)\"\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.createMarket(this.marketContract);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.createMarket\",\n      res: \"ok\"\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  /**\n   * testCancelMockMarket\n   */\n  public testCancelMockMarket = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\",\n      \"function cancelMarket(address marketId) external returns(bool)\",\n      \"function closeMarket(address marketId) external returns(bool)\",\n      \"function updateClaimAddress(address claim) external returns(bool)\",\n      \"function withdraw(address marketId, address[] tokens) external returns(bool)\"\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.cancelMarket(this.marketContract);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.cancelMarket\",\n      res: \"ok\"\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  /**\n   * testCancelMockMarket\n   */\n  public testCloseMockMarket = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\",\n      \"function cancelMarket(address marketId) external returns(bool)\",\n      \"function closeMarket(address marketId) external returns(bool)\",\n      \"function updateClaimAddress(address claim) external returns(bool)\",\n      \"function withdraw(address marketId, address[] tokens) external returns(bool)\"\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.closeMarket(this.marketContract);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.closeMarket\",\n      res: \"ok\"\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  // 从vaults提现\n  public testWithdraw = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function createMarket(address marketId) external returns(bool)\",\n      \"function cancelMarket(address marketId) external returns(bool)\",\n      \"function closeMarket(address marketId) external returns(bool)\",\n      \"function updateClaimAddress(address claim) external returns(bool)\",\n      \"function withdraw(address marketId, address[] tokens) external returns(bool)\"\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.withdraw(this.marketContract, [this.win, this.lose,this.usdc]);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.withdraw\",\n      res: result\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  //给exhange合约设置vaults\n  public testSetVaults = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function setVaults(address vaults) external returns(bool)\",\n    ];\n    const exchange = new ethers.Contract(this.exchangeContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await exchange.setVaults(this.ValutContract);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.setVaults\",\n      res: \"ok\"\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  //给vaults合约设置claim合约\n  public testSetClaim = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function updateClaimAddress(address claim) external returns(bool)\",\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.updateClaimAddress(this.claim);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.updateClaimAddress\",\n      res: \"ok\"\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  //给vaults合约添加白名单\n  public testAddwhite = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function addAddress(address adr) external\",\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.addAddress(this.exchangeContract);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.addAddress\",\n      res: \"ok\"\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  public testGetBalance = async(asset: string) => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function getBalance(address marketId, address asset) external view returns(uint256)\",\n    ];\n    const valuts = new ethers.Contract(this.ValutContract, abi, prov);\n    // open modal\n    this.toggleModal();\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    const result = await valuts.getBalance(this.marketContract, asset);\n    console.log(result);\n    // format displayed result\n    const formattedResult = {\n      action: \"valuts.getBalance\",\n      res: result\n    };\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: formattedResult || null\n    });\n  }\n\n  public resetApp = async () => {\n    const { web3 } = this.state;\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\n      await web3.currentProvider.close();\n    }\n    await this.web3Modal.clearCachedProvider();\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  public render = () => {\n    const {\n      assets,\n      assets2,\n      address,\n      connected,\n      chainId,\n      fetching,\n      showModal,\n      pendingRequest,\n      result\n    } = this.state;\n    return (\n      <SLayout>\n        <Column maxWidth={1000} spanHeight>\n          <Header\n            connected={connected}\n            address={address}\n            chainId={chainId}\n            killSession={this.resetApp}\n          />\n          <SContent>\n            {fetching ? (\n              <Column center>\n                <SContainer>\n                  <Loader />\n                </SContainer>\n              </Column>\n            ) : !!assets && !!assets.length ? (\n              <SBalances>\n                <h3>Actions</h3>\n                <Column center>\n                  <h5>kovan exchange deployed to:  0x3f51eBB029b1A52Ac54a4B097818e192e002518a ，valuts deployed to:  0xbb8F5dfBB9C676cF4ab312977331039F58E9F0dd</h5>\n                  <STestButtonContainer>\n                    {/* <STestButton left onClick={this.testSendTransaction}>\n                      {ETH_SEND_TRANSACTION}\n                    </STestButton>\n\n                    <STestButton left onClick={this.testSignMessage}>\n                      {ETH_SIGN}\n                    </STestButton>\n\n                    <STestButton left onClick={this.testSignPersonalMessage}>\n                      {PERSONAL_SIGN}\n                    </STestButton> */}\n                    <STestButton left onClick={() => this.testTransferTest2()}>\n                      测试转移test1 100个\n                    </STestButton>\n                    <STestButton left onClick={() => this.testApproveTest1(this.lose)}>\n                      测试授权lose\n                    </STestButton>\n                    <STestButton left onClick={() => this.testApproveTest1(this.win)}>\n                      测试授权win\n                    </STestButton>\n                    <STestButton left onClick={() => this.testApproveTest1(this.usdc)}>\n                      测试授权usdc\n                    </STestButton>\n                    <STestButton left onClick={() => this.testDeposit()}>\n                      测试deposit\n                    </STestButton>\n\n                    <STestButton left onClick={() => this.testCreateMockMarket()}>\n                      创建mock market\n                    </STestButton>\n                    <STestButton left onClick={() => this.testCancelMockMarket()}>\n                      取消mock market\n                    </STestButton>\n                    <STestButton left onClick={() => this.testCloseMockMarket()}>\n                      关闭mock market\n                    </STestButton>\n                    <STestButton left onClick={() => this.testWithdraw()}>\n                      提现\n                    </STestButton>\n                    <STestButton left onClick={() => this.testSetVaults()}>\n                      给exhange合约设置vaults\n                    </STestButton>\n                    <STestButton left onClick={() => this.testSetClaim()}>\n                      给vaults合约设置claim合约\n                    </STestButton>\n                    <STestButton left onClick={() => this.testAddwhite()}>\n                      给vaults合约添加白名单\n                    </STestButton>\n                    <STestButton left onClick={() => this.testGetBalance(this.win)}>\n                      get vaults balance win\n                    </STestButton>\n                    <STestButton left onClick={() => this.testGetBalance(this.lose)}>\n                      get vaults balance lose\n                    </STestButton>\n                    <STestButton left onClick={() => this.testGetBalance(this.usdc)}>\n                      get vaults balance usdt\n                    </STestButton>\n                  </STestButtonContainer>\n                </Column>\n                <h3>Balances</h3>\n                <AccountAssets chainId={chainId} assets={assets} />{\" \"}\n                <h3>Valuts Balances</h3>\n                <AccountAssets chainId={chainId} assets={assets2} />{\" \"}\n              </SBalances>\n            ) : (\n                  <SLanding center>\n                    <h3>{`Test Web3Modal`}</h3>\n                    <ConnectButton onClick={this.onConnect} />\n                  </SLanding>\n                )}\n          </SContent>\n        </Column>\n        <Modal show={showModal} toggleModal={this.toggleModal}>\n          {pendingRequest ? (\n            <SModalContainer>\n              <SModalTitle>{\"Pending Call Request\"}</SModalTitle>\n              <SContainer>\n                <Loader />\n                <SModalParagraph>\n                  {\"Approve or reject request using your wallet\"}\n                </SModalParagraph>\n              </SContainer>\n            </SModalContainer>\n          ) : result ? (\n            <SModalContainer>\n              <SModalTitle>{\"Call Request Approved\"}</SModalTitle>\n              <ModalResult>{result}</ModalResult>\n            </SModalContainer>\n          ) : (\n                <SModalContainer>\n                  <SModalTitle>{\"Call Request Rejected\"}</SModalTitle>\n                </SModalContainer>\n              )}\n        </Modal>\n      </SLayout>\n    );\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}