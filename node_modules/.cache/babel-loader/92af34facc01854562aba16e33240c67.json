{"ast":null,"code":"/**\n * Automatically handles finalizing the oauth sign in process with the Bitski SDK\n */\nexport function processCallback() {\n  if (window.opener) {\n    notifyOpener(window.location);\n  } else {\n    throw new Error('Parent window could not be found');\n  }\n}\n/**\n * Notifies the opener when in a popup\n * @param url the url that contains the query params\n */\n\nfunction notifyOpener(url) {\n  if (window.opener) {\n    if (url) {\n      // parse url to get state\n      const data = parseUrlParams(url);\n\n      if (data.state) {\n        const name = `popupCallback_${data.state}`;\n        const callback = window.opener[name];\n\n        if (callback) {\n          callback(url);\n        } else {\n          throw new Error('No callback found on opener');\n        }\n      } else {\n        throw new Error('No state found in response');\n      }\n    }\n  } else {\n    throw new Error('No window.opener');\n  }\n}\n/**\n * Extracts query params from the hash of the url\n * @param url the url to parse\n */\n\n\nexport function parseUrlParams(url) {\n  let params;\n\n  if (url.href.includes('#')) {\n    params = extractQuery(url.hash);\n  } else if (url.href.includes('?')) {\n    params = url.search.split('?').pop();\n  }\n\n  if (!params) {\n    throw new Error('No params found in result');\n  }\n\n  return params.split('&').reduce((prev, item) => {\n    const [key, value] = item.split('=');\n\n    if (key && value) {\n      prev[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n\n    return prev;\n  }, {});\n}\n\nfunction extractQuery(url) {\n  if (!url.includes('#')) {\n    throw new Error('No params found in result');\n  }\n\n  return url.split('#').pop();\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/utils/callback.js"],"names":["processCallback","window","opener","notifyOpener","location","Error","url","data","parseUrlParams","state","name","callback","params","href","includes","extractQuery","hash","search","split","pop","reduce","prev","item","key","value","decodeURIComponent"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,eAAT,GAA2B;AAC9B,MAAIC,MAAM,CAACC,MAAX,EAAmB;AACfC,IAAAA,YAAY,CAACF,MAAM,CAACG,QAAR,CAAZ;AACH,GAFD,MAGK;AACD,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACH;AACJ;AACD;AACA;AACA;AACA;;AACA,SAASF,YAAT,CAAsBG,GAAtB,EAA2B;AACvB,MAAIL,MAAM,CAACC,MAAX,EAAmB;AACf,QAAII,GAAJ,EAAS;AACL;AACA,YAAMC,IAAI,GAAGC,cAAc,CAACF,GAAD,CAA3B;;AACA,UAAIC,IAAI,CAACE,KAAT,EAAgB;AACZ,cAAMC,IAAI,GAAI,iBAAgBH,IAAI,CAACE,KAAM,EAAzC;AACA,cAAME,QAAQ,GAAGV,MAAM,CAACC,MAAP,CAAcQ,IAAd,CAAjB;;AACA,YAAIC,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAACL,GAAD,CAAR;AACH,SAFD,MAGK;AACD,gBAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;AACH;AACJ,OATD,MAUK;AACD,cAAM,IAAIA,KAAJ,CAAU,4BAAV,CAAN;AACH;AACJ;AACJ,GAlBD,MAmBK;AACD,UAAM,IAAIA,KAAJ,CAAU,kBAAV,CAAN;AACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,OAAO,SAASG,cAAT,CAAwBF,GAAxB,EAA6B;AAChC,MAAIM,MAAJ;;AACA,MAAIN,GAAG,CAACO,IAAJ,CAASC,QAAT,CAAkB,GAAlB,CAAJ,EAA4B;AACxBF,IAAAA,MAAM,GAAGG,YAAY,CAACT,GAAG,CAACU,IAAL,CAArB;AACH,GAFD,MAGK,IAAIV,GAAG,CAACO,IAAJ,CAASC,QAAT,CAAkB,GAAlB,CAAJ,EAA4B;AAC7BF,IAAAA,MAAM,GAAGN,GAAG,CAACW,MAAJ,CAAWC,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,EAAT;AACH;;AACD,MAAI,CAACP,MAAL,EAAa;AACT,UAAM,IAAIP,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,SAAOO,MAAM,CAACM,KAAP,CAAa,GAAb,EAAkBE,MAAlB,CAAyB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC5C,UAAM,CAACC,GAAD,EAAMC,KAAN,IAAeF,IAAI,CAACJ,KAAL,CAAW,GAAX,CAArB;;AACA,QAAIK,GAAG,IAAIC,KAAX,EAAkB;AACdH,MAAAA,IAAI,CAACI,kBAAkB,CAACF,GAAD,CAAnB,CAAJ,GAAgCE,kBAAkB,CAACD,KAAD,CAAlD;AACH;;AACD,WAAOH,IAAP;AACH,GANM,EAMJ,EANI,CAAP;AAOH;;AACD,SAASN,YAAT,CAAsBT,GAAtB,EAA2B;AACvB,MAAI,CAACA,GAAG,CAACQ,QAAJ,CAAa,GAAb,CAAL,EAAwB;AACpB,UAAM,IAAIT,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,SAAOC,GAAG,CAACY,KAAJ,CAAU,GAAV,EAAeC,GAAf,EAAP;AACH","sourcesContent":["/**\n * Automatically handles finalizing the oauth sign in process with the Bitski SDK\n */\nexport function processCallback() {\n    if (window.opener) {\n        notifyOpener(window.location);\n    }\n    else {\n        throw new Error('Parent window could not be found');\n    }\n}\n/**\n * Notifies the opener when in a popup\n * @param url the url that contains the query params\n */\nfunction notifyOpener(url) {\n    if (window.opener) {\n        if (url) {\n            // parse url to get state\n            const data = parseUrlParams(url);\n            if (data.state) {\n                const name = `popupCallback_${data.state}`;\n                const callback = window.opener[name];\n                if (callback) {\n                    callback(url);\n                }\n                else {\n                    throw new Error('No callback found on opener');\n                }\n            }\n            else {\n                throw new Error('No state found in response');\n            }\n        }\n    }\n    else {\n        throw new Error('No window.opener');\n    }\n}\n/**\n * Extracts query params from the hash of the url\n * @param url the url to parse\n */\nexport function parseUrlParams(url) {\n    let params;\n    if (url.href.includes('#')) {\n        params = extractQuery(url.hash);\n    }\n    else if (url.href.includes('?')) {\n        params = url.search.split('?').pop();\n    }\n    if (!params) {\n        throw new Error('No params found in result');\n    }\n    return params.split('&').reduce((prev, item) => {\n        const [key, value] = item.split('=');\n        if (key && value) {\n            prev[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n        return prev;\n    }, {});\n}\nfunction extractQuery(url) {\n    if (!url.includes('#')) {\n        throw new Error('No params found in result');\n    }\n    return url.split('#').pop();\n}\n"]},"metadata":{},"sourceType":"module"}