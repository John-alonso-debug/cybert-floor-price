{"ast":null,"code":"export var ProviderErrorCode;\n\n(function (ProviderErrorCode) {\n  // Thrown when accessing subscription features when they are disabled.\n  ProviderErrorCode[ProviderErrorCode[\"SubscriptionsUnavailable\"] = 4000] = \"SubscriptionsUnavailable\"; // Thrown when request is missing required params or data\n\n  ProviderErrorCode[ProviderErrorCode[\"InvalidRequest\"] = 4001] = \"InvalidRequest\";\n})(ProviderErrorCode || (ProviderErrorCode = {}));\n\nexport class ProviderError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.name = 'ProviderError'; // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProviderError);\n    }\n\n    this.code = code;\n  }\n\n  static SubscriptionsUnavailable() {\n    return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);\n  }\n\n  static InvalidRequest(reason) {\n    return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski-provider/dist/errors/provider-error.js"],"names":["ProviderErrorCode","ProviderError","Error","constructor","message","code","name","captureStackTrace","SubscriptionsUnavailable","InvalidRequest","reason"],"mappings":"AAAA,OAAO,IAAIA,iBAAJ;;AACP,CAAC,UAAUA,iBAAV,EAA6B;AAC1B;AACAA,EAAAA,iBAAiB,CAACA,iBAAiB,CAAC,0BAAD,CAAjB,GAAgD,IAAjD,CAAjB,GAA0E,0BAA1E,CAF0B,CAG1B;;AACAA,EAAAA,iBAAiB,CAACA,iBAAiB,CAAC,gBAAD,CAAjB,GAAsC,IAAvC,CAAjB,GAAgE,gBAAhE;AACH,CALD,EAKGA,iBAAiB,KAAKA,iBAAiB,GAAG,EAAzB,CALpB;;AAMA,OAAO,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AACrCC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACvB,UAAMD,OAAN;AACA,SAAKE,IAAL,GAAY,eAAZ,CAFuB,CAGvB;;AACA,QAAIJ,KAAK,CAACK,iBAAV,EAA6B;AACzBL,MAAAA,KAAK,CAACK,iBAAN,CAAwB,IAAxB,EAA8BN,aAA9B;AACH;;AACD,SAAKI,IAAL,GAAYA,IAAZ;AACH;;AAC8B,SAAxBG,wBAAwB,GAAG;AAC9B,WAAO,IAAIP,aAAJ,CAAkB,uEAAlB,EAA2FD,iBAAiB,CAACQ,wBAA7G,CAAP;AACH;;AACoB,SAAdC,cAAc,CAACC,MAAD,EAAS;AAC1B,WAAO,IAAIT,aAAJ,CAAmB,oBAAmBS,MAAO,EAA7C,EAAgDV,iBAAiB,CAACS,cAAlE,CAAP;AACH;;AAfoC","sourcesContent":["export var ProviderErrorCode;\n(function (ProviderErrorCode) {\n    // Thrown when accessing subscription features when they are disabled.\n    ProviderErrorCode[ProviderErrorCode[\"SubscriptionsUnavailable\"] = 4000] = \"SubscriptionsUnavailable\";\n    // Thrown when request is missing required params or data\n    ProviderErrorCode[ProviderErrorCode[\"InvalidRequest\"] = 4001] = \"InvalidRequest\";\n})(ProviderErrorCode || (ProviderErrorCode = {}));\nexport class ProviderError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.name = 'ProviderError';\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ProviderError);\n        }\n        this.code = code;\n    }\n    static SubscriptionsUnavailable() {\n        return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);\n    }\n    static InvalidRequest(reason) {\n        return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}