{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthorizationServiceConfiguration = void 0;\n\nvar xhr_1 = require(\"./xhr\");\n/**\n * The standard base path for well-known resources on domains.\n * See https://tools.ietf.org/html/rfc5785 for more information.\n */\n\n\nvar WELL_KNOWN_PATH = '.well-known';\n/**\n * The standard resource under the well known path at which an OpenID Connect\n * discovery document can be found under an issuer's base URI.\n */\n\nvar OPENID_CONFIGURATION = 'openid-configuration';\n/**\n * Configuration details required to interact with an authorization service.\n *\n * More information at https://openid.net/specs/openid-connect-discovery-1_0-17.html\n */\n\nvar AuthorizationServiceConfiguration =\n/** @class */\nfunction () {\n  function AuthorizationServiceConfiguration(request) {\n    this.authorizationEndpoint = request.authorization_endpoint;\n    this.tokenEndpoint = request.token_endpoint;\n    this.revocationEndpoint = request.revocation_endpoint;\n    this.userInfoEndpoint = request.userinfo_endpoint;\n    this.endSessionEndpoint = request.end_session_endpoint;\n  }\n\n  AuthorizationServiceConfiguration.prototype.toJson = function () {\n    return {\n      authorization_endpoint: this.authorizationEndpoint,\n      token_endpoint: this.tokenEndpoint,\n      revocation_endpoint: this.revocationEndpoint,\n      end_session_endpoint: this.endSessionEndpoint,\n      userinfo_endpoint: this.userInfoEndpoint\n    };\n  };\n\n  AuthorizationServiceConfiguration.fetchFromIssuer = function (openIdIssuerUrl, requestor) {\n    var fullUrl = openIdIssuerUrl + \"/\" + WELL_KNOWN_PATH + \"/\" + OPENID_CONFIGURATION;\n    var requestorToUse = requestor || new xhr_1.JQueryRequestor();\n    return requestorToUse.xhr({\n      url: fullUrl,\n      dataType: 'json',\n      method: 'GET'\n    }).then(function (json) {\n      return new AuthorizationServiceConfiguration(json);\n    });\n  };\n\n  return AuthorizationServiceConfiguration;\n}();\n\nexports.AuthorizationServiceConfiguration = AuthorizationServiceConfiguration;","map":{"version":3,"sources":["../src/authorization_service_configuration.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;AAYG;;;;;;;AAEH,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AAcA;;;AAGG;;;AACH,IAAM,eAAe,GAAG,aAAxB;AAEA;;;AAGG;;AACH,IAAM,oBAAoB,GAAG,sBAA7B;AAEA;;;;AAIG;;AACH,IAAA,iCAAA;AAAA;AAAA,YAAA;AAOE,WAAA,iCAAA,CAAY,OAAZ,EAA0D;AACxD,SAAK,qBAAL,GAA6B,OAAO,CAAC,sBAArC;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,cAA7B;AACA,SAAK,kBAAL,GAA0B,OAAO,CAAC,mBAAlC;AACA,SAAK,gBAAL,GAAwB,OAAO,CAAC,iBAAhC;AACA,SAAK,kBAAL,GAA0B,OAAO,CAAC,oBAAlC;AACD;;AAED,EAAA,iCAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,sBAAsB,EAAE,KAAK,qBADxB;AAEL,MAAA,cAAc,EAAE,KAAK,aAFhB;AAGL,MAAA,mBAAmB,EAAE,KAAK,kBAHrB;AAIL,MAAA,oBAAoB,EAAE,KAAK,kBAJtB;AAKL,MAAA,iBAAiB,EAAE,KAAK;AALnB,KAAP;AAOD,GARD;;AAUO,EAAA,iCAAA,CAAA,eAAA,GAAP,UAAuB,eAAvB,EAAgD,SAAhD,EAAqE;AAEnE,QAAM,OAAO,GAAM,eAAe,GAAA,GAAf,GAAmB,eAAnB,GAAkC,GAAlC,GAAsC,oBAAzD;AAEA,QAAM,cAAc,GAAG,SAAS,IAAI,IAAI,KAAA,CAAA,eAAJ,EAApC;AAEA,WAAO,cAAc,CAChB,GADE,CACyC;AAAC,MAAA,GAAG,EAAE,OAAN;AAAe,MAAA,QAAQ,EAAE,MAAzB;AAAiC,MAAA,MAAM,EAAE;AAAzC,KADzC,EAEF,IAFE,CAEG,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,iCAAJ,CAAA,IAAA,CAAA;AAA2C,KAFtD,CAAP;AAGD,GATM;;AAUT,SAAA,iCAAA;AAAC,CAnCD,EAAA;;AAAa,OAAA,CAAA,iCAAA,GAAA,iCAAA","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {JQueryRequestor, Requestor} from './xhr';\n\n\n/**\n * Represents AuthorizationServiceConfiguration as a JSON object.\n */\nexport interface AuthorizationServiceConfigurationJson {\n  authorization_endpoint: string;\n  token_endpoint: string;\n  revocation_endpoint: string;\n  end_session_endpoint?: string;\n  userinfo_endpoint?: string;\n}\n\n/**\n * The standard base path for well-known resources on domains.\n * See https://tools.ietf.org/html/rfc5785 for more information.\n */\nconst WELL_KNOWN_PATH = '.well-known';\n\n/**\n * The standard resource under the well known path at which an OpenID Connect\n * discovery document can be found under an issuer's base URI.\n */\nconst OPENID_CONFIGURATION = 'openid-configuration';\n\n/**\n * Configuration details required to interact with an authorization service.\n *\n * More information at https://openid.net/specs/openid-connect-discovery-1_0-17.html\n */\nexport class AuthorizationServiceConfiguration {\n  authorizationEndpoint: string;\n  tokenEndpoint: string;\n  revocationEndpoint: string;\n  userInfoEndpoint?: string;\n  endSessionEndpoint?: string;\n\n  constructor(request: AuthorizationServiceConfigurationJson) {\n    this.authorizationEndpoint = request.authorization_endpoint;\n    this.tokenEndpoint = request.token_endpoint;\n    this.revocationEndpoint = request.revocation_endpoint;\n    this.userInfoEndpoint = request.userinfo_endpoint;\n    this.endSessionEndpoint = request.end_session_endpoint;\n  }\n\n  toJson() {\n    return {\n      authorization_endpoint: this.authorizationEndpoint,\n      token_endpoint: this.tokenEndpoint,\n      revocation_endpoint: this.revocationEndpoint,\n      end_session_endpoint: this.endSessionEndpoint,\n      userinfo_endpoint: this.userInfoEndpoint\n    };\n  }\n\n  static fetchFromIssuer(openIdIssuerUrl: string, requestor?: Requestor):\n      Promise<AuthorizationServiceConfiguration> {\n    const fullUrl = `${openIdIssuerUrl}/${WELL_KNOWN_PATH}/${OPENID_CONFIGURATION}`;\n\n    const requestorToUse = requestor || new JQueryRequestor();\n\n    return requestorToUse\n        .xhr<AuthorizationServiceConfigurationJson>({url: fullUrl, dataType: 'json', method: 'GET'})\n        .then(json => new AuthorizationServiceConfiguration(json));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}