{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthorizationRequestHandler = exports.BUILT_IN_PARAMETERS = exports.AuthorizationNotifier = void 0;\n\nvar logger_1 = require(\"./logger\");\n/**\n * Authorization Service notifier.\n * This manages the communication of the AuthorizationResponse to the 3p client.\n */\n\n\nvar AuthorizationNotifier =\n/** @class */\nfunction () {\n  function AuthorizationNotifier() {\n    this.listener = null;\n  }\n\n  AuthorizationNotifier.prototype.setAuthorizationListener = function (listener) {\n    this.listener = listener;\n  };\n  /**\n   * The authorization complete callback.\n   */\n\n\n  AuthorizationNotifier.prototype.onAuthorizationComplete = function (request, response, error) {\n    if (this.listener) {\n      // complete authorization request\n      this.listener(request, response, error);\n    }\n  };\n\n  return AuthorizationNotifier;\n}();\n\nexports.AuthorizationNotifier = AuthorizationNotifier; // TODO(rahulrav@): add more built in parameters.\n\n/* built in parameters. */\n\nexports.BUILT_IN_PARAMETERS = ['redirect_uri', 'client_id', 'response_type', 'state', 'scope'];\n/**\n * Defines the interface which is capable of handling an authorization request\n * using various methods (iframe / popup / different process etc.).\n */\n\nvar AuthorizationRequestHandler =\n/** @class */\nfunction () {\n  function AuthorizationRequestHandler(utils, crypto) {\n    this.utils = utils;\n    this.crypto = crypto; // notifier send the response back to the client.\n\n    this.notifier = null;\n  }\n  /**\n   * A utility method to be able to build the authorization request URL.\n   */\n\n\n  AuthorizationRequestHandler.prototype.buildRequestUrl = function (configuration, request) {\n    // build the query string\n    // coerce to any type for convenience\n    var requestMap = {\n      'redirect_uri': request.redirectUri,\n      'client_id': request.clientId,\n      'response_type': request.responseType,\n      'state': request.state,\n      'scope': request.scope\n    }; // copy over extras\n\n    if (request.extras) {\n      for (var extra in request.extras) {\n        if (request.extras.hasOwnProperty(extra)) {\n          // check before inserting to requestMap\n          if (exports.BUILT_IN_PARAMETERS.indexOf(extra) < 0) {\n            requestMap[extra] = request.extras[extra];\n          }\n        }\n      }\n    }\n\n    var query = this.utils.stringify(requestMap);\n    var baseUrl = configuration.authorizationEndpoint;\n    var url = baseUrl + \"?\" + query;\n    return url;\n  };\n  /**\n   * Completes the authorization request if necessary & when possible.\n   */\n\n\n  AuthorizationRequestHandler.prototype.completeAuthorizationRequestIfPossible = function () {\n    var _this = this; // call complete authorization if possible to see there might\n    // be a response that needs to be delivered.\n\n\n    logger_1.log(\"Checking to see if there is an authorization response to be delivered.\");\n\n    if (!this.notifier) {\n      logger_1.log(\"Notifier is not present on AuthorizationRequest handler.\\n          No delivery of result will be possible\");\n    }\n\n    return this.completeAuthorizationRequest().then(function (result) {\n      if (!result) {\n        logger_1.log(\"No result is available yet.\");\n      }\n\n      if (result && _this.notifier) {\n        _this.notifier.onAuthorizationComplete(result.request, result.response, result.error);\n      }\n    });\n  };\n  /**\n   * Sets the default Authorization Service notifier.\n   */\n\n\n  AuthorizationRequestHandler.prototype.setAuthorizationNotifier = function (notifier) {\n    this.notifier = notifier;\n    return this;\n  };\n\n  ;\n  return AuthorizationRequestHandler;\n}();\n\nexports.AuthorizationRequestHandler = AuthorizationRequestHandler;","map":{"version":3,"sources":["../src/authorization_request_handler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AuthorizationRequest} from './authorization_request';\nimport {AuthorizationError, AuthorizationResponse} from './authorization_response';\nimport {AuthorizationServiceConfiguration} from './authorization_service_configuration';\nimport {Crypto} from './crypto_utils';\nimport {log} from './logger';\nimport {QueryStringUtils} from './query_string_utils';\nimport {StringMap} from './types';\n\n\n/**\n * This type represents a lambda that can take an AuthorizationRequest,\n * and an AuthorizationResponse as arguments.\n */\nexport type AuthorizationListener =\n    (request: AuthorizationRequest,\n     response: AuthorizationResponse|null,\n     error: AuthorizationError|null) => void;\n\n/**\n * Represents a structural type holding both authorization request and response.\n */\nexport interface AuthorizationRequestResponse {\n  request: AuthorizationRequest;\n  response: AuthorizationResponse|null;\n  error: AuthorizationError|null;\n}\n\n/**\n * Authorization Service notifier.\n * This manages the communication of the AuthorizationResponse to the 3p client.\n */\nexport class AuthorizationNotifier {\n  private listener: AuthorizationListener|null = null;\n\n  setAuthorizationListener(listener: AuthorizationListener) {\n    this.listener = listener;\n  }\n\n  /**\n   * The authorization complete callback.\n   */\n  onAuthorizationComplete(\n      request: AuthorizationRequest,\n      response: AuthorizationResponse|null,\n      error: AuthorizationError|null): void {\n    if (this.listener) {\n      // complete authorization request\n      this.listener(request, response, error);\n    }\n  }\n}\n\n// TODO(rahulrav@): add more built in parameters.\n/* built in parameters. */\nexport const BUILT_IN_PARAMETERS = ['redirect_uri', 'client_id', 'response_type', 'state', 'scope'];\n\n/**\n * Defines the interface which is capable of handling an authorization request\n * using various methods (iframe / popup / different process etc.).\n */\nexport abstract class AuthorizationRequestHandler {\n  constructor(public utils: QueryStringUtils, protected crypto: Crypto) {}\n\n  // notifier send the response back to the client.\n  protected notifier: AuthorizationNotifier|null = null;\n\n  /**\n   * A utility method to be able to build the authorization request URL.\n   */\n  protected buildRequestUrl(\n      configuration: AuthorizationServiceConfiguration,\n      request: AuthorizationRequest) {\n    // build the query string\n    // coerce to any type for convenience\n    let requestMap: StringMap = {\n      'redirect_uri': request.redirectUri,\n      'client_id': request.clientId,\n      'response_type': request.responseType,\n      'state': request.state,\n      'scope': request.scope\n    };\n\n    // copy over extras\n    if (request.extras) {\n      for (let extra in request.extras) {\n        if (request.extras.hasOwnProperty(extra)) {\n          // check before inserting to requestMap\n          if (BUILT_IN_PARAMETERS.indexOf(extra) < 0) {\n            requestMap[extra] = request.extras[extra];\n          }\n        }\n      }\n    }\n\n    let query = this.utils.stringify(requestMap);\n    let baseUrl = configuration.authorizationEndpoint;\n    let url = `${baseUrl}?${query}`;\n    return url;\n  }\n\n  /**\n   * Completes the authorization request if necessary & when possible.\n   */\n  completeAuthorizationRequestIfPossible(): Promise<void> {\n    // call complete authorization if possible to see there might\n    // be a response that needs to be delivered.\n    log(`Checking to see if there is an authorization response to be delivered.`);\n    if (!this.notifier) {\n      log(`Notifier is not present on AuthorizationRequest handler.\n          No delivery of result will be possible`)\n    }\n    return this.completeAuthorizationRequest().then(result => {\n      if (!result) {\n        log(`No result is available yet.`);\n      }\n      if (result && this.notifier) {\n        this.notifier.onAuthorizationComplete(result.request, result.response, result.error);\n      }\n    });\n  }\n\n  /**\n   * Sets the default Authorization Service notifier.\n   */\n  setAuthorizationNotifier(notifier: AuthorizationNotifier): AuthorizationRequestHandler {\n    this.notifier = notifier;\n    return this;\n  };\n\n  /**\n   * Makes an authorization request.\n   */\n  abstract performAuthorizationRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: AuthorizationRequest): void;\n\n  /**\n   * Checks if an authorization flow can be completed, and completes it.\n   * The handler returns a `Promise<AuthorizationRequestResponse>` if ready, or a `Promise<null>`\n   * if not ready.\n   */\n  protected abstract completeAuthorizationRequest(): Promise<AuthorizationRequestResponse|null>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}