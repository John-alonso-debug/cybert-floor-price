{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RedirectRequestHandler = void 0;\n\nvar authorization_request_1 = require(\"./authorization_request\");\n\nvar authorization_request_handler_1 = require(\"./authorization_request_handler\");\n\nvar authorization_response_1 = require(\"./authorization_response\");\n\nvar crypto_utils_1 = require(\"./crypto_utils\");\n\nvar logger_1 = require(\"./logger\");\n\nvar query_string_utils_1 = require(\"./query_string_utils\");\n\nvar storage_1 = require(\"./storage\");\n/** key for authorization request. */\n\n\nvar authorizationRequestKey = function (handle) {\n  return handle + \"_appauth_authorization_request\";\n};\n/** key for authorization service configuration */\n\n\nvar authorizationServiceConfigurationKey = function (handle) {\n  return handle + \"_appauth_authorization_service_configuration\";\n};\n/** key in local storage which represents the current authorization request. */\n\n\nvar AUTHORIZATION_REQUEST_HANDLE_KEY = 'appauth_current_authorization_request';\n/**\n * Represents an AuthorizationRequestHandler which uses a standard\n * redirect based code flow.\n */\n\nvar RedirectRequestHandler =\n/** @class */\nfunction (_super) {\n  __extends(RedirectRequestHandler, _super);\n\n  function RedirectRequestHandler( // use the provided storage backend\n  // or initialize local storage with the default storage backend which\n  // uses window.localStorage\n  storageBackend, utils, locationLike, crypto) {\n    if (storageBackend === void 0) {\n      storageBackend = new storage_1.LocalStorageBackend();\n    }\n\n    if (utils === void 0) {\n      utils = new query_string_utils_1.BasicQueryStringUtils();\n    }\n\n    if (locationLike === void 0) {\n      locationLike = window.location;\n    }\n\n    if (crypto === void 0) {\n      crypto = new crypto_utils_1.DefaultCrypto();\n    }\n\n    var _this = _super.call(this, utils, crypto) || this;\n\n    _this.storageBackend = storageBackend;\n    _this.locationLike = locationLike;\n    return _this;\n  }\n\n  RedirectRequestHandler.prototype.performAuthorizationRequest = function (configuration, request) {\n    var _this = this;\n\n    var handle = this.crypto.generateRandom(10); // before you make request, persist all request related data in local storage.\n\n    var persisted = Promise.all([this.storageBackend.setItem(AUTHORIZATION_REQUEST_HANDLE_KEY, handle), // Calling toJson() adds in the code & challenge when possible\n    request.toJson().then(function (result) {\n      return _this.storageBackend.setItem(authorizationRequestKey(handle), JSON.stringify(result));\n    }), this.storageBackend.setItem(authorizationServiceConfigurationKey(handle), JSON.stringify(configuration.toJson()))]);\n    persisted.then(function () {\n      // make the redirect request\n      var url = _this.buildRequestUrl(configuration, request);\n\n      logger_1.log('Making a request to ', request, url);\n\n      _this.locationLike.assign(url);\n    });\n  };\n  /**\n   * Attempts to introspect the contents of storage backend and completes the\n   * request.\n   */\n\n\n  RedirectRequestHandler.prototype.completeAuthorizationRequest = function () {\n    var _this = this; // TODO(rahulrav@): handle authorization errors.\n\n\n    return this.storageBackend.getItem(AUTHORIZATION_REQUEST_HANDLE_KEY).then(function (handle) {\n      if (handle) {\n        // we have a pending request.\n        // fetch authorization request, and check state\n        return _this.storageBackend.getItem(authorizationRequestKey(handle)) // requires a corresponding instance of result\n        // TODO(rahulrav@): check for inconsitent state here\n        .then(function (result) {\n          return JSON.parse(result);\n        }).then(function (json) {\n          return new authorization_request_1.AuthorizationRequest(json);\n        }).then(function (request) {\n          // check redirect_uri and state\n          var currentUri = \"\" + _this.locationLike.origin + _this.locationLike.pathname;\n\n          var queryParams = _this.utils.parse(_this.locationLike, true\n          /* use hash */\n          );\n\n          var state = queryParams['state'];\n          var code = queryParams['code'];\n          var error = queryParams['error'];\n          logger_1.log('Potential authorization request ', currentUri, queryParams, state, code, error);\n          var shouldNotify = state === request.state;\n          var authorizationResponse = null;\n          var authorizationError = null;\n\n          if (shouldNotify) {\n            if (error) {\n              // get additional optional info.\n              var errorUri = queryParams['error_uri'];\n              var errorDescription = queryParams['error_description'];\n              authorizationError = new authorization_response_1.AuthorizationError({\n                error: error,\n                error_description: errorDescription,\n                error_uri: errorUri,\n                state: state\n              });\n            } else {\n              authorizationResponse = new authorization_response_1.AuthorizationResponse({\n                code: code,\n                state: state\n              });\n            } // cleanup state\n\n\n            return Promise.all([_this.storageBackend.removeItem(AUTHORIZATION_REQUEST_HANDLE_KEY), _this.storageBackend.removeItem(authorizationRequestKey(handle)), _this.storageBackend.removeItem(authorizationServiceConfigurationKey(handle))]).then(function () {\n              logger_1.log('Delivering authorization response');\n              return {\n                request: request,\n                response: authorizationResponse,\n                error: authorizationError\n              };\n            });\n          } else {\n            logger_1.log('Mismatched request (state and request_uri) dont match.');\n            return Promise.resolve(null);\n          }\n        });\n      } else {\n        return null;\n      }\n    });\n  };\n\n  return RedirectRequestHandler;\n}(authorization_request_handler_1.AuthorizationRequestHandler);\n\nexports.RedirectRequestHandler = RedirectRequestHandler;","map":{"version":3,"sources":["../src/redirect_based_handler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AuthorizationRequest} from './authorization_request';\nimport {AuthorizationRequestHandler, AuthorizationRequestResponse} from './authorization_request_handler';\nimport {AuthorizationError, AuthorizationResponse} from './authorization_response'\nimport {AuthorizationServiceConfiguration} from './authorization_service_configuration';\nimport {Crypto, DefaultCrypto} from './crypto_utils';\nimport {log} from './logger';\nimport {BasicQueryStringUtils} from './query_string_utils';\nimport {LocalStorageBackend, StorageBackend} from './storage';\nimport {LocationLike} from './types';\n\n\n/** key for authorization request. */\nconst authorizationRequestKey =\n    (handle: string) => {\n      return `${handle}_appauth_authorization_request`;\n    }\n\n/** key for authorization service configuration */\nconst authorizationServiceConfigurationKey =\n    (handle: string) => {\n      return `${handle}_appauth_authorization_service_configuration`;\n    }\n\n/** key in local storage which represents the current authorization request. */\nconst AUTHORIZATION_REQUEST_HANDLE_KEY = 'appauth_current_authorization_request';\n\n/**\n * Represents an AuthorizationRequestHandler which uses a standard\n * redirect based code flow.\n */\nexport class RedirectRequestHandler extends AuthorizationRequestHandler {\n  constructor(\n      // use the provided storage backend\n      // or initialize local storage with the default storage backend which\n      // uses window.localStorage\n      public storageBackend: StorageBackend = new LocalStorageBackend(),\n      utils = new BasicQueryStringUtils(),\n      public locationLike: LocationLike = window.location,\n      crypto: Crypto = new DefaultCrypto()) {\n    super(utils, crypto);\n  }\n\n  performAuthorizationRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: AuthorizationRequest) {\n    const handle = this.crypto.generateRandom(10);\n\n    // before you make request, persist all request related data in local storage.\n    const persisted = Promise.all([\n      this.storageBackend.setItem(AUTHORIZATION_REQUEST_HANDLE_KEY, handle),\n      // Calling toJson() adds in the code & challenge when possible\n      request.toJson().then(\n          result =>\n              this.storageBackend.setItem(authorizationRequestKey(handle), JSON.stringify(result))),\n      this.storageBackend.setItem(\n          authorizationServiceConfigurationKey(handle), JSON.stringify(configuration.toJson())),\n    ]);\n\n    persisted.then(() => {\n      // make the redirect request\n      let url = this.buildRequestUrl(configuration, request);\n      log('Making a request to ', request, url);\n      this.locationLike.assign(url);\n    });\n  }\n\n  /**\n   * Attempts to introspect the contents of storage backend and completes the\n   * request.\n   */\n  protected completeAuthorizationRequest(): Promise<AuthorizationRequestResponse|null> {\n    // TODO(rahulrav@): handle authorization errors.\n    return this.storageBackend.getItem(AUTHORIZATION_REQUEST_HANDLE_KEY).then(handle => {\n      if (handle) {\n        // we have a pending request.\n        // fetch authorization request, and check state\n        return this.storageBackend\n            .getItem(authorizationRequestKey(handle))\n            // requires a corresponding instance of result\n            // TODO(rahulrav@): check for inconsitent state here\n            .then(result => JSON.parse(result!))\n            .then(json => new AuthorizationRequest(json))\n            .then(request => {\n              // check redirect_uri and state\n              let currentUri = `${this.locationLike.origin}${this.locationLike.pathname}`;\n              let queryParams = this.utils.parse(this.locationLike, true /* use hash */);\n              let state: string|undefined = queryParams['state'];\n              let code: string|undefined = queryParams['code'];\n              let error: string|undefined = queryParams['error'];\n              log('Potential authorization request ', currentUri, queryParams, state, code, error);\n              let shouldNotify = state === request.state;\n              let authorizationResponse: AuthorizationResponse|null = null;\n              let authorizationError: AuthorizationError|null = null;\n              if (shouldNotify) {\n                if (error) {\n                  // get additional optional info.\n                  let errorUri = queryParams['error_uri'];\n                  let errorDescription = queryParams['error_description'];\n                  authorizationError = new AuthorizationError({\n                    error: error,\n                    error_description: errorDescription,\n                    error_uri: errorUri,\n                    state: state\n                  });\n                } else {\n                  authorizationResponse = new AuthorizationResponse({code: code, state: state});\n                }\n                // cleanup state\n                return Promise\n                    .all([\n                      this.storageBackend.removeItem(AUTHORIZATION_REQUEST_HANDLE_KEY),\n                      this.storageBackend.removeItem(authorizationRequestKey(handle)),\n                      this.storageBackend.removeItem(authorizationServiceConfigurationKey(handle))\n                    ])\n                    .then(() => {\n                      log('Delivering authorization response');\n                      return {\n                        request: request,\n                        response: authorizationResponse,\n                        error: authorizationError\n                      } as AuthorizationRequestResponse;\n                    });\n              } else {\n                log('Mismatched request (state and request_uri) dont match.');\n                return Promise.resolve(null);\n              }\n            });\n      } else {\n        return null;\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}