{"ast":null,"code":"import { DAI_CONTRACT } from '../constants';\nexport function getDaiContract(chainId, web3) {\n  const dai = new web3.eth.Contract(DAI_CONTRACT[chainId].abi, DAI_CONTRACT[chainId].address);\n  return dai;\n}\nexport function callBalanceOf(address, chainId, web3) {\n  return new Promise(async (resolve, reject) => {\n    const dai = getDaiContract(chainId, web3);\n    await dai.methods.balanceOf(address).call({\n      from: '0x0000000000000000000000000000000000000000'\n    }, (err, data) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(data);\n    });\n  });\n}\nexport function callTransfer(address, chainId, web3) {\n  return new Promise(async (resolve, reject) => {\n    const dai = getDaiContract(chainId, web3);\n    await dai.methods.transfer(address, '1').send({\n      from: address\n    }, (err, data) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(data);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/src/helpers/web3.ts"],"names":["DAI_CONTRACT","getDaiContract","chainId","web3","dai","eth","Contract","abi","address","callBalanceOf","Promise","resolve","reject","methods","balanceOf","call","from","err","data","callTransfer","transfer","send"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AAEA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAyCC,IAAzC,EAAoD;AACzD,QAAMC,GAAG,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CACVN,YAAY,CAACE,OAAD,CAAZ,CAAsBK,GADZ,EAEVP,YAAY,CAACE,OAAD,CAAZ,CAAsBM,OAFZ,CAAZ;AAIA,SAAOJ,GAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBD,OAAvB,EAAwCN,OAAxC,EAAyDC,IAAzD,EAAoE;AACzE,SAAO,IAAIO,OAAJ,CAAY,OAAMC,OAAN,EAAeC,MAAf,KAA0B;AAC3C,UAAMR,GAAG,GAAGH,cAAc,CAACC,OAAD,EAAUC,IAAV,CAA1B;AAEA,UAAMC,GAAG,CAACS,OAAJ,CACHC,SADG,CACON,OADP,EAEHO,IAFG,CAGF;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAHE,EAIF,CAACC,GAAD,EAAWC,IAAX,KAAyB;AACvB,UAAID,GAAJ,EAAS;AACPL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAACO,IAAD,CAAP;AACD,KAVC,CAAN;AAYD,GAfM,CAAP;AAgBD;AAED,OAAO,SAASC,YAAT,CAAsBX,OAAtB,EAAuCN,OAAvC,EAAwDC,IAAxD,EAAmE;AACxE,SAAO,IAAIO,OAAJ,CAAY,OAAMC,OAAN,EAAeC,MAAf,KAA0B;AAC3C,UAAMR,GAAG,GAAGH,cAAc,CAACC,OAAD,EAAUC,IAAV,CAA1B;AAEA,UAAMC,GAAG,CAACS,OAAJ,CACHO,QADG,CACMZ,OADN,EACe,GADf,EAEHa,IAFG,CAEE;AAAEL,MAAAA,IAAI,EAAER;AAAR,KAFF,EAEqB,CAACS,GAAD,EAAWC,IAAX,KAAyB;AAChD,UAAID,GAAJ,EAAS;AACPL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAACO,IAAD,CAAP;AACD,KARG,CAAN;AASD,GAZM,CAAP;AAaD","sourcesContent":["import { DAI_CONTRACT } from '../constants'\n\nexport function getDaiContract(chainId: number, web3: any) {\n  const dai = new web3.eth.Contract(\n    DAI_CONTRACT[chainId].abi,\n    DAI_CONTRACT[chainId].address\n  )\n  return dai\n}\n\nexport function callBalanceOf(address: string, chainId: number, web3: any) {\n  return new Promise(async(resolve, reject) => {\n    const dai = getDaiContract(chainId, web3)\n\n    await dai.methods\n      .balanceOf(address)\n      .call(\n        { from: '0x0000000000000000000000000000000000000000' },\n        (err: any, data: any) => {\n          if (err) {\n            reject(err)\n          }\n\n          resolve(data)\n        }\n      )\n  })\n}\n\nexport function callTransfer(address: string, chainId: number, web3: any) {\n  return new Promise(async(resolve, reject) => {\n    const dai = getDaiContract(chainId, web3)\n\n    await dai.methods\n      .transfer(address, '1')\n      .send({ from: address }, (err: any, data: any) => {\n        if (err) {\n          reject(err)\n        }\n\n        resolve(data)\n      })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}