{"ast":null,"code":"// tslint:disable max-classes-per-file\nimport { AuthorizationError, AuthorizationRequestHandler, AuthorizationResponse, BasicQueryStringUtils, DefaultCrypto } from '@openid/appauth';\nimport { CHECK_FOR_POPUP_CLOSE_INTERVAL, DEFAULT_POPUP_FEATURES } from '../constants';\nimport { parseUrlParams } from '../utils/callback';\nimport { PopupValidator } from '../utils/popup-validator'; // Intermediate errors, since AuthorizationRequestHandler must return an AuthorizationError instance.\n// These should not be user visible.\n\nexport class PopupClosedError extends AuthorizationError {\n  constructor() {\n    super({\n      error: 'The popup was dismissed.'\n    });\n  }\n\n}\nexport class PopupBlockedError extends AuthorizationError {\n  constructor() {\n    super({\n      error: 'The popup was blocked.'\n    });\n  }\n\n} // Create a popup feature string from an object with keys and values\n\nfunction createPopupFeatureString(features) {\n  // Convert to array of strings\n  const featuresArray = Object.keys(features).reduce((arr, key) => {\n    const value = features[key]; // convert to feature string format: top=100\n\n    arr.push(`${key}=${value}`);\n    return arr;\n  }, Array()); // Join strings with ',' and finish with ';'\n\n  return featuresArray.join(',') + ';';\n} // Returns a set of attributes for a centered popup based on\n// the default values from constants.ts\n\n\nfunction createCenteredPopupFeatures() {\n  const windowFeatures = DEFAULT_POPUP_FEATURES;\n  const w = windowFeatures.width;\n  const h = windowFeatures.height; // Fixes dual-screen position\n\n  const dualScreenLeft = window.screenLeft || window.screenX;\n  const dualScreenTop = window.screenTop || window.screenY;\n  const windowWidth = window.innerWidth || document.documentElement.clientWidth || screen.width;\n  const windowHeight = window.innerHeight || document.documentElement.clientHeight || screen.height;\n  const left = windowWidth / 2 - w / 2;\n  const top = windowHeight / 2 - h / 2;\n  windowFeatures.left = left + dualScreenLeft;\n  windowFeatures.top = top + dualScreenTop;\n  return windowFeatures;\n}\n\nexport class PopupRequestHandler extends AuthorizationRequestHandler {\n  constructor(utils = new BasicQueryStringUtils(), crypto = new DefaultCrypto()) {\n    super(utils, crypto);\n    this.popupWindow = null;\n    this.isCancelled = false;\n    this.isBlocked = false; // Watch for the popup being blocked\n\n    this.validator = new PopupValidator(() => {\n      // Return a specific error if blocked, so that we can handle it appropriately.\n      this.isBlocked = true;\n      this.completeAuthorizationRequestIfPossible();\n    });\n  }\n\n  performAuthorizationRequest(configuration, request) {\n    const url = this.buildRequestUrl(configuration, request);\n    this.pendingRequest = request;\n    this.id = request.state; // Set a unique handler on the main window\n\n    window[`popupCallback_${request.state}`] = this.callback.bind(this); // Start monitoring to see if the popup has been closed\n\n    this.closedTimer = window.setInterval(this.checkPopup.bind(this), CHECK_FOR_POPUP_CLOSE_INTERVAL); // Create features for popup\n\n    const windowFeatures = createCenteredPopupFeatures(); // Create popup window\n\n    this.popupWindow = window.open(url, '_blank', createPopupFeatureString(windowFeatures)); // Check if the popup we just created was blocked.\n\n    this.validator.check(this.popupWindow); // Focus the popup to bring it to the front\n\n    if (this.popupWindow) {\n      this.popupWindow.focus();\n    }\n  }\n\n  callback(url) {\n    this.responseUrl = url;\n    this.completeAuthorizationRequestIfPossible();\n  } // Custom implementation to remove excess log spam\n\n\n  completeAuthorizationRequestIfPossible() {\n    return this.completeAuthorizationRequest().then(result => {\n      if (result && this.notifier) {\n        this.notifier.onAuthorizationComplete(result.request, result.response, result.error);\n      }\n    });\n  }\n\n  completeAuthorizationRequest() {\n    const request = this.pendingRequest; // Assert there is a pending request\n\n    if (!request) {\n      return Promise.resolve(null);\n    } // Assert the request wasn't cancelled\n\n\n    if (this.isCancelled === true) {\n      return this.respondWithCancelled(request);\n    }\n\n    if (this.isBlocked === true) {\n      return this.respondWithBlocked(request);\n    } // Assert there is no error\n\n\n    if (this.error) {\n      return this.respondWithError(request, this.error.message);\n    } // Assert there is a response url to parse\n\n\n    if (!this.responseUrl) {\n      return Promise.resolve(null);\n    } // Parse the url into data\n\n\n    const data = parseUrlParams(this.responseUrl); // Extra the state\n\n    const state = data.state; // Validate state is same as request\n\n    if (request.state !== state) {\n      return Promise.resolve(null);\n    } // Check for an error response\n\n\n    const error = data.error;\n\n    if (error) {\n      // get additional optional info.\n      const errorUri = data.error_uri;\n      const errorDescription = data.error_description;\n      return this.respondWithError(request, error, errorDescription, errorUri);\n    } // Respond with a code\n\n\n    const code = data.code;\n    return this.respondWithCode(request, code);\n  }\n\n  respondWithBlocked(request) {\n    const error = new PopupBlockedError();\n    const response = {\n      request,\n      error,\n      response: null\n    };\n    this.cleanup();\n    return Promise.resolve(response);\n  }\n\n  respondWithCancelled(request) {\n    const error = new PopupClosedError();\n    const response = {\n      request,\n      error,\n      response: null\n    };\n    this.cleanup();\n    return Promise.resolve(response);\n  }\n\n  respondWithError(request, errorMessage, errorDescription, errorUri) {\n    const error = new AuthorizationError({\n      error: errorMessage,\n      error_description: errorDescription,\n      error_uri: errorUri,\n      state: request.state\n    });\n    const response = {\n      request,\n      error,\n      response: null\n    };\n    this.cleanup();\n    return Promise.resolve(response);\n  }\n\n  respondWithCode(request, code) {\n    let authorizationResponse = null;\n\n    if (code) {\n      authorizationResponse = new AuthorizationResponse({\n        code,\n        state: request.state\n      });\n    }\n\n    const response = {\n      request,\n      response: authorizationResponse,\n      error: null\n    };\n    this.cleanup();\n    return Promise.resolve(response);\n  }\n\n  cleanup() {\n    window.clearInterval(this.closedTimer);\n    delete window[`popupCallback_${this.id}`];\n\n    if (this.popupWindow) {\n      this.popupWindow.close();\n    }\n\n    this.popupWindow = null;\n    this.pendingRequest = undefined;\n    this.error = undefined;\n    this.id = undefined;\n    this.responseUrl = undefined;\n  }\n\n  checkPopup() {\n    if (this.popupWindow && this.popupWindow.closed) {\n      // Stop checking\n      window.clearInterval(this.closedTimer);\n      this.isCancelled = true;\n      this.completeAuthorizationRequestIfPossible();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/auth/popup-handler.js"],"names":["AuthorizationError","AuthorizationRequestHandler","AuthorizationResponse","BasicQueryStringUtils","DefaultCrypto","CHECK_FOR_POPUP_CLOSE_INTERVAL","DEFAULT_POPUP_FEATURES","parseUrlParams","PopupValidator","PopupClosedError","constructor","error","PopupBlockedError","createPopupFeatureString","features","featuresArray","Object","keys","reduce","arr","key","value","push","Array","join","createCenteredPopupFeatures","windowFeatures","w","width","h","height","dualScreenLeft","window","screenLeft","screenX","dualScreenTop","screenTop","screenY","windowWidth","innerWidth","document","documentElement","clientWidth","screen","windowHeight","innerHeight","clientHeight","left","top","PopupRequestHandler","utils","crypto","popupWindow","isCancelled","isBlocked","validator","completeAuthorizationRequestIfPossible","performAuthorizationRequest","configuration","request","url","buildRequestUrl","pendingRequest","id","state","callback","bind","closedTimer","setInterval","checkPopup","open","check","focus","responseUrl","completeAuthorizationRequest","then","result","notifier","onAuthorizationComplete","response","Promise","resolve","respondWithCancelled","respondWithBlocked","respondWithError","message","data","errorUri","error_uri","errorDescription","error_description","code","respondWithCode","cleanup","errorMessage","authorizationResponse","clearInterval","close","undefined","closed"],"mappings":"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","sourcesContent":["// tslint:disable max-classes-per-file\nimport { AuthorizationError, AuthorizationRequestHandler, AuthorizationResponse, BasicQueryStringUtils, DefaultCrypto, } from '@openid/appauth';\nimport { CHECK_FOR_POPUP_CLOSE_INTERVAL, DEFAULT_POPUP_FEATURES } from '../constants';\nimport { parseUrlParams } from '../utils/callback';\nimport { PopupValidator } from '../utils/popup-validator';\n// Intermediate errors, since AuthorizationRequestHandler must return an AuthorizationError instance.\n// These should not be user visible.\nexport class PopupClosedError extends AuthorizationError {\n    constructor() {\n        super({ error: 'The popup was dismissed.' });\n    }\n}\nexport class PopupBlockedError extends AuthorizationError {\n    constructor() {\n        super({ error: 'The popup was blocked.' });\n    }\n}\n// Create a popup feature string from an object with keys and values\nfunction createPopupFeatureString(features) {\n    // Convert to array of strings\n    const featuresArray = Object.keys(features).reduce((arr, key) => {\n        const value = features[key];\n        // convert to feature string format: top=100\n        arr.push(`${key}=${value}`);\n        return arr;\n    }, Array());\n    // Join strings with ',' and finish with ';'\n    return featuresArray.join(',') + ';';\n}\n// Returns a set of attributes for a centered popup based on\n// the default values from constants.ts\nfunction createCenteredPopupFeatures() {\n    const windowFeatures = DEFAULT_POPUP_FEATURES;\n    const w = windowFeatures.width;\n    const h = windowFeatures.height;\n    // Fixes dual-screen position\n    const dualScreenLeft = window.screenLeft || window.screenX;\n    const dualScreenTop = window.screenTop || window.screenY;\n    const windowWidth = window.innerWidth || document.documentElement.clientWidth || screen.width;\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight || screen.height;\n    const left = (windowWidth / 2) - (w / 2);\n    const top = (windowHeight / 2) - (h / 2);\n    windowFeatures.left = left + dualScreenLeft;\n    windowFeatures.top = top + dualScreenTop;\n    return windowFeatures;\n}\nexport class PopupRequestHandler extends AuthorizationRequestHandler {\n    constructor(utils = new BasicQueryStringUtils(), crypto = new DefaultCrypto()) {\n        super(utils, crypto);\n        this.popupWindow = null;\n        this.isCancelled = false;\n        this.isBlocked = false;\n        // Watch for the popup being blocked\n        this.validator = new PopupValidator(() => {\n            // Return a specific error if blocked, so that we can handle it appropriately.\n            this.isBlocked = true;\n            this.completeAuthorizationRequestIfPossible();\n        });\n    }\n    performAuthorizationRequest(configuration, request) {\n        const url = this.buildRequestUrl(configuration, request);\n        this.pendingRequest = request;\n        this.id = request.state;\n        // Set a unique handler on the main window\n        window[`popupCallback_${request.state}`] = this.callback.bind(this);\n        // Start monitoring to see if the popup has been closed\n        this.closedTimer = window.setInterval(this.checkPopup.bind(this), CHECK_FOR_POPUP_CLOSE_INTERVAL);\n        // Create features for popup\n        const windowFeatures = createCenteredPopupFeatures();\n        // Create popup window\n        this.popupWindow = window.open(url, '_blank', createPopupFeatureString(windowFeatures));\n        // Check if the popup we just created was blocked.\n        this.validator.check(this.popupWindow);\n        // Focus the popup to bring it to the front\n        if (this.popupWindow) {\n            this.popupWindow.focus();\n        }\n    }\n    callback(url) {\n        this.responseUrl = url;\n        this.completeAuthorizationRequestIfPossible();\n    }\n    // Custom implementation to remove excess log spam\n    completeAuthorizationRequestIfPossible() {\n        return this.completeAuthorizationRequest().then((result) => {\n            if (result && this.notifier) {\n                this.notifier.onAuthorizationComplete(result.request, result.response, result.error);\n            }\n        });\n    }\n    completeAuthorizationRequest() {\n        const request = this.pendingRequest;\n        // Assert there is a pending request\n        if (!request) {\n            return Promise.resolve(null);\n        }\n        // Assert the request wasn't cancelled\n        if (this.isCancelled === true) {\n            return this.respondWithCancelled(request);\n        }\n        if (this.isBlocked === true) {\n            return this.respondWithBlocked(request);\n        }\n        // Assert there is no error\n        if (this.error) {\n            return this.respondWithError(request, this.error.message);\n        }\n        // Assert there is a response url to parse\n        if (!this.responseUrl) {\n            return Promise.resolve(null);\n        }\n        // Parse the url into data\n        const data = parseUrlParams(this.responseUrl);\n        // Extra the state\n        const state = data.state;\n        // Validate state is same as request\n        if (request.state !== state) {\n            return Promise.resolve(null);\n        }\n        // Check for an error response\n        const error = data.error;\n        if (error) {\n            // get additional optional info.\n            const errorUri = data.error_uri;\n            const errorDescription = data.error_description;\n            return this.respondWithError(request, error, errorDescription, errorUri);\n        }\n        // Respond with a code\n        const code = data.code;\n        return this.respondWithCode(request, code);\n    }\n    respondWithBlocked(request) {\n        const error = new PopupBlockedError();\n        const response = { request, error, response: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    respondWithCancelled(request) {\n        const error = new PopupClosedError();\n        const response = { request, error, response: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    respondWithError(request, errorMessage, errorDescription, errorUri) {\n        const error = new AuthorizationError({ error: errorMessage, error_description: errorDescription, error_uri: errorUri, state: request.state });\n        const response = { request, error, response: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    respondWithCode(request, code) {\n        let authorizationResponse = null;\n        if (code) {\n            authorizationResponse = new AuthorizationResponse({ code, state: request.state });\n        }\n        const response = { request, response: authorizationResponse, error: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    cleanup() {\n        window.clearInterval(this.closedTimer);\n        delete window[`popupCallback_${this.id}`];\n        if (this.popupWindow) {\n            this.popupWindow.close();\n        }\n        this.popupWindow = null;\n        this.pendingRequest = undefined;\n        this.error = undefined;\n        this.id = undefined;\n        this.responseUrl = undefined;\n    }\n    checkPopup() {\n        if (this.popupWindow && this.popupWindow.closed) {\n            // Stop checking\n            window.clearInterval(this.closedTimer);\n            this.isCancelled = true;\n            this.completeAuthorizationRequestIfPossible();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}