{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenError = exports.TokenResponse = exports.nowInSeconds = void 0; // constants\n\nvar AUTH_EXPIRY_BUFFER = 10 * 60 * -1; // 10 mins in seconds\n\n/**\n * Returns the instant of time in seconds.\n */\n\nexports.nowInSeconds = function () {\n  return Math.round(new Date().getTime() / 1000);\n};\n/**\n * Represents the Token Response type.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.1\n */\n\n\nvar TokenResponse =\n/** @class */\nfunction () {\n  function TokenResponse(response) {\n    this.accessToken = response.access_token;\n    this.tokenType = response.token_type || 'bearer';\n\n    if (response.expires_in) {\n      this.expiresIn = parseInt(response.expires_in, 10);\n    }\n\n    this.refreshToken = response.refresh_token;\n    this.scope = response.scope;\n    this.idToken = response.id_token;\n    this.issuedAt = response.issued_at || exports.nowInSeconds();\n  }\n\n  TokenResponse.prototype.toJson = function () {\n    var _a;\n\n    return {\n      access_token: this.accessToken,\n      id_token: this.idToken,\n      refresh_token: this.refreshToken,\n      scope: this.scope,\n      token_type: this.tokenType,\n      issued_at: this.issuedAt,\n      expires_in: (_a = this.expiresIn) === null || _a === void 0 ? void 0 : _a.toString()\n    };\n  };\n\n  TokenResponse.prototype.isValid = function (buffer) {\n    if (buffer === void 0) {\n      buffer = AUTH_EXPIRY_BUFFER;\n    }\n\n    if (this.expiresIn) {\n      var now = exports.nowInSeconds();\n      return now < this.issuedAt + this.expiresIn + buffer;\n    } else {\n      return true;\n    }\n  };\n\n  return TokenResponse;\n}();\n\nexports.TokenResponse = TokenResponse;\n/**\n * Represents the Token Error type.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.2\n */\n\nvar TokenError =\n/** @class */\nfunction () {\n  function TokenError(tokenError) {\n    this.error = tokenError.error;\n    this.errorDescription = tokenError.error_description;\n    this.errorUri = tokenError.error_uri;\n  }\n\n  TokenError.prototype.toJson = function () {\n    return {\n      error: this.error,\n      error_description: this.errorDescription,\n      error_uri: this.errorUri\n    };\n  };\n\n  return TokenError;\n}();\n\nexports.TokenError = TokenError;","map":{"version":3,"sources":["../src/token_response.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;AAYG;;;;;4EAuCH;;AACA,IAAM,kBAAkB,GAAG,KAAK,EAAL,GAAU,CAAC,CAAtC,C,CAA0C;;AAE1C;;AAEG;;AACU,OAAA,CAAA,YAAA,GAAe,YAAA;AAAM,SAAA,IAAI,CAAC,KAAL,CAAW,IAAI,IAAJ,GAAW,OAAX,KAAX,IAAA,CAAA;AAAuC,CAA5D;AAEb;;;;AAIG;;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AASE,WAAA,aAAA,CAAY,QAAZ,EAAuC;AACrC,SAAK,WAAL,GAAmB,QAAQ,CAAC,YAA5B;AACA,SAAK,SAAL,GAAiB,QAAQ,CAAC,UAAT,IAAuB,QAAxC;;AACA,QAAI,QAAQ,CAAC,UAAb,EAAyB;AACvB,WAAK,SAAL,GAAiB,QAAQ,CAAC,QAAQ,CAAC,UAAV,EAAsB,EAAtB,CAAzB;AACD;;AACD,SAAK,YAAL,GAAoB,QAAQ,CAAC,aAA7B;AACA,SAAK,KAAL,GAAa,QAAQ,CAAC,KAAtB;AACA,SAAK,OAAL,GAAe,QAAQ,CAAC,QAAxB;AACA,SAAK,QAAL,GAAgB,QAAQ,CAAC,SAAT,IAAsB,OAAA,CAAA,YAAA,EAAtC;AACD;;AAED,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;;;AACE,WAAO;AACL,MAAA,YAAY,EAAE,KAAK,WADd;AAEL,MAAA,QAAQ,EAAE,KAAK,OAFV;AAGL,MAAA,aAAa,EAAE,KAAK,YAHf;AAIL,MAAA,KAAK,EAAE,KAAK,KAJP;AAKL,MAAA,UAAU,EAAE,KAAK,SALZ;AAML,MAAA,SAAS,EAAE,KAAK,QANX;AAOL,MAAA,UAAU,EAAA,CAAA,EAAA,GAAE,KAAK,SAAP,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,QAAF;AAPrB,KAAP;AASD,GAVD;;AAYA,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAA2C;AAAnC,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,kBAAA;AAAmC;;AACzC,QAAI,KAAK,SAAT,EAAoB;AAClB,UAAI,GAAG,GAAG,OAAA,CAAA,YAAA,EAAV;AACA,aAAO,GAAG,GAAG,KAAK,QAAL,GAAgB,KAAK,SAArB,GAAiC,MAA9C;AACD,KAHD,MAGO;AACL,aAAO,IAAP;AACD;AACF,GAPD;;AAQF,SAAA,aAAA;AAAC,CAzCD,EAAA;;AAAa,OAAA,CAAA,aAAA,GAAA,aAAA;AA2Cb;;;;AAIG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAKE,WAAA,UAAA,CAAY,UAAZ,EAAsC;AACpC,SAAK,KAAL,GAAa,UAAU,CAAC,KAAxB;AACA,SAAK,gBAAL,GAAwB,UAAU,CAAC,iBAAnC;AACA,SAAK,QAAL,GAAgB,UAAU,CAAC,SAA3B;AACD;;AAED,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,KAAK,EAAE,KAAK,KADP;AACc,MAAA,iBAAiB,EAAE,KAAK,gBADtC;AACwD,MAAA,SAAS,EAAE,KAAK;AADxE,KAAP;AAGD,GAJD;;AAKF,SAAA,UAAA;AAAC,CAhBD,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the access token types.\n * For more information see:\n * https://tools.ietf.org/html/rfc6749#section-7.1\n */\nexport type TokenType = 'bearer'|'mac';\n\n/**\n * Represents the TokenResponse as a JSON Object.\n */\nexport interface TokenResponseJson {\n  access_token: string;\n  token_type?: TokenType; /* treating token type as optional, as its going to be inferred. */\n  expires_in?: string;    /* lifetime in seconds. */\n  refresh_token?: string;\n  scope?: string;\n  id_token?: string;  /* https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse */\n  issued_at?: number; /* when was it issued ? */\n}\n\n/**\n * Represents the possible error codes from the token endpoint.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.2\n */\nexport type ErrorType = 'invalid_request'|'invalid_client'|'invalid_grant'|'unauthorized_client'|\n    'unsupported_grant_type'|'invalid_scope';\n\n/**\n * Represents the TokenError as a JSON Object.\n */\nexport interface TokenErrorJson {\n  error: ErrorType;\n  error_description?: string;\n  error_uri?: string;\n}\n\n// constants\nconst AUTH_EXPIRY_BUFFER = 10 * 60 * -1;  // 10 mins in seconds\n\n/**\n * Returns the instant of time in seconds.\n */\nexport const nowInSeconds = () => Math.round(new Date().getTime() / 1000);\n\n/**\n * Represents the Token Response type.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.1\n */\nexport class TokenResponse {\n  accessToken: string;\n  tokenType: TokenType;\n  expiresIn: number|undefined;\n  refreshToken: string|undefined;\n  scope: string|undefined;\n  idToken: string|undefined;\n  issuedAt: number;\n\n  constructor(response: TokenResponseJson) {\n    this.accessToken = response.access_token;\n    this.tokenType = response.token_type || 'bearer';\n    if (response.expires_in) {\n      this.expiresIn = parseInt(response.expires_in, 10);\n    }\n    this.refreshToken = response.refresh_token;\n    this.scope = response.scope;\n    this.idToken = response.id_token;\n    this.issuedAt = response.issued_at || nowInSeconds();\n  }\n\n  toJson(): TokenResponseJson {\n    return {\n      access_token: this.accessToken,\n      id_token: this.idToken,\n      refresh_token: this.refreshToken,\n      scope: this.scope,\n      token_type: this.tokenType,\n      issued_at: this.issuedAt,\n      expires_in: this.expiresIn?.toString()\n    };\n  }\n\n  isValid(buffer: number = AUTH_EXPIRY_BUFFER): boolean {\n    if (this.expiresIn) {\n      let now = nowInSeconds();\n      return now < this.issuedAt + this.expiresIn + buffer;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Represents the Token Error type.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.2\n */\nexport class TokenError {\n  error: ErrorType;\n  errorDescription: string|undefined;\n  errorUri: string|undefined;\n\n  constructor(tokenError: TokenErrorJson) {\n    this.error = tokenError.error;\n    this.errorDescription = tokenError.error_description;\n    this.errorUri = tokenError.error_uri;\n  }\n\n  toJson(): TokenErrorJson {\n    return {\n      error: this.error, error_description: this.errorDescription, error_uri: this.errorUri\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}