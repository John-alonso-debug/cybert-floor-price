{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TestRequestor = exports.FetchRequestor = exports.JQueryRequestor = exports.Requestor = void 0;\n\nvar errors_1 = require(\"./errors\");\n/**\n * An class that abstracts away the ability to make an XMLHttpRequest.\n */\n\n\nvar Requestor =\n/** @class */\nfunction () {\n  function Requestor() {}\n\n  return Requestor;\n}();\n\nexports.Requestor = Requestor;\n/**\n * Uses $.ajax to makes the Ajax requests.\n */\n\nvar JQueryRequestor =\n/** @class */\nfunction (_super) {\n  __extends(JQueryRequestor, _super);\n\n  function JQueryRequestor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  JQueryRequestor.prototype.xhr = function (settings) {\n    // NOTE: using jquery to make XHR's as whatwg-fetch requires\n    // that I target ES6.\n    var xhr = $.ajax(settings);\n    return new Promise(function (resolve, reject) {\n      xhr.then(function (data, textStatus, jqXhr) {\n        resolve(data);\n      }, function (jqXhr, textStatus, error) {\n        reject(new errors_1.AppAuthError(error));\n      });\n    });\n  };\n\n  return JQueryRequestor;\n}(Requestor);\n\nexports.JQueryRequestor = JQueryRequestor;\n/**\n * Uses fetch API to make Ajax requests\n */\n\nvar FetchRequestor =\n/** @class */\nfunction (_super) {\n  __extends(FetchRequestor, _super);\n\n  function FetchRequestor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FetchRequestor.prototype.xhr = function (settings) {\n    if (!settings.url) {\n      return Promise.reject(new errors_1.AppAuthError('A URL must be provided.'));\n    }\n\n    var url = new URL(settings.url);\n    var requestInit = {};\n    requestInit.method = settings.method;\n    requestInit.mode = 'cors';\n\n    if (settings.data) {\n      if (settings.method && settings.method.toUpperCase() === 'POST') {\n        requestInit.body = settings.data;\n      } else {\n        var searchParams = new URLSearchParams(settings.data);\n        searchParams.forEach(function (value, key) {\n          url.searchParams.append(key, value);\n        });\n      }\n    } // Set the request headers\n\n\n    requestInit.headers = {};\n\n    if (settings.headers) {\n      for (var i in settings.headers) {\n        if (settings.headers.hasOwnProperty(i)) {\n          requestInit.headers[i] = settings.headers[i];\n        }\n      }\n    }\n\n    var isJsonDataType = settings.dataType && settings.dataType.toLowerCase() === 'json'; // Set 'Accept' header value for json requests (Taken from\n    // https://github.com/jquery/jquery/blob/e0d941156900a6bff7c098c8ea7290528e468cf8/src/ajax.js#L644\n    // )\n\n    if (isJsonDataType) {\n      requestInit.headers['Accept'] = 'application/json, text/javascript, */*; q=0.01';\n    }\n\n    return fetch(url.toString(), requestInit).then(function (response) {\n      if (response.status >= 200 && response.status < 300) {\n        var contentType = response.headers.get('content-type');\n\n        if (isJsonDataType || contentType && contentType.indexOf('application/json') !== -1) {\n          return response.json();\n        } else {\n          return response.text();\n        }\n      } else {\n        return Promise.reject(new errors_1.AppAuthError(response.status.toString(), response.statusText));\n      }\n    });\n  };\n\n  return FetchRequestor;\n}(Requestor);\n\nexports.FetchRequestor = FetchRequestor;\n/**\n * Should be used only in the context of testing. Just uses the underlying\n * Promise to mock the behavior of the Requestor.\n */\n\nvar TestRequestor =\n/** @class */\nfunction (_super) {\n  __extends(TestRequestor, _super);\n\n  function TestRequestor(promise) {\n    var _this = _super.call(this) || this;\n\n    _this.promise = promise;\n    return _this;\n  }\n\n  TestRequestor.prototype.xhr = function (settings) {\n    return this.promise; // unsafe cast\n  };\n\n  return TestRequestor;\n}(Requestor);\n\nexports.TestRequestor = TestRequestor;","map":{"version":3,"sources":["../src/xhr.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AppAuthError} from './errors';\n\n/**\n * An class that abstracts away the ability to make an XMLHttpRequest.\n */\nexport abstract class Requestor {\n  abstract xhr<T>(settings: JQueryAjaxSettings): Promise<T>;\n}\n\n/**\n * Uses $.ajax to makes the Ajax requests.\n */\nexport class JQueryRequestor extends Requestor {\n  xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    // NOTE: using jquery to make XHR's as whatwg-fetch requires\n    // that I target ES6.\n    const xhr = $.ajax(settings);\n    return new Promise<T>((resolve, reject) => {\n      xhr.then(\n          (data, textStatus, jqXhr) => {\n            resolve(data as T);\n          },\n          (jqXhr, textStatus, error) => {\n            reject(new AppAuthError(error));\n          });\n    });\n  }\n}\n\n\n/**\n * Uses fetch API to make Ajax requests\n */\nexport class FetchRequestor extends Requestor {\n  xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    if (!settings.url) {\n      return Promise.reject(new AppAuthError('A URL must be provided.'));\n    }\n    let url: URL = new URL(<string>settings.url);\n    let requestInit: RequestInit = {};\n    requestInit.method = settings.method;\n    requestInit.mode = 'cors';\n\n    if (settings.data) {\n      if (settings.method && settings.method.toUpperCase() === 'POST') {\n        requestInit.body = <string>settings.data;\n      } else {\n        let searchParams = new URLSearchParams(settings.data);\n        searchParams.forEach((value, key) => {\n          url.searchParams.append(key, value);\n        });\n      }\n    }\n\n    // Set the request headers\n    requestInit.headers = {};\n    if (settings.headers) {\n      for (let i in settings.headers) {\n        if (settings.headers.hasOwnProperty(i)) {\n          requestInit.headers[i] = <string>settings.headers[i];\n        }\n      }\n    }\n\n    const isJsonDataType = settings.dataType && settings.dataType.toLowerCase() === 'json';\n\n    // Set 'Accept' header value for json requests (Taken from\n    // https://github.com/jquery/jquery/blob/e0d941156900a6bff7c098c8ea7290528e468cf8/src/ajax.js#L644\n    // )\n    if (isJsonDataType) {\n      requestInit.headers['Accept'] = 'application/json, text/javascript, */*; q=0.01';\n    }\n\n    return fetch(url.toString(), requestInit).then(response => {\n      if (response.status >= 200 && response.status < 300) {\n        const contentType = response.headers.get('content-type');\n        if (isJsonDataType || (contentType && contentType.indexOf('application/json') !== -1)) {\n          return response.json();\n        } else {\n          return response.text();\n        }\n      } else {\n        return Promise.reject(new AppAuthError(response.status.toString(), response.statusText));\n      }\n    });\n  }\n}\n\n/**\n * Should be used only in the context of testing. Just uses the underlying\n * Promise to mock the behavior of the Requestor.\n */\nexport class TestRequestor extends Requestor {\n  constructor(public promise: Promise<any>) {\n    super();\n  }\n  xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    return this.promise;  // unsafe cast\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}