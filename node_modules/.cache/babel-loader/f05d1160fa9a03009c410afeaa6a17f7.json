{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseTokenRequestHandler = void 0;\n\nvar errors_1 = require(\"./errors\");\n\nvar query_string_utils_1 = require(\"./query_string_utils\");\n\nvar token_response_1 = require(\"./token_response\");\n\nvar xhr_1 = require(\"./xhr\");\n/**\n * The default token request handler.\n */\n\n\nvar BaseTokenRequestHandler =\n/** @class */\nfunction () {\n  function BaseTokenRequestHandler(requestor, utils) {\n    if (requestor === void 0) {\n      requestor = new xhr_1.JQueryRequestor();\n    }\n\n    if (utils === void 0) {\n      utils = new query_string_utils_1.BasicQueryStringUtils();\n    }\n\n    this.requestor = requestor;\n    this.utils = utils;\n  }\n\n  BaseTokenRequestHandler.prototype.isTokenResponse = function (response) {\n    return response.error === undefined;\n  };\n\n  BaseTokenRequestHandler.prototype.performRevokeTokenRequest = function (configuration, request) {\n    var revokeTokenResponse = this.requestor.xhr({\n      url: configuration.revocationEndpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      data: this.utils.stringify(request.toStringMap())\n    });\n    return revokeTokenResponse.then(function (response) {\n      return true;\n    });\n  };\n\n  BaseTokenRequestHandler.prototype.performTokenRequest = function (configuration, request) {\n    var _this = this;\n\n    var tokenResponse = this.requestor.xhr({\n      url: configuration.tokenEndpoint,\n      method: 'POST',\n      dataType: 'json',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      data: this.utils.stringify(request.toStringMap())\n    });\n    return tokenResponse.then(function (response) {\n      if (_this.isTokenResponse(response)) {\n        return new token_response_1.TokenResponse(response);\n      } else {\n        return Promise.reject(new errors_1.AppAuthError(response.error, new token_response_1.TokenError(response)));\n      }\n    });\n  };\n\n  return BaseTokenRequestHandler;\n}();\n\nexports.BaseTokenRequestHandler = BaseTokenRequestHandler;","map":{"version":3,"sources":["../src/token_request_handler.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;AAYG;;;;;;;AAGH,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAGA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AAkBA;;AAEG;;;AACH,IAAA,uBAAA;AAAA;AAAA,YAAA;AACE,WAAA,uBAAA,CACoB,SADpB,EAEoB,KAFpB,EAEyE;AADrD,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,IAA2B,KAAA,CAAA,eAA3B,EAAA;AAA4C;;AAC5C,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,IAA8B,oBAAA,CAAA,qBAA9B,EAAA;AAAqD;;AADrD,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,KAAA,GAAA,KAAA;AAAyD;;AAErE,EAAA,uBAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,QAAxB,EACsC;AACpC,WAAQ,QAA2B,CAAC,KAA5B,KAAsC,SAA9C;AACD,GAHO;;AAKR,EAAA,uBAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,UACI,aADJ,EAEI,OAFJ,EAE+B;AAC7B,QAAI,mBAAmB,GAAG,KAAK,SAAL,CAAe,GAAf,CAA4B;AACpD,MAAA,GAAG,EAAE,aAAa,CAAC,kBADiC;AAEpD,MAAA,MAAM,EAAE,MAF4C;AAGpD,MAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAH2C;AAIpD,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW,SAAX,CAAqB,OAAO,CAAC,WAAR,EAArB;AAJ8C,KAA5B,CAA1B;AAOA,WAAO,mBAAmB,CAAC,IAApB,CAAyB,UAAA,QAAA,EAAQ;AACtC,aAAO,IAAP;AACD,KAFM,CAAP;AAGD,GAbD;;AAeA,EAAA,uBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,aAApB,EAAsE,OAAtE,EAA2F;AAA3F,QAAA,KAAA,GAAA,IAAA;;AAEE,QAAI,aAAa,GAAG,KAAK,SAAL,CAAe,GAAf,CAAqD;AACvE,MAAA,GAAG,EAAE,aAAa,CAAC,aADoD;AAEvE,MAAA,MAAM,EAAE,MAF+D;AAGvE,MAAA,QAAQ,EAAE,MAH6D;AAIvE,MAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAJ8D;AAKvE,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW,SAAX,CAAqB,OAAO,CAAC,WAAR,EAArB;AALiE,KAArD,CAApB;AAQA,WAAO,aAAa,CAAC,IAAd,CAAmB,UAAA,QAAA,EAAQ;AAChC,UAAI,KAAI,CAAC,eAAL,CAAqB,QAArB,CAAJ,EAAoC;AAClC,eAAO,IAAI,gBAAA,CAAA,aAAJ,CAAkB,QAAlB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,OAAO,CAAC,MAAR,CACH,IAAI,QAAA,CAAA,YAAJ,CAAiB,QAAQ,CAAC,KAA1B,EAAiC,IAAI,gBAAA,CAAA,UAAJ,CAAe,QAAf,CAAjC,CADG,CAAP;AAED;AACF,KAPM,CAAP;AAQD,GAlBD;;AAmBF,SAAA,uBAAA;AAAC,CA5CD,EAAA;;AAAa,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AuthorizationServiceConfiguration} from './authorization_service_configuration';\nimport {AppAuthError} from './errors';\nimport {BasicQueryStringUtils, QueryStringUtils} from './query_string_utils';\nimport {RevokeTokenRequest} from './revoke_token_request';\nimport {TokenRequest} from './token_request';\nimport {TokenError, TokenErrorJson, TokenResponse, TokenResponseJson} from './token_response';\nimport {JQueryRequestor, Requestor} from './xhr';\n\n\n/**\n * Represents an interface which can make a token request.\n */\nexport interface TokenRequestHandler {\n  /**\n   * Performs the token request, given the service configuration.\n   */\n  performTokenRequest(configuration: AuthorizationServiceConfiguration, request: TokenRequest):\n      Promise<TokenResponse>;\n\n  performRevokeTokenRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: RevokeTokenRequest): Promise<boolean>;\n}\n\n/**\n * The default token request handler.\n */\nexport class BaseTokenRequestHandler implements TokenRequestHandler {\n  constructor(\n      public readonly requestor: Requestor = new JQueryRequestor(),\n      public readonly utils: QueryStringUtils = new BasicQueryStringUtils()) {}\n\n  private isTokenResponse(response: TokenResponseJson|\n                          TokenErrorJson): response is TokenResponseJson {\n    return (response as TokenErrorJson).error === undefined;\n  }\n\n  performRevokeTokenRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: RevokeTokenRequest): Promise<boolean> {\n    let revokeTokenResponse = this.requestor.xhr<boolean>({\n      url: configuration.revocationEndpoint,\n      method: 'POST',\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: this.utils.stringify(request.toStringMap())\n    });\n\n    return revokeTokenResponse.then(response => {\n      return true;\n    });\n  }\n\n  performTokenRequest(configuration: AuthorizationServiceConfiguration, request: TokenRequest):\n      Promise<TokenResponse> {\n    let tokenResponse = this.requestor.xhr<TokenResponseJson|TokenErrorJson>({\n      url: configuration.tokenEndpoint,\n      method: 'POST',\n      dataType: 'json',  // adding implicit dataType\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: this.utils.stringify(request.toStringMap())\n    });\n\n    return tokenResponse.then(response => {\n      if (this.isTokenResponse(response)) {\n        return new TokenResponse(response);\n      } else {\n        return Promise.reject<TokenResponse>(\n            new AppAuthError(response.error, new TokenError(response)));\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}