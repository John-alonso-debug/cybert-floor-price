{"ast":null,"code":"import { ServerError } from 'bitski-provider';\nimport { ParseError } from '../errors/parse-error';\n/**\n * Parses a Fetch Response to extract either the result or the error\n * @param response the fetch response to parse\n */\n\nexport function parseResponse(response) {\n  return response.json().catch(() => {\n    throw ParseError.InvalidJSON();\n  }).then(json => {\n    if (response.status >= 200 && response.status < 300) {\n      return json;\n    } else {\n      if (json && json.error && json.error.message) {\n        throw new ServerError(json.error.message, response.status, response.url);\n      } else if (json && json.error) {\n        throw new ServerError(json.error, response.status, response.url);\n      } else {\n        throw ParseError.UnknownError();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/node_modules/bitski/dist/esm/utils/request-utils.js"],"names":["ServerError","ParseError","parseResponse","response","json","catch","InvalidJSON","then","status","error","message","url","UnknownError"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AACpC,SAAOA,QAAQ,CAACC,IAAT,GAAgBC,KAAhB,CAAsB,MAAM;AAC/B,UAAMJ,UAAU,CAACK,WAAX,EAAN;AACH,GAFM,EAEJC,IAFI,CAEEH,IAAD,IAAU;AACd,QAAID,QAAQ,CAACK,MAAT,IAAmB,GAAnB,IAA0BL,QAAQ,CAACK,MAAT,GAAkB,GAAhD,EAAqD;AACjD,aAAOJ,IAAP;AACH,KAFD,MAGK;AACD,UAAIA,IAAI,IAAIA,IAAI,CAACK,KAAb,IAAsBL,IAAI,CAACK,KAAL,CAAWC,OAArC,EAA8C;AAC1C,cAAM,IAAIV,WAAJ,CAAgBI,IAAI,CAACK,KAAL,CAAWC,OAA3B,EAAoCP,QAAQ,CAACK,MAA7C,EAAqDL,QAAQ,CAACQ,GAA9D,CAAN;AACH,OAFD,MAGK,IAAIP,IAAI,IAAIA,IAAI,CAACK,KAAjB,EAAwB;AACzB,cAAM,IAAIT,WAAJ,CAAgBI,IAAI,CAACK,KAArB,EAA4BN,QAAQ,CAACK,MAArC,EAA6CL,QAAQ,CAACQ,GAAtD,CAAN;AACH,OAFI,MAGA;AACD,cAAMV,UAAU,CAACW,YAAX,EAAN;AACH;AACJ;AACJ,GAjBM,CAAP;AAkBH","sourcesContent":["import { ServerError } from 'bitski-provider';\nimport { ParseError } from '../errors/parse-error';\n/**\n * Parses a Fetch Response to extract either the result or the error\n * @param response the fetch response to parse\n */\nexport function parseResponse(response) {\n    return response.json().catch(() => {\n        throw ParseError.InvalidJSON();\n    }).then((json) => {\n        if (response.status >= 200 && response.status < 300) {\n            return json;\n        }\n        else {\n            if (json && json.error && json.error.message) {\n                throw new ServerError(json.error.message, response.status, response.url);\n            }\n            else if (json && json.error) {\n                throw new ServerError(json.error, response.status, response.url);\n            }\n            else {\n                throw ParseError.UnknownError();\n            }\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}