{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultCrypto = exports.textEncodeLite = exports.urlSafe = exports.bufferToString = void 0;\n\nvar base64 = require(\"base64-js\");\n\nvar errors_1 = require(\"./errors\");\n\nvar HAS_CRYPTO = typeof window !== 'undefined' && !!window.crypto;\nvar HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!window.crypto.subtle;\nvar CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction bufferToString(buffer) {\n  var state = [];\n\n  for (var i = 0; i < buffer.byteLength; i += 1) {\n    var index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n\n  return state.join('');\n}\n\nexports.bufferToString = bufferToString;\n\nfunction urlSafe(buffer) {\n  var encoded = base64.fromByteArray(new Uint8Array(buffer));\n  return encoded.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexports.urlSafe = urlSafe; // adapted from source: http://stackoverflow.com/a/11058858\n// this is used in place of TextEncode as the api is not yet\n// well supported: https://caniuse.com/#search=TextEncoder\n\nfunction textEncodeLite(str) {\n  var buf = new ArrayBuffer(str.length);\n  var bufView = new Uint8Array(buf);\n\n  for (var i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n\n  return bufView;\n}\n\nexports.textEncodeLite = textEncodeLite;\n/**\n * The default implementation of the `Crypto` interface.\n * This uses the capabilities of the browser.\n */\n\nvar DefaultCrypto =\n/** @class */\nfunction () {\n  function DefaultCrypto() {}\n\n  DefaultCrypto.prototype.generateRandom = function (size) {\n    var buffer = new Uint8Array(size);\n\n    if (HAS_CRYPTO) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      // fall back to Math.random() if nothing else is available\n      for (var i = 0; i < size; i += 1) {\n        buffer[i] = Math.random() * CHARSET.length | 0;\n      }\n    }\n\n    return bufferToString(buffer);\n  };\n\n  DefaultCrypto.prototype.deriveChallenge = function (code) {\n    if (code.length < 43 || code.length > 128) {\n      return Promise.reject(new errors_1.AppAuthError('Invalid code length.'));\n    }\n\n    if (!HAS_SUBTLE_CRYPTO) {\n      return Promise.reject(new errors_1.AppAuthError('window.crypto.subtle is unavailable.'));\n    }\n\n    return new Promise(function (resolve, reject) {\n      crypto.subtle.digest('SHA-256', textEncodeLite(code)).then(function (buffer) {\n        return resolve(urlSafe(new Uint8Array(buffer)));\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  };\n\n  return DefaultCrypto;\n}();\n\nexports.DefaultCrypto = DefaultCrypto;","map":{"version":3,"sources":["../src/crypto_utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;AAYG;;;;;;;AAEH,IAAA,MAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,UAAU,GAAG,OAAO,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAAE,MAAM,CAAC,MAA9D;AACA,IAAM,iBAAiB,GAAG,UAAU,IAAI,CAAC,CAAE,MAAM,CAAC,MAAP,CAAc,MAAzD;AACA,IAAM,OAAO,GAAG,gEAAhB;;AAEA,SAAgB,cAAhB,CAA+B,MAA/B,EAAiD;AAC/C,MAAI,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,UAA3B,EAAuC,CAAC,IAAI,CAA5C,EAA+C;AAC7C,QAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,OAAO,CAAC,MAAhC;AACA,IAAA,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,KAAD,CAAlB;AACD;;AACD,SAAO,KAAK,CAAC,IAAN,CAAW,EAAX,CAAP;AACD;;AAPD,OAAA,CAAA,cAAA,GAAA,cAAA;;AASA,SAAgB,OAAhB,CAAwB,MAAxB,EAA0C;AACxC,MAAM,OAAO,GAAG,MAAM,CAAC,aAAP,CAAqB,IAAI,UAAJ,CAAe,MAAf,CAArB,CAAhB;AACA,SAAO,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,GAAvB,EAA4B,OAA5B,CAAoC,KAApC,EAA2C,GAA3C,EAAgD,OAAhD,CAAwD,IAAxD,EAA8D,EAA9D,CAAP;AACD;;AAHD,OAAA,CAAA,OAAA,GAAA,OAAA,C,CAKA;AACA;AACA;;AACA,SAAgB,cAAhB,CAA+B,GAA/B,EAA0C;AACxC,MAAM,GAAG,GAAG,IAAI,WAAJ,CAAgB,GAAG,CAAC,MAApB,CAAZ;AACA,MAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,GAAf,CAAhB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAb;AACD;;AACD,SAAO,OAAP;AACD;;AARD,OAAA,CAAA,cAAA,GAAA,cAAA;AAsBA;;;AAGG;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA,CA4BC;;AA3BC,EAAA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,IAAf,EAA2B;AACzB,QAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAf;;AACA,QAAI,UAAJ,EAAgB;AACd,MAAA,MAAM,CAAC,MAAP,CAAc,eAAd,CAA8B,MAA9B;AACD,KAFD,MAEO;AACL;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,IAAI,CAA/B,EAAkC;AAChC,QAAA,MAAM,CAAC,CAAD,CAAN,GAAa,IAAI,CAAC,MAAL,KAAgB,OAAO,CAAC,MAAzB,GAAmC,CAA/C;AACD;AACF;;AACD,WAAO,cAAc,CAAC,MAAD,CAArB;AACD,GAXD;;AAaA,EAAA,aAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,IAAhB,EAA4B;AAC1B,QAAI,IAAI,CAAC,MAAL,GAAc,EAAd,IAAoB,IAAI,CAAC,MAAL,GAAc,GAAtC,EAA2C;AACzC,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,QAAA,CAAA,YAAJ,CAAiB,sBAAjB,CAAf,CAAP;AACD;;AACD,QAAI,CAAC,iBAAL,EAAwB;AACtB,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,QAAA,CAAA,YAAJ,CAAiB,sCAAjB,CAAf,CAAP;AACD;;AAED,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACjC,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,SAArB,EAAgC,cAAc,CAAC,IAAD,CAA9C,EAAsD,IAAtD,CAA2D,UAAA,MAAA,EAAM;AAC/D,eAAO,OAAO,CAAC,OAAO,CAAC,IAAI,UAAJ,CAAe,MAAf,CAAD,CAAR,CAAd;AACD,OAFD,EAEG,UAAA,KAAA,EAAK;AAAI,eAAA,MAAM,CAAN,KAAM,CAAN;AAAa,OAFzB;AAGD,KAJM,CAAP;AAKD,GAbD;;AAcF,SAAA,aAAA;AAAC,CA5BD,EAAA;;AAAa,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as base64 from 'base64-js';\n\nimport {AppAuthError} from './errors';\n\nconst HAS_CRYPTO = typeof window !== 'undefined' && !!(window.crypto as any);\nconst HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!(window.crypto.subtle as any);\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nexport function bufferToString(buffer: Uint8Array) {\n  let state = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    let index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nexport function urlSafe(buffer: Uint8Array): string {\n  const encoded = base64.fromByteArray(new Uint8Array(buffer));\n  return encoded.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n// adapted from source: http://stackoverflow.com/a/11058858\n// this is used in place of TextEncode as the api is not yet\n// well supported: https://caniuse.com/#search=TextEncoder\nexport function textEncodeLite(str: string) {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufView;\n}\n\nexport interface Crypto {\n  /**\n   * Generate a random string\n   */\n  generateRandom(size: number): string;\n  /**\n   * Compute the SHA256 of a given code.\n   * This is useful when using PKCE.\n   */\n  deriveChallenge(code: string): Promise<string>;\n}\n\n/**\n * The default implementation of the `Crypto` interface.\n * This uses the capabilities of the browser.\n */\nexport class DefaultCrypto implements Crypto {\n  generateRandom(size: number) {\n    const buffer = new Uint8Array(size);\n    if (HAS_CRYPTO) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      // fall back to Math.random() if nothing else is available\n      for (let i = 0; i < size; i += 1) {\n        buffer[i] = (Math.random() * CHARSET.length) | 0;\n      }\n    }\n    return bufferToString(buffer);\n  }\n\n  deriveChallenge(code: string): Promise<string> {\n    if (code.length < 43 || code.length > 128) {\n      return Promise.reject(new AppAuthError('Invalid code length.'));\n    }\n    if (!HAS_SUBTLE_CRYPTO) {\n      return Promise.reject(new AppAuthError('window.crypto.subtle is unavailable.'));\n    }\n\n    return new Promise((resolve, reject) => {\n      crypto.subtle.digest('SHA-256', textEncodeLite(code)).then(buffer => {\n        return resolve(urlSafe(new Uint8Array(buffer)));\n      }, error => reject(error));\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}