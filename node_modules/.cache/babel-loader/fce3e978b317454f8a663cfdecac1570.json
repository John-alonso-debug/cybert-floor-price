{"ast":null,"code":"var _jsxFileName = \"/Users/helen/fi/protocol-demo/frontend/src/App.tsx\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\"; // @ts-ignore\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // @ts-ignore\n\nimport Fortmatic from \"fortmatic\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Authereum from \"authereum\";\nimport { Bitski } from \"bitski\";\nimport Button from \"./components/Button\";\nimport Column from \"./components/Column\";\nimport Wrapper from \"./components/Wrapper\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/Header\";\nimport Loader from \"./components/Loader\";\nimport ModalResult from \"./components/ModalResult\";\nimport AccountAssets from \"./components/AccountAssets\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport { formatTestTransaction, getChainData } from \"./helpers/utilities\";\nimport { fonts } from \"./styles\";\nimport { ETH_SEND_TRANSACTION } from \"./constants\";\nimport { ethers, utils } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DAI_ABI = require(\"./abi/dai.json\");\n\nconst StrategyCurve3CRVv2_ABI = require(\"./abi/StrategyCurve3CRVv2.json\");\n\nconst ControllerV4_ABI = require(\"./abi/ControllerV4.json\");\n\nconst PickleJar_ABI = require(\"./abi/PickleJar.json\");\n\nconst DAI = \"0x6b175474e89094c44da98b954eedeac495271d0f\";\nconst three_crv = \"0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\";\nconst PickleJar = \"0xB54aE04A1472FCdd0f3C122cF716c56415F4D853\";\nconst StrategyCurve3CRVv2 = \"0x6E7622518572571aFf70c66440B82f3Dcfef1C5D\";\nconst ControllerV4 = \"0x4801F0559606C4cfDe29360D82A3836Aa2fa915d\";\nconst SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n`;\n_c = SLayout;\nconst SContent = styled(Wrapper)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n_c2 = SContent;\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n_c3 = SContainer;\nconst SLanding = styled(Column)`\n  height: 600px;\n`;\n_c4 = SLanding;\nconst SModalContainer = styled.div`\n  width: 100%;\n  position: relative;\n  word-wrap: break-word;\n`;\n_c5 = SModalContainer;\nconst SModalTitle = styled.div`\n  margin: 1em 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\n_c6 = SModalTitle;\nconst SModalParagraph = styled.p`\n  margin-top: 30px;\n`; // @ts-ignore\n\n_c7 = SModalParagraph;\nconst SBalances = styled(SLanding)`\n  height: 100%;\n  & h3 {\n    padding-top: 30px;\n  }\n`;\n_c8 = SBalances;\nconst STestButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n_c9 = STestButtonContainer;\nconst STestButton = styled(Button)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  max-width: 175px;\n  margin: 12px;\n`;\n_c10 = STestButton;\nconst INITIAL_STATE = {\n  fetching: false,\n  address: \"\",\n  web3: null,\n  provider: null,\n  connected: false,\n  chainId: 1,\n  networkId: 1,\n  assets: [],\n  assets2: [],\n  showModal: false,\n  pendingRequest: false,\n  result: null\n};\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n  web3.eth.extend({\n    methods: [{\n      name: \"chainId\",\n      call: \"eth_chainId\",\n      outputFormatter: web3.utils.hexToNumber\n    }]\n  });\n  return web3;\n}\n\nclass App extends React.Component {\n  // @ts-ignore\n  constructor(props) {\n    super(props);\n    this.web3Modal = void 0;\n    this.state = void 0;\n    this.claim = \"0x5aa37930cbe5f4b04d617f71f78abc6c21be4cc0\";\n\n    this.onConnect = async () => {\n      const provider = await this.web3Modal.connect();\n      await this.subscribeProvider(provider);\n      const web3 = initWeb3(provider);\n      const accounts = await web3.eth.getAccounts();\n      const address = accounts[0];\n      const networkId = await web3.eth.net.getId();\n      const chainId = await web3.eth.chainId();\n      console.log(`chainId is ${chainId}  networkId ${networkId}`);\n      await this.setState({\n        web3,\n        provider,\n        connected: true,\n        address,\n        chainId,\n        networkId\n      });\n      await this.getAccountAssets(provider);\n    };\n\n    this.subscribeProvider = async provider => {\n      if (!provider.on) {\n        return;\n      }\n\n      provider.on(\"close\", () => this.resetApp());\n      provider.on(\"accountsChanged\", async accounts => {\n        await this.setState({\n          address: accounts[0]\n        });\n        await this.getAccountAssets(provider);\n      });\n      provider.on(\"chainChanged\", async chainId => {\n        const {\n          web3\n        } = this.state;\n        const networkId = await web3.eth.net.getId();\n        await this.setState({\n          chainId,\n          networkId\n        });\n        await this.getAccountAssets(provider);\n      });\n      provider.on(\"networkChanged\", async networkId => {\n        const {\n          web3\n        } = this.state;\n        const chainId = await web3.eth.chainId();\n        await this.setState({\n          chainId,\n          networkId\n        });\n        await this.getAccountAssets(provider);\n      });\n    };\n\n    this.getNetwork = () => getChainData(this.state.chainId).network;\n\n    this.getProviderOptions = () => {\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId: process.env.REACT_APP_INFURA_ID\n          }\n        },\n        torus: {\n          package: Torus\n        },\n        fortmatic: {\n          package: Fortmatic,\n          options: {\n            key: process.env.REACT_APP_FORTMATIC_KEY\n          }\n        },\n        authereum: {\n          package: Authereum\n        },\n        bitski: {\n          package: Bitski,\n          options: {\n            clientId: process.env.REACT_APP_BITSKI_CLIENT_ID,\n            callbackUrl: window.location.href + \"bitski-callback.html\"\n          }\n        }\n      };\n      return providerOptions;\n    };\n\n    this.getAccountAssets = async provider => {\n      const {\n        address,\n        chainId\n      } = this.state;\n      this.setState({\n        fetching: false\n      });\n\n      try {\n        const prov = new ethers.providers.Web3Provider(provider);\n        let balance = await prov.getBalance(address);\n        console.log('[wa]:', balance.toString(), \",\", balance);\n        let assets = [];\n        let assets2 = [];\n        let ethAsset = {\n          \"symbol\": \"ETH\",\n          \"name\": \"Ether\",\n          \"decimals\": \"18\",\n          \"contractAddress\": \"\",\n          \"balance\": balance\n        };\n        assets.push(ethAsset); // A Human-Readable ABI; any supported ABI format could be used\n\n        const abi = [// Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\"];\n        this.setState({\n          fetching: false,\n          assets\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          fetching: false\n        });\n      }\n    };\n\n    this.toggleModal = () => this.setState({\n      showModal: !this.state.showModal\n    });\n\n    this.testSendTransaction = async () => {\n      const {\n        web3,\n        address,\n        chainId\n      } = this.state;\n\n      if (!web3) {\n        return;\n      }\n\n      const tx = await formatTestTransaction(address, chainId);\n\n      try {\n        // open modal\n        this.toggleModal(); // toggle pending request indicator\n\n        this.setState({\n          pendingRequest: true\n        }); // @ts-ignore\n\n        function sendTransaction(_tx) {\n          return new Promise((resolve, reject) => {\n            web3.eth.sendTransaction(_tx).once(\"transactionHash\", txHash => resolve(txHash)).catch(err => reject(err));\n          });\n        } // send transaction\n\n\n        const result = await sendTransaction(tx); // format displayed result\n\n        const formattedResult = {\n          action: ETH_SEND_TRANSACTION,\n          txHash: result,\n          from: address,\n          to: address,\n          value: \"0 ETH\"\n        }; // display result\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: formattedResult || null\n        });\n      } catch (error) {\n        console.error(error); // tslint:disable-line\n\n        this.setState({\n          web3,\n          pendingRequest: false,\n          result: null\n        });\n      }\n    };\n\n    this.setController = async () => {\n      let web3 = new Web3(Web3.givenProvider);\n      const accounts = await web3.eth.getAccounts();\n      let controller = new web3.eth.Contract(ControllerV4_ABI, ControllerV4);\n      let rep = await controller.methods.setJar(three_crv, PickleJar).send({\n        from: accounts[0]\n      });\n      console.log(`controller.methods.setJar  response :`, JSON.stringify(rep));\n      rep = await controller.methods.approveStrategy(three_crv, StrategyCurve3CRVv2).send({\n        from: accounts[0]\n      });\n      console.log(`approveStrategy rep is ${JSON.stringify(rep)}`);\n      rep = await controller.methods.setStrategy(three_crv, StrategyCurve3CRVv2).send({\n        from: accounts[0]\n      });\n      console.log(`setStrategy rep is ${JSON.stringify(rep)}`);\n    };\n\n    this.testApprove = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function approve(address spender, uint256 amount) returns (bool)\"];\n      const test1 = new ethers.Contract(three_crv, abi, prov.getSigner()); // open modal\n\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const rep = await test1.approve(PickleJar, utils.parseUnits('1000000', 18).toString());\n      console.log(`approve DAI rep is ${JSON.stringify(rep)}`); // display result\n\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testDeposit = async () => {\n      // let web3 = new Web3(Web3.givenProvider);\n      // const accounts = await web3.eth.getAccounts();\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \" function deposit(uint256 _amount) public\", \"function totalSupply() view returns (uint256)\", \"function balance() public view returns (uint256)\"];\n      const test1 = new ethers.Contract(PickleJar, abi, prov.getSigner());\n      console.log('xxx:', test1);\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      let rep = await test1.balance();\n      console.log(`test1.balance  response :`, JSON.stringify(rep.toString())); // const rep = await test1.totalSupply()\n\n      rep = await test1.deposit(utils.parseUnits('100', 18).toString());\n      console.log(`jar.methods.deposi  response :`, JSON.stringify(rep));\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testBalance = async () => {\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function deposit(uint256 _amount) public\", \"function totalSupply() view returns (uint256)\", \"function balanceOf(address account) external view returns (uint256)\"];\n      const test1 = new ethers.Contract(three_crv, abi, prov.getSigner());\n      this.toggleModal();\n      this.setState({\n        pendingRequest: true\n      });\n      const rep = await test1.balanceOf('0xD90D00101E1Cf4729f02A5598f4288E00001FC04');\n      console.log(`jar.methods.testController  response :`, JSON.stringify(rep.toString()));\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testWithdraw = async () => {\n      // let web3 = new Web3(Web3.givenProvider);\n      // const accounts = await web3.eth.getAccounts();\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function earn(address _token, uint256 _amount) public\"];\n      const test1 = new ethers.Contract(PickleJar, abi, prov.getSigner());\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const rep = await test1.withdrawAll();\n      console.log(`jar.methods.withdrawAll  response :`, JSON.stringify(rep));\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.testEarn = async () => {\n      // let web3 = new Web3(Web3.givenProvider);\n      // const accounts = await web3.eth.getAccounts();\n      const provider = await this.web3Modal.connect();\n      const prov = new ethers.providers.Web3Provider(provider);\n      const abi = [// Authenticated Functions\n      \"function withdrawAll() external\"];\n      const test1 = new ethers.Contract(PickleJar, abi, prov.getSigner());\n      this.toggleModal(); // toggle pending request indicator\n\n      this.setState({\n        pendingRequest: true\n      });\n      const rep = await test1.withdrawAll();\n      console.log(`jar.methods.withdrawAll  response :`, JSON.stringify(rep));\n      this.setState({\n        pendingRequest: false,\n        result: \"ok\" || null\n      });\n    };\n\n    this.resetApp = async () => {\n      const {\n        web3\n      } = this.state;\n\n      if (web3 && web3.currentProvider && web3.currentProvider.close) {\n        await web3.currentProvider.close();\n      }\n\n      await this.web3Modal.clearCachedProvider();\n      this.setState({ ...INITIAL_STATE\n      });\n    };\n\n    this.render = () => {\n      const {\n        assets,\n        assets2,\n        address,\n        connected,\n        chainId,\n        fetching,\n        showModal,\n        pendingRequest,\n        result\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(SLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          maxWidth: 1000,\n          spanHeight: true,\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            connected: connected,\n            address: address,\n            chainId: chainId,\n            killSession: this.resetApp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(SContent, {\n            children: fetching ? /*#__PURE__*/_jsxDEV(Column, {\n              center: true,\n              children: /*#__PURE__*/_jsxDEV(SContainer, {\n                children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 15\n            }, this) : !!assets && !!assets.length ? /*#__PURE__*/_jsxDEV(SBalances, {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Column, {\n                center: true,\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 575,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(STestButtonContainer, {\n                  children: [/*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.setController(),\n                    children: \"setController\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testApprove(),\n                    children: \"testApprove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 582,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testBalance(),\n                    children: \"testBalance\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 586,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testDeposit(),\n                    children: \"testDeposit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 590,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testWithdraw(),\n                    children: \"testWithdraw\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 595,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(STestButton, {\n                    left: true,\n                    onClick: () => this.testEarn(),\n                    children: \"testEarn\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 599,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Balances\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(AccountAssets, {\n                chainId: chainId,\n                assets: assets\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Valuts Balances\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(AccountAssets, {\n                chainId: chainId,\n                assets: assets2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 17\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this) : /*#__PURE__*/_jsxDEV(SLanding, {\n              center: true,\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: `Test Web3Modal`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n                onClick: this.onConnect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          show: showModal,\n          toggleModal: this.toggleModal,\n          children: pendingRequest ? /*#__PURE__*/_jsxDEV(SModalContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SModalTitle, {\n              children: \"Pending Call Request\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SContainer, {\n              children: [/*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(SModalParagraph, {\n                children: \"Approve or reject request using your wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 625,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 13\n          }, this) : result ? /*#__PURE__*/_jsxDEV(SModalContainer, {\n            children: [/*#__PURE__*/_jsxDEV(SModalTitle, {\n              children: \"Call Request Approved\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ModalResult, {\n              children: result\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(SModalContainer, {\n            children: /*#__PURE__*/_jsxDEV(SModalTitle, {\n              children: \"Call Request Rejected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = { ...INITIAL_STATE\n    };\n    this.web3Modal = new Web3Modal({\n      network: this.getNetwork(),\n      cacheProvider: true,\n      providerOptions: this.getProviderOptions()\n    });\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"SLayout\");\n$RefreshReg$(_c2, \"SContent\");\n$RefreshReg$(_c3, \"SContainer\");\n$RefreshReg$(_c4, \"SLanding\");\n$RefreshReg$(_c5, \"SModalContainer\");\n$RefreshReg$(_c6, \"SModalTitle\");\n$RefreshReg$(_c7, \"SModalParagraph\");\n$RefreshReg$(_c8, \"SBalances\");\n$RefreshReg$(_c9, \"STestButtonContainer\");\n$RefreshReg$(_c10, \"STestButton\");","map":{"version":3,"sources":["/Users/helen/fi/protocol-demo/frontend/src/App.tsx"],"names":["React","styled","Web3","Web3Modal","WalletConnectProvider","Fortmatic","Torus","Authereum","Bitski","Button","Column","Wrapper","Modal","Header","Loader","ModalResult","AccountAssets","ConnectButton","formatTestTransaction","getChainData","fonts","ETH_SEND_TRANSACTION","ethers","utils","DAI_ABI","require","StrategyCurve3CRVv2_ABI","ControllerV4_ABI","PickleJar_ABI","DAI","three_crv","PickleJar","StrategyCurve3CRVv2","ControllerV4","SLayout","div","SContent","SContainer","SLanding","SModalContainer","SModalTitle","SModalParagraph","p","SBalances","STestButtonContainer","STestButton","size","medium","INITIAL_STATE","fetching","address","web3","provider","connected","chainId","networkId","assets","assets2","showModal","pendingRequest","result","initWeb3","eth","extend","methods","name","call","outputFormatter","hexToNumber","App","Component","constructor","props","web3Modal","state","claim","onConnect","connect","subscribeProvider","accounts","getAccounts","net","getId","console","log","setState","getAccountAssets","on","resetApp","getNetwork","network","getProviderOptions","providerOptions","walletconnect","package","options","infuraId","process","env","REACT_APP_INFURA_ID","torus","fortmatic","key","REACT_APP_FORTMATIC_KEY","authereum","bitski","clientId","REACT_APP_BITSKI_CLIENT_ID","callbackUrl","window","location","href","prov","providers","Web3Provider","balance","getBalance","toString","ethAsset","push","abi","error","toggleModal","testSendTransaction","tx","sendTransaction","_tx","Promise","resolve","reject","once","txHash","catch","err","formattedResult","action","from","to","value","setController","givenProvider","controller","Contract","rep","setJar","send","JSON","stringify","approveStrategy","setStrategy","testApprove","test1","getSigner","approve","parseUnits","testDeposit","deposit","testBalance","balanceOf","testWithdraw","withdrawAll","testEarn","currentProvider","close","clearCachedProvider","render","length","cacheProvider","componentDidMount","cachedProvider"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Web3 from \"web3\";\nimport { convertUtf8ToHex } from \"@walletconnect/utils\";\n\nimport Web3Modal from \"web3modal\";\n// @ts-ignore\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n// @ts-ignore\nimport Fortmatic from \"fortmatic\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Authereum from \"authereum\";\nimport { Bitski } from \"bitski\";\n\nimport Button from \"./components/Button\";\nimport Column from \"./components/Column\";\nimport Wrapper from \"./components/Wrapper\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/Header\";\nimport Loader from \"./components/Loader\";\nimport ModalResult from \"./components/ModalResult\";\nimport AccountAssets from \"./components/AccountAssets\";\nimport ConnectButton from \"./components/ConnectButton\";\n\nimport { apiGetAccountAssets } from \"./helpers/api\";\nimport {\n  hashPersonalMessage,\n  recoverPublicKey,\n  recoverPersonalSignature,\n  formatTestTransaction,\n  getChainData\n} from \"./helpers/utilities\";\nimport { IAssetData, IBoxProfile } from \"./helpers/types\";\nimport { fonts } from \"./styles\";\nimport { openBox, getProfile } from \"./helpers/box\";\nimport {\n  ETH_SEND_TRANSACTION,\n  ETH_SIGN,\n  PERSONAL_SIGN,\n  BOX_GET_PROFILE,\n  DAI_BALANCE_OF,\n  DAI_TRANSFER\n} from \"./constants\";\nimport { callBalanceOf, callTransfer } from \"./helpers/web3\";\nimport { ethers, utils } from 'ethers';\nconst DAI_ABI = require(\"./abi/dai.json\");\nconst StrategyCurve3CRVv2_ABI = require(\"./abi/StrategyCurve3CRVv2.json\");\nconst ControllerV4_ABI = require(\"./abi/ControllerV4.json\");\nconst PickleJar_ABI = require(\"./abi/PickleJar.json\");\n\n\nconst DAI = \"0x6b175474e89094c44da98b954eedeac495271d0f\";\nconst three_crv = \"0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\";\nconst PickleJar = \"0xB54aE04A1472FCdd0f3C122cF716c56415F4D853\";\nconst StrategyCurve3CRVv2 = \"0x6E7622518572571aFf70c66440B82f3Dcfef1C5D\";\nconst ControllerV4 = \"0x4801F0559606C4cfDe29360D82A3836Aa2fa915d\";\n\n\nconst SLayout = styled.div`\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  text-align: center;\n`;\n\nconst SContent = styled(Wrapper)`\n  width: 100%;\n  height: 100%;\n  padding: 0 16px;\n`;\n\nconst SContainer = styled.div`\n  height: 100%;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n`;\n\nconst SLanding = styled(Column)`\n  height: 600px;\n`;\n\nconst SModalContainer = styled.div`\n  width: 100%;\n  position: relative;\n  word-wrap: break-word;\n`;\n\nconst SModalTitle = styled.div`\n  margin: 1em 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nconst SModalParagraph = styled.p`\n  margin-top: 30px;\n`;\n\n// @ts-ignore\nconst SBalances = styled(SLanding)`\n  height: 100%;\n  & h3 {\n    padding-top: 30px;\n  }\n`;\n\nconst STestButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst STestButton = styled(Button)`\n  border-radius: 8px;\n  font-size: ${fonts.size.medium};\n  height: 44px;\n  width: 100%;\n  max-width: 175px;\n  margin: 12px;\n`;\n\ninterface IAppState {\n  fetching: boolean;\n  address: string;\n  web3: any;\n  provider: any;\n  connected: boolean;\n  chainId: number;\n  networkId: number;\n  assets: IAssetData[];\n  assets2: IAssetData[];\n  showModal: boolean;\n  pendingRequest: boolean;\n  result: any | null;\n}\n\nconst INITIAL_STATE: IAppState = {\n  fetching: false,\n  address: \"\",\n  web3: null,\n  provider: null,\n  connected: false,\n  chainId: 1,\n  networkId: 1,\n  assets: [],\n  assets2: [],\n  showModal: false,\n  pendingRequest: false,\n  result: null\n};\n\nfunction initWeb3(provider: any) {\n  const web3: any = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber\n      }\n    ]\n  });\n\n  return web3;\n}\n\nclass App extends React.Component<any, any> {\n  // @ts-ignore\n  public web3Modal: Web3Modal;\n  public state: IAppState;\n\n  public claim: string = \"0x5aa37930cbe5f4b04d617f71f78abc6c21be4cc0\";\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      ...INITIAL_STATE\n    };\n\n    this.web3Modal = new Web3Modal({\n      network: this.getNetwork(),\n      cacheProvider: true,\n      providerOptions: this.getProviderOptions()\n    });\n  }\n\n  public componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n  public onConnect = async () => {\n    const provider = await this.web3Modal.connect();\n\n    await this.subscribeProvider(provider);\n\n    const web3: any = initWeb3(provider);\n\n    const accounts = await web3.eth.getAccounts();\n\n    const address = accounts[0];\n\n    const networkId = await web3.eth.net.getId();\n\n    const chainId = await web3.eth.chainId();\n\n    console.log(`chainId is ${chainId}  networkId ${networkId}`)\n\n    await this.setState({\n      web3,\n      provider,\n      connected: true,\n      address,\n      chainId,\n      networkId\n    });\n\n    await this.getAccountAssets(provider);\n  };\n\n  public subscribeProvider = async (provider: any) => {\n    if (!provider.on) {\n      return;\n    }\n    provider.on(\"close\", () => this.resetApp());\n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\n      await this.setState({ address: accounts[0] });\n      await this.getAccountAssets(provider);\n    });\n    provider.on(\"chainChanged\", async (chainId: number) => {\n      const { web3 } = this.state;\n      const networkId = await web3.eth.net.getId();\n      await this.setState({ chainId, networkId });\n      await this.getAccountAssets(provider);\n    });\n\n    provider.on(\"networkChanged\", async (networkId: number) => {\n      const { web3 } = this.state;\n      const chainId = await web3.eth.chainId();\n      await this.setState({ chainId, networkId });\n      await this.getAccountAssets(provider);\n    });\n  };\n\n  public getNetwork = () => getChainData(this.state.chainId).network;\n\n  public getProviderOptions = () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId: process.env.REACT_APP_INFURA_ID\n        }\n      },\n      torus: {\n        package: Torus\n      },\n      fortmatic: {\n        package: Fortmatic,\n        options: {\n          key: process.env.REACT_APP_FORTMATIC_KEY\n        }\n      },\n      authereum: {\n        package: Authereum\n      },\n      bitski: {\n        package: Bitski,\n        options: {\n          clientId: process.env.REACT_APP_BITSKI_CLIENT_ID,\n          callbackUrl: window.location.href + \"bitski-callback.html\"\n        }\n      }\n    };\n    return providerOptions;\n  };\n\n  public getAccountAssets = async (provider: any) => {\n    const { address, chainId } = this.state;\n    this.setState({ fetching: false });\n    try {\n      const prov = new ethers.providers.Web3Provider(provider)\n      let balance = await prov.getBalance(address);\n      console.log('[wa]:',balance.toString(), \",\", balance)\n      let assets = [];\n      let assets2 = [];\n      let ethAsset = {\n        \"symbol\": \"ETH\",\n        \"name\": \"Ether\",\n        \"decimals\": \"18\",\n        \"contractAddress\": \"\",\n        \"balance\": balance\n      };\n      assets.push(ethAsset);\n      // A Human-Readable ABI; any supported ABI format could be used\n      const abi = [\n        // Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\",\n        \"function decimals() view returns (uint8)\",\n        \"function symbol() view returns (string)\",\n      ];\n\n       this.setState({ fetching: false, assets });\n    }\n    catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ fetching: false });\n    }\n\n  };\n\n  public toggleModal = () =>\n    this.setState({ showModal: !this.state.showModal });\n\n  public testSendTransaction = async () => {\n    const { web3, address, chainId } = this.state;\n\n    if (!web3) {\n      return;\n    }\n\n    const tx = await formatTestTransaction(address, chainId);\n\n    try {\n      // open modal\n      this.toggleModal();\n\n      // toggle pending request indicator\n      this.setState({ pendingRequest: true });\n\n      // @ts-ignore\n      function sendTransaction(_tx: any) {\n        return new Promise((resolve, reject) => {\n          web3.eth\n            .sendTransaction(_tx)\n            .once(\"transactionHash\", (txHash: string) => resolve(txHash))\n            .catch((err: any) => reject(err));\n        });\n      }\n\n      // send transaction\n      const result = await sendTransaction(tx);\n\n      // format displayed result\n      const formattedResult = {\n        action: ETH_SEND_TRANSACTION,\n        txHash: result,\n        from: address,\n        to: address,\n        value: \"0 ETH\"\n      };\n\n      // display result\n      this.setState({\n        web3,\n        pendingRequest: false,\n        result: formattedResult || null\n      });\n    } catch (error) {\n      console.error(error); // tslint:disable-line\n      this.setState({ web3, pendingRequest: false, result: null });\n    }\n  };\n\n\n\n\n  public setController = async () => {\n    let web3 = new Web3(Web3.givenProvider);\n    const accounts = await web3.eth.getAccounts();\n\n    let controller = new web3.eth.Contract(\n        ControllerV4_ABI,\n       ControllerV4,\n    );\n\n    let rep = await controller.methods.setJar(three_crv,PickleJar).send({from:accounts[0]})\n    console.log(`controller.methods.setJar  response :`,JSON.stringify(rep))\n\n\n    rep = await controller.methods.approveStrategy(three_crv,StrategyCurve3CRVv2).send({from:accounts[0]})\n\n    console.log(`approveStrategy rep is ${JSON.stringify(rep)}`)\n\n    rep = await controller.methods.setStrategy(three_crv,StrategyCurve3CRVv2).send({from:accounts[0]})\n\n    console.log(`setStrategy rep is ${JSON.stringify(rep)}`)\n\n\n  }\n\n\n\n  public testApprove = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function approve(address spender, uint256 amount) returns (bool)\",\n    ];\n    const test1 = new ethers.Contract(three_crv, abi, prov.getSigner());\n    // open modal\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n\n    const rep = await test1.approve(PickleJar, utils.parseUnits('1000000', 18).toString())\n    console.log(`approve DAI rep is ${JSON.stringify(rep)}`)\n    // display result\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n  }\n\n  // 测试交易match A地址300TEST2币  B地址200TEST1币  交易match\n  public testDeposit = async () => {\n    // let web3 = new Web3(Web3.givenProvider);\n    // const accounts = await web3.eth.getAccounts();\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n    \" function deposit(uint256 _amount) public\",\n      \"function totalSupply() view returns (uint256)\",\n      \"function balance() public view returns (uint256)\",\n    ];\n    const test1 = new ethers.Contract(PickleJar, abi, prov.getSigner());\n    console.log('xxx:',test1)\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n    let rep = await test1.balance()\n    console.log(`test1.balance  response :`,JSON.stringify(rep.toString()))\n    // const rep = await test1.totalSupply()\n     rep = await test1.deposit(utils.parseUnits('100', 18).toString())\n\n    console.log(`jar.methods.deposi  response :`,JSON.stringify(rep))\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n\n\n  }\n\n  public testBalance = async () => {\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function deposit(uint256 _amount) public\",\n      \"function totalSupply() view returns (uint256)\",\n      \"function balanceOf(address account) external view returns (uint256)\",\n    ];\n    const test1 = new ethers.Contract(three_crv, abi, prov.getSigner());\n    this.toggleModal();\n\n\n    this.setState({ pendingRequest: true });\n\n    const rep = await test1.balanceOf('0xD90D00101E1Cf4729f02A5598f4288E00001FC04')\n\n    console.log(`jar.methods.testController  response :`,JSON.stringify(rep.toString()))\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n  }\n\n  public testWithdraw = async () => {\n    // let web3 = new Web3(Web3.givenProvider);\n    // const accounts = await web3.eth.getAccounts();\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function earn(address _token, uint256 _amount) public\",\n    ];\n    const test1 = new ethers.Contract(PickleJar, abi, prov.getSigner());\n\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n\n    const rep = await test1.withdrawAll()\n\n    console.log(`jar.methods.withdrawAll  response :`,JSON.stringify(rep))\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n\n\n  }\n\n  public testEarn = async () => {\n    // let web3 = new Web3(Web3.givenProvider);\n    // const accounts = await web3.eth.getAccounts();\n    const provider = await this.web3Modal.connect();\n    const prov = new ethers.providers.Web3Provider(provider);\n    const abi = [\n      // Authenticated Functions\n      \"function withdrawAll() external\",\n    ];\n    const test1 = new ethers.Contract(PickleJar, abi, prov.getSigner());\n\n    this.toggleModal();\n\n    // toggle pending request indicator\n    this.setState({ pendingRequest: true });\n\n    const rep = await test1.withdrawAll()\n\n    console.log(`jar.methods.withdrawAll  response :`,JSON.stringify(rep))\n    this.setState({\n      pendingRequest: false,\n      result: \"ok\" || null\n    });\n\n\n  }\n\n\n  public resetApp = async () => {\n    const { web3 } = this.state;\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\n      await web3.currentProvider.close();\n    }\n    await this.web3Modal.clearCachedProvider();\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  public render = () => {\n    const {\n      assets,\n      assets2,\n      address,\n      connected,\n      chainId,\n      fetching,\n      showModal,\n      pendingRequest,\n      result\n    } = this.state;\n    return (\n      <SLayout>\n        <Column maxWidth={1000} spanHeight>\n          <Header\n            connected={connected}\n            address={address}\n            chainId={chainId}\n            killSession={this.resetApp}\n          />\n          <SContent>\n            {fetching ? (\n              <Column center>\n                <SContainer>\n                  <Loader />\n                </SContainer>\n              </Column>\n            ) : !!assets && !!assets.length ? (\n              <SBalances>\n                <h3>Actions</h3>\n                <Column center>\n                  <h5></h5>\n                  <STestButtonContainer>\n\n                    <STestButton left onClick={() => this.setController()}>\n                      setController\n                    </STestButton>\n\n                    <STestButton left onClick={() => this.testApprove()}>\n                      testApprove\n                    </STestButton>\n\n                    <STestButton left onClick={() => this.testBalance()}>\n                      testBalance\n                    </STestButton>\n\n                    <STestButton left onClick={() => this.testDeposit()}>\n                    testDeposit\n                  </STestButton>\n\n\n                    <STestButton left onClick={() => this.testWithdraw()}>\n                      testWithdraw\n                    </STestButton>\n\n                    <STestButton left onClick={() => this.testEarn()}>\n                      testEarn\n                    </STestButton>\n\n\n                  </STestButtonContainer>\n                </Column>\n                <h3>Balances</h3>\n                <AccountAssets chainId={chainId} assets={assets} />{\" \"}\n                <h3>Valuts Balances</h3>\n                <AccountAssets chainId={chainId} assets={assets2} />{\" \"}\n              </SBalances>\n            ) : (\n                  <SLanding center>\n                    <h3>{`Test Web3Modal`}</h3>\n                    <ConnectButton onClick={this.onConnect} />\n                  </SLanding>\n                )}\n          </SContent>\n        </Column>\n        <Modal show={showModal} toggleModal={this.toggleModal}>\n          {pendingRequest ? (\n            <SModalContainer>\n              <SModalTitle>{\"Pending Call Request\"}</SModalTitle>\n              <SContainer>\n                <Loader />\n                <SModalParagraph>\n                  {\"Approve or reject request using your wallet\"}\n                </SModalParagraph>\n              </SContainer>\n            </SModalContainer>\n          ) : result ? (\n            <SModalContainer>\n              <SModalTitle>{\"Call Request Approved\"}</SModalTitle>\n              <ModalResult>{result}</ModalResult>\n            </SModalContainer>\n          ) : (\n                <SModalContainer>\n                  <SModalTitle>{\"Call Request Rejected\"}</SModalTitle>\n                </SModalContainer>\n              )}\n        </Modal>\n      </SLayout>\n    );\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}